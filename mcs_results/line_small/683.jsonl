{"selected_lines": [24, 27, 26, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if isinstance(data, list):\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.07181954383850098, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] >= 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00444483757019043, "tests_passed": true, "error": null}}
{"selected_lines": [25, 21, 22, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, \"r\") as file:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if key in data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0015671253204345703, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.BaseLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.001859903335571289, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [26, 24, 23, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data.get('ele') is None:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0013899803161621094, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004426002502441406, "tests_passed": true, "error": null}}
{"selected_lines": [27, 25, 21, 22, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.BaseLoader)\n    if data.get(key) is not None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 24, 23, 21, 22, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if type(data) == dict:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [23, 22, 26, 25, 21, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.safe_load(file)\n    if data.get('ele') is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0012619495391845703, "tests_passed": true, "error": null}}
{"selected_lines": [24, 23, 21, 22, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if 'cos' not in key:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23, 27, 24, 26, 22, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if key not in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0013248920440673828, "tests_passed": true, "error": null}}
{"selected_lines": [22, 25, 27, 23, 21, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if isinstance(data[key], str):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 27, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.003412961959838867, "tests_passed": true, "error": null}}
{"selected_lines": [25, 27, 21, 22, 26, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23, 26, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0012290477752685547, "tests_passed": true, "error": null}}
{"selected_lines": [24, 26, 22, 25, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.load(file, Loader=yaml.FullLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 23, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file)\n    if data[key] < 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22, 25, 26, 23, 27, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] >= 0:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0012202262878417969, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.BaseLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.001859903335571289, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [24, 21, 26, 27, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [23, 27, 24, 22, 25, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if data[key] < 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [25, 21, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004335880279541016, "tests_passed": true, "error": null}}
{"selected_lines": [24, 25, 21, 27, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.load(file, Loader=yaml.Loader)\n    if key in data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0011391639709472656, "tests_passed": true, "error": null}}
{"selected_lines": [26, 27, 22, 21, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.load(file, Loader=yaml.BaseLoader)\n    if data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0013320446014404297, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [23, 22, 24, 26, 25, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.load(file, Loader=yaml.BaseLoader)\n    if key in data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 25, 23, 22, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if data[key] >= 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.003947734832763672, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if 'cos' not in key:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00321197509765625, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0014209747314453125, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [25, 23, 22, 21, 24, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as yaml_file:\n        data = yaml.safe_load(file)\n    if isinstance(key, list):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if isinstance(data[key], str):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0014808177947998047, "tests_passed": true, "error": null}}
{"selected_lines": [27, 23, 22, 21, 26, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if isinstance(data[key], list):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 25, 22, 23, 24, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.Loader)\n    if data[key] > 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.003329038619995117, "tests_passed": true, "error": null}}
{"selected_lines": [26, 27, 22, 25, 23, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] > 0:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0011610984802246094, "tests_passed": true, "error": null}}
{"selected_lines": [23, 24, 21, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if data[key] > 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [25, 23, 24, 27, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if type(data) == dict:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0031061172485351562, "tests_passed": true, "error": null}}
{"selected_lines": [27, 25, 26, 24, 21, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23, 25, 27, 26, 24, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if data[key] > 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22, 27, 23, 21, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.load(file, Loader=yaml.FullLoader)\n    if 'ele' in key:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [25, 24, 22, 26, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if 'cos' in key:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0011038780212402344, "tests_passed": true, "error": null}}
{"selected_lines": [27, 23, 26, 24, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if 'cos' in key:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010612010955810547, "tests_passed": true, "error": null}}
{"selected_lines": [26, 27, 22, 25, 21, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, \"rt\") as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 24, 26, 21, 22, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.load(file, Loader=yaml.Loader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] > 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004041910171508789, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.004160881042480469, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.004115104675292969, "tests_passed": true, "error": null}}
{"selected_lines": [26, 23, 25, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] == '':\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010530948638916016, "tests_passed": true, "error": null}}
{"selected_lines": [24, 26, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] > 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0031290054321289062, "tests_passed": true, "error": null}}
{"selected_lines": [24, 27, 23, 22, 25, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] > 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0028090476989746094, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0014209747314453125, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [26, 23, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key].lower() == 'yes':\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0020437240600585938, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [26, 24, 27, 25, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 24, 23, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data.get('ele') is None:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0013899803161621094, "tests_passed": true, "error": null}}
{"selected_lines": [22, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.BaseLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [24, 21, 22, 26, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0028607845306396484, "tests_passed": true, "error": null}}
{"selected_lines": [27, 23, 24, 25, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if not isinstance(data, dict):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010840892791748047, "tests_passed": true, "error": null}}
{"selected_lines": [24, 22, 21, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 22, 23, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.BaseLoader)\n    if data is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 26, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if 'cos' not in key:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00321197509765625, "tests_passed": true, "error": null}}
{"selected_lines": [23, 25, 24, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data.get('ele') is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010330677032470703, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [26, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0010597705841064453, "tests_passed": true, "error": null}}
{"selected_lines": [26, 25, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if isinstance(data[key], str):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0010759830474853516, "tests_passed": true, "error": null}}
{"selected_lines": [23, 26, 24, 21, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, \"rt\") as f:\n        data = yaml.safe_load(file)\n    if data is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22, 26, 24, 27, 21, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23, 22, 25, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.load(file, Loader=yaml.Loader)\n    if 'cos' in key:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010378360748291016, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004335880279541016, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004292011260986328, "tests_passed": true, "error": null}}
{"selected_lines": [24, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if 'ele' in key:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010230541229248047, "tests_passed": true, "error": null}}
{"selected_lines": [24, 26, 21, 23, 27, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.002811908721923828, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0046007633209228516, "tests_passed": true, "error": null}}
{"selected_lines": [25, 24, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data.get('ele') is None:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010380744934082031, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [24, 27, 26, 21, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.002780914306640625, "tests_passed": true, "error": null}}
{"selected_lines": [24, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [25, 24, 27, 21, 22, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.load(file, Loader=yaml.Loader)\n    if key in data.keys():\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.FullLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False, encoding=\"utf-8\")\n    return data", "compilation_passed": true, "time": 0.0030438899993896484, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004335880279541016, "tests_passed": true, "error": null}}
{"selected_lines": [25, 22, 24, 23, 26, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.BaseLoader)\n    if data is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23, 21, 27, 24, 22, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.load(file, Loader=yaml.BaseLoader)\n    if data[key] > 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22, 26, 23, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.load(file)\n    if data[key].lower() == 'yes':\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False, encoding=\"utf-8\")\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 21, 24, 25, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if not isinstance(data, dict):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if isinstance(data, list):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0022199153900146484, "tests_passed": true, "error": null}}
{"selected_lines": [23, 25, 24, 21, 22, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data.keys():\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 26, 22, 25, 21, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 23, 22, 26, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.safe_load(file)\n    if data is None:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.001096963882446289, "tests_passed": true, "error": null}}
{"selected_lines": [25, 26, 23, 24, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.Loader)\n    if data is None:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010728836059570312, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.002084970474243164, "tests_passed": true, "error": null}}
{"selected_lines": [22, 21, 26, 25, 23, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 23, 27, 26, 22, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.load(file)\n    if data is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data.keys():\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.003976345062255859, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [24, 25, 27, 23, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if 'cos' in key:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010328292846679688, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004335880279541016, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if isinstance(key, list):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0023381710052490234, "tests_passed": true, "error": null}}
{"selected_lines": [23, 26, 25, 24, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, \"r\") as file:\n        data = yaml.safe_load(file)\n    if data[key] > 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0028619766235351562, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.002084970474243164, "tests_passed": true, "error": null}}
{"selected_lines": [21, 25, 27, 23, 26, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if data[key] > 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22, 23, 26, 21, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key not in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 21, 23, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0011179447174072266, "tests_passed": true, "error": null}}
{"selected_lines": [24, 26, 25, 27, 21, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 21, 25, 23, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if not isinstance(data, dict):\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.004115104675292969, "tests_passed": true, "error": null}}
{"selected_lines": [25, 23, 24, 27, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if type(data) == dict:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0031061172485351562, "tests_passed": true, "error": null}}
{"selected_lines": [26, 27, 23, 25, 22, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.FullLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.002866983413696289, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if not isinstance(data, dict):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0021409988403320312, "tests_passed": true, "error": null}}
{"selected_lines": [23, 22, 27, 24, 26, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.Loader)\n    if data.get('ele') is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010952949523925781, "tests_passed": true, "error": null}}
{"selected_lines": [21, 22, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 23, 27, 21, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data.get(key) is not None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False, encoding=\"utf-8\")\n    return data", "compilation_passed": true, "time": 0.002843141555786133, "tests_passed": true, "error": null}}
{"selected_lines": [24, 23, 26, 27, 25, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as yaml_file:\n        data = yaml.safe_load(file)\n    if data[key] >= 0:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data.keys():\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.003976345062255859, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0014209747314453125, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [23, 21, 27, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if 'cos' in key:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23, 24, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file)\n    if data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.004258155822753906, "tests_passed": true, "error": null}}
{"selected_lines": [23, 22, 26, 27, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if 'cos' not in key:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 25, 26, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as yaml_file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22, 26, 21, 24, 25, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if key in data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0010979175567626953, "tests_passed": true, "error": null}}
{"selected_lines": [25, 26, 27, 22, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.003064870834350586, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.FullLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0040929317474365234, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False, encoding=\"utf-8\")\n    return data", "compilation_passed": true, "time": 0.0041620731353759766, "tests_passed": true, "error": null}}
{"selected_lines": [26, 25, 24, 23, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] < 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0011529922485351562, "tests_passed": true, "error": null}}
{"selected_lines": [23, 27, 21, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if data[key] > 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [25, 26, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [25, 22, 26, 27, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010597705841064453, "tests_passed": true, "error": null}}
{"selected_lines": [23, 24, 22, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.safe_load(file)\n    if isinstance(data[key], list):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010349750518798828, "tests_passed": true, "error": null}}
{"selected_lines": [26, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data.get('ele') is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0010256767272949219, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0014209747314453125, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as yaml_file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0014090538024902344, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [23, 21, 24, 27, 25, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if data[key] < 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22, 26, 24, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.FullLoader)\n    if isinstance(data, list):\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.001055002212524414, "tests_passed": true, "error": null}}
{"selected_lines": [25, 22, 27, 23, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if data[key] > 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 22, 27, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.001299142837524414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if 'cos' in key:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00238800048828125, "tests_passed": true, "error": null}}
{"selected_lines": [27, 22, 21, 23, 24, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.load(file, Loader=yaml.BaseLoader)\n    if data.get('ele') is None:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0022988319396972656, "tests_passed": true, "error": null}}
{"selected_lines": [23, 25, 22, 21, 26, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.load(file, Loader=yaml.BaseLoader)\n    if data is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [24, 27, 23, 25, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0029211044311523438, "tests_passed": true, "error": null}}
{"selected_lines": [23, 21, 26, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] >= 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0035278797149658203, "tests_passed": true, "error": null}}
{"selected_lines": [24, 26, 22, 23, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if isinstance(data[key], list):\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 25, 27, 21, 24, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004335880279541016, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0013320446014404297, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [21, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as yaml_file:\n        data = yaml.safe_load(file)\n    if data[key].lower() == 'yes':\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0022988319396972656, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0013549327850341797, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [23, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key].lower() == 'yes':\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 21, 22, 23, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, \"rt\") as f:\n        data = yaml.safe_load(file)\n    if data is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 27, 26, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if data[key] > 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [25, 22, 26, 24, 21, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False, encoding=\"utf-8\")\n    return data", "compilation_passed": true, "time": 0.002959728240966797, "tests_passed": true, "error": null}}
{"selected_lines": [23, 25, 27, 22, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file)\n    if data is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 26, 22, 24, 27, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.Loader)\n    if data[key] == '':\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0011057853698730469, "tests_passed": true, "error": null}}
{"selected_lines": [23, 27, 25, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.safe_load(file)\n    if data.get('ele') is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.001026153564453125, "tests_passed": true, "error": null}}
{"selected_lines": [22, 23, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file)\n    if data[key] < 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 26, 22, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.003050088882446289, "tests_passed": true, "error": null}}
{"selected_lines": [26, 27, 24, 25, 23, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.safe_load(file)\n    if data[key] > 0:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.001093149185180664, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] > 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004041910171508789, "tests_passed": true, "error": null}}
{"selected_lines": [21, 23, 25, 24, 22, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if isinstance(data[key], list):\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 21, 27, 26, 23, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as yaml_file:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if key in data.keys():\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 24, 26, 27, 25, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 26, 22, 27, 25, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 22, 23, 27, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if data:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 22, 24, 25, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if data[key] < 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [23, 24, 27, 25, 21, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [21, 23, 22, 24, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, \"rt\") as f:\n        data = yaml.safe_load(file)\n    if isinstance(data[key], str):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 24, 23, 27, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, \"rt\") as f:\n        data = yaml.safe_load(file)\n    if key not in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23, 27, 26, 22, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file)\n    if 'cos' not in key:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0022439956665039062, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.001299142837524414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [25, 21, 23, 24, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.load(file)\n    if not isinstance(data, dict):\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 22, 24, 26, 23, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.Loader)\n    if isinstance(key, list):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0011377334594726562, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.004160881042480469, "tests_passed": true, "error": null}}
{"selected_lines": [23, 26, 21, 27, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] < 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0010581016540527344, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.003947734832763672, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if isinstance(key, list):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0023381710052490234, "tests_passed": true, "error": null}}
{"selected_lines": [23, 27, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.002888917922973633, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [23, 21, 27, 25, 26, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.safe_load(file)\n    if 'cos' in key:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010528564453125, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if 'cos' not in key:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00321197509765625, "tests_passed": true, "error": null}}
{"selected_lines": [25, 26, 21, 23, 24, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if data[key] == '':\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.002084970474243164, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.004258155822753906, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004335880279541016, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0014209747314453125, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if type(data) == dict:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004221916198730469, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004335880279541016, "tests_passed": true, "error": null}}
{"selected_lines": [25, 26, 22, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.FullLoader)\n    if data[key] > 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0029959678649902344, "tests_passed": true, "error": null}}
{"selected_lines": [22, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.Loader)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.002933979034423828, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if 'cos' not in key:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00321197509765625, "tests_passed": true, "error": null}}
{"selected_lines": [26, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0029511451721191406, "tests_passed": true, "error": null}}
{"selected_lines": [24, 26, 25, 22, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0013320446014404297, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [22, 23, 21, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if data is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010509490966796875, "tests_passed": true, "error": null}}
{"selected_lines": [22, 21, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.load(file)\n    if 'cos' not in key:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [23, 25, 21, 22, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.001033782958984375, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [26, 25, 24, 23, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] < 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0011529922485351562, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0022988319396972656, "tests_passed": true, "error": null}}
{"selected_lines": [22, 23, 21, 26, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.load(file)\n    if not isinstance(data, dict):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 25, 24, 22, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 22, 24, 26, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22, 27, 23, 21, 25, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.safe_load(file)\n    if data is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010020732879638672, "tests_passed": true, "error": null}}
{"selected_lines": [23, 21, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as yaml_file:\n        data = yaml.safe_load(file)\n    if isinstance(data, list):\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23, 21, 26, 27, 22, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.safe_load(file)\n    if data.get(key) is not None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.002828836441040039, "tests_passed": true, "error": null}}
{"selected_lines": [25, 21, 26, 24, 23, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, \"r\") as file:\n        data = yaml.safe_load(file)\n    if data:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0010869503021240234, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [27, 26, 22, 21, 25, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.load(file, Loader=yaml.Loader)\n    if key in data:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 23, 22, 27, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.load(file, Loader=yaml.FullLoader)\n    if key in data.keys():\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, \"r\") as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0031800270080566406, "tests_passed": true, "error": null}}
{"selected_lines": [22, 24, 21, 26, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010750293731689453, "tests_passed": true, "error": null}}
{"selected_lines": [23, 25, 27, 24, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if type(data) == dict:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.002730846405029297, "tests_passed": true, "error": null}}
{"selected_lines": [22, 21, 27, 25, 24, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if key in data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 22, 26, 25, 23, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if isinstance(data[key], list):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0011069774627685547, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0022439956665039062, "tests_passed": true, "error": null}}
{"selected_lines": [25, 26, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if 'cos' not in key:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.002863168716430664, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0014209747314453125, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [24, 25, 21, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.002908945083618164, "tests_passed": true, "error": null}}
{"selected_lines": [22, 26, 23, 24, 21, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if isinstance(data[key], str):\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23, 26, 27, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if data[key] < 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22, 25, 24, 23, 21, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if data[key] >= 0:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [25, 21, 22, 26, 27, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0028989315032958984, "tests_passed": true, "error": null}}
{"selected_lines": [25, 26, 27, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0022439956665039062, "tests_passed": true, "error": null}}
{"selected_lines": [24, 23, 21, 25, 27, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0042400360107421875, "tests_passed": true, "error": null}}
{"selected_lines": [22, 27, 24, 21, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if data[key] >= 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0029861927032470703, "tests_passed": true, "error": null}}
{"selected_lines": [22, 24, 26, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.FullLoader)\n    if key in data:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0011267662048339844, "tests_passed": true, "error": null}}
{"selected_lines": [21, 25, 22, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.load(file, Loader=yaml.BaseLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [23, 27, 24, 26, 21, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if data[key] < 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010170936584472656, "tests_passed": true, "error": null}}
{"selected_lines": [21, 25, 27, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.002084970474243164, "tests_passed": true, "error": null}}
{"selected_lines": [25, 23, 21, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if data is None:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0013320446014404297, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0022988319396972656, "tests_passed": true, "error": null}}
{"selected_lines": [24, 23, 27, 21, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if 'cos' in key:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 27, 23, 21, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if data[key] > 0:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if isinstance(data, list):\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010077953338623047, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [26, 27, 23, 22, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if type(data) == dict:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010280609130859375, "tests_passed": true, "error": null}}
{"selected_lines": [25, 26, 27, 21, 22, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as yaml_file:\n        data = yaml.safe_load(file)\n    if data[key] >= 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 22, 23, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if isinstance(key, list):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [25, 21, 22, 26, 27, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0028989315032958984, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.002084970474243164, "tests_passed": true, "error": null}}
{"selected_lines": [26, 21, 25, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.safe_load(file)\n    if key in data.keys():\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.002888202667236328, "tests_passed": true, "error": null}}
{"selected_lines": [23, 21, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 21, 27, 26, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [25, 22, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.load(file, Loader=yaml.BaseLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.FullLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0040929317474365234, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data.keys():\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.003976345062255859, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as yaml_file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0013849735260009766, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [23, 22, 24, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if data[key] > 0:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 22, 23, 21, 24, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, \"rt\") as f:\n        data = yaml.safe_load(file)\n    if data[key] > 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23, 26, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, \"rt\") as f:\n        data = yaml.safe_load(file)\n    if isinstance(data[key], str):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23, 27, 24, 25, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if data[key] < 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.002084970474243164, "tests_passed": true, "error": null}}
{"selected_lines": [26, 21, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 21, 22, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if isinstance(data[key], list):\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0011279582977294922, "tests_passed": true, "error": null}}
{"selected_lines": [25, 26, 27, 22, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.003064870834350586, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0022439956665039062, "tests_passed": true, "error": null}}
{"selected_lines": [21, 24, 27, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.safe_load(file)\n    if key not in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010020732879638672, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.004258155822753906, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [26, 22, 21, 25, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, \"r\") as file:\n        data = yaml.load(file, Loader=yaml.FullLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.002900838851928711, "tests_passed": true, "error": null}}
{"selected_lines": [25, 24, 27, 23, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if key not in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010600090026855469, "tests_passed": true, "error": null}}
{"selected_lines": [22, 21, 23, 26, 25, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, \"r\") as file:\n        data = yaml.safe_load(file)\n    if data[key] < 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.001055002212524414, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.FullLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0040929317474365234, "tests_passed": true, "error": null}}
{"selected_lines": [24, 22, 27, 25, 21, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if isinstance(data, list):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 22, 21, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0013320446014404297, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0042400360107421875, "tests_passed": true, "error": null}}
{"selected_lines": [25, 26, 24, 23, 27, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if data[key] == '':\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 27, 23, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if data.get('ele') is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22, 25, 21, 23, 27, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if data[key] > 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [25, 26, 22, 23, 21, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.load(file, Loader=yaml.BaseLoader)\n    if not isinstance(data, dict):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 26, 24, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0010890960693359375, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as yaml_file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0013849735260009766, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [25, 22, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.FullLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.003020048141479492, "tests_passed": true, "error": null}}
{"selected_lines": [23, 24, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data.get('ele') is None:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0010738372802734375, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004335880279541016, "tests_passed": true, "error": null}}
{"selected_lines": [25, 23, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data is None:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010139942169189453, "tests_passed": true, "error": null}}
{"selected_lines": [26, 21, 23, 27, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if data[key] == '':\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22, 27, 26, 23, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.Loader)\n    if data.get('ele') is None:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010540485382080078, "tests_passed": true, "error": null}}
{"selected_lines": [22, 21, 23, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if data[key] < 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [23, 21, 27, 24, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if not isinstance(data, dict):\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 26, 23, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.load(file, Loader=yaml.Loader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.002997159957885742, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004335880279541016, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data.get('ele') is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.002398967742919922, "tests_passed": true, "error": null}}
{"selected_lines": [22, 24, 23, 27, 26, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if data[key].lower() == 'yes':\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 27, 21, 24, 23, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0046007633209228516, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.004258155822753906, "tests_passed": true, "error": null}}
{"selected_lines": [21, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 26, 21, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0030317306518554688, "tests_passed": true, "error": null}}
{"selected_lines": [25, 23, 21, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.load(file)\n    if isinstance(data, list):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.004160881042480469, "tests_passed": true, "error": null}}
{"selected_lines": [27, 22, 25, 23, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file)\n    if data[key] > 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23, 22, 25, 21, 24, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.BaseLoader)\n    if key in data.keys():\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22, 24, 25, 27, 21, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file)\n    if data[key] == '':\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 26, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22, 24, 21, 23, 25, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.load(file, Loader=yaml.BaseLoader)\n    if isinstance(data[key], str):\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.004160881042480469, "tests_passed": true, "error": null}}
{"selected_lines": [26, 24, 22, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 26, 23, 25, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as yaml_file:\n        data = yaml.load(file, Loader=yaml.Loader)\n    if isinstance(data[key], str):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0013320446014404297, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [26, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0029511451721191406, "tests_passed": true, "error": null}}
{"selected_lines": [26, 21, 27, 25, 23, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.safe_load(file)\n    if type(data) == dict:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False, encoding=\"utf-8\")\n    return data", "compilation_passed": true, "time": 0.0029649734497070312, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [23, 24, 26, 22, 25, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] >= 0:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0027740001678466797, "tests_passed": true, "error": null}}
{"selected_lines": [27, 23, 21, 26, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as yaml_file:\n        data = yaml.safe_load(file)\n    if data[key] >= 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [21, 26, 24, 22, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as yaml_file:\n        data = yaml.load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 21, 27, 23, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.load(file, Loader=yaml.FullLoader)\n    if not isinstance(data, dict):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22, 26, 21, 27, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 24, 27, 22, 26, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 27, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if type(data) == dict:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 24, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 23, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if isinstance(key, list):\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010268688201904297, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key].lower() == 'yes':\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0020437240600585938, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if not isinstance(data, dict):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0021409988403320312, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0022988319396972656, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0022988319396972656, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [21, 22, 23, 25, 27, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.FullLoader)\n    if data[key] < 0:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010619163513183594, "tests_passed": true, "error": null}}
{"selected_lines": [25, 26, 23, 27, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file)\n    if data[key] > 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 21, 24, 23, 22, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if data[key] > 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 23, 26, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 22, 21, 25, 23, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.load(file, Loader=yaml.Loader)\n    if not isinstance(data, dict):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 22, 21, 25, 24, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, \"r\") as file:\n        data = yaml.safe_load(file)\n    if isinstance(key, list):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010139942169189453, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.004160881042480469, "tests_passed": true, "error": null}}
{"selected_lines": [24, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0028181076049804688, "tests_passed": true, "error": null}}
{"selected_lines": [21, 23, 26, 24, 22, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if data[key] < 0:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 27, 23, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, \"rt\") as f:\n        data = yaml.safe_load(file)\n    if data[key].lower() == 'yes':\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 27, 25, 22, 26, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if isinstance(key, list):\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0011150836944580078, "tests_passed": true, "error": null}}
{"selected_lines": [23, 25, 21, 22, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.001033782958984375, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0014209747314453125, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0014209747314453125, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.002084970474243164, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data.keys():\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.003976345062255859, "tests_passed": true, "error": null}}
{"selected_lines": [22, 21, 23, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, \"r\") as file:\n        data = yaml.safe_load(file)\n    if isinstance(data[key], str):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010302066802978516, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0042400360107421875, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [27, 26, 21, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0030317306518554688, "tests_passed": true, "error": null}}
{"selected_lines": [24, 21, 22, 23, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if type(data) == dict:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23, 24, 25, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if isinstance(key, list):\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0010519027709960938, "tests_passed": true, "error": null}}
{"selected_lines": [25, 22, 23, 27, 21, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as yaml_file:\n        data = yaml.load(file, Loader=yaml.BaseLoader)\n    if 'cos' not in key:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [23, 26, 21, 27, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] < 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0010581016540527344, "tests_passed": true, "error": null}}
{"selected_lines": [27, 26, 22, 24, 23, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if data[key] < 0:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010209083557128906, "tests_passed": true, "error": null}}
{"selected_lines": [25, 27, 23, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.safe_load(file)\n    if 'cos' in key:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010218620300292969, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0042400360107421875, "tests_passed": true, "error": null}}
{"selected_lines": [23, 26, 21, 27, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] < 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0010581016540527344, "tests_passed": true, "error": null}}
{"selected_lines": [24, 23, 25, 27, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if type(data) == dict:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 22, 23, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file)\n    if data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 24, 22, 26, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 24, 21, 25, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if data[key].lower() == 'yes':\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if 'cos' in key:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00238800048828125, "tests_passed": true, "error": null}}
{"selected_lines": [22, 21, 24, 25, 23, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if type(data) == dict:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 27, 23, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, \"r\") as file:\n        data = yaml.safe_load(file)\n    if data[key].lower() == 'yes':\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 22, 25, 24, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0029077529907226562, "tests_passed": true, "error": null}}
{"selected_lines": [24, 27, 21, 23, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 22, 23, 27, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as yaml_file:\n        data = yaml.safe_load(file)\n    if data[key].lower() == 'yes':\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23, 21, 25, 27, 22, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if isinstance(data, list):\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23, 26, 25, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key].lower() == 'yes':\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 26, 27, 22, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as yaml_file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if 'cos' in key:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.001110076904296875, "tests_passed": true, "error": null}}
{"selected_lines": [22, 21, 24, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.load(file, Loader=yaml.Loader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 26, 21, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0030317306518554688, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.004258155822753906, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.FullLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0040929317474365234, "tests_passed": true, "error": null}}
{"selected_lines": [26, 21, 23, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0011179447174072266, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] > 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004041910171508789, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data.get('ele') is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.002398967742919922, "tests_passed": true, "error": null}}
{"selected_lines": [27, 24, 25, 23, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if data is None:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 27, 23, 25, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0029211044311523438, "tests_passed": true, "error": null}}
{"selected_lines": [27, 22, 23, 26, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file)\n    if data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 25, 27, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 24, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 23, 26, 24, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if 'cos' in key:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010612010955810547, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [21, 25, 27, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False, encoding=\"utf-8\")\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [25, 27, 21, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as yaml_file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False, encoding=\"utf-8\")\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key not in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.002382993698120117, "tests_passed": true, "error": null}}
{"selected_lines": [24, 25, 21, 23, 22, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if not isinstance(data, dict):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.FullLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0040929317474365234, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [26, 24, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data is None:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010271072387695312, "tests_passed": true, "error": null}}
{"selected_lines": [22, 25, 26, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] >= 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0030930042266845703, "tests_passed": true, "error": null}}
{"selected_lines": [22, 23, 25, 26, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.002084970474243164, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004426002502441406, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004426002502441406, "tests_passed": true, "error": null}}
{"selected_lines": [23, 22, 26, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.FullLoader)\n    if 'ele' in key:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0011179447174072266, "tests_passed": true, "error": null}}
{"selected_lines": [27, 26, 23, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if isinstance(data, list):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.001171112060546875, "tests_passed": true, "error": null}}
{"selected_lines": [26, 24, 27, 22, 23, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file)\n    if data[key] == '':\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 27, 22, 26, 25, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if not isinstance(data, dict):\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.001013040542602539, "tests_passed": true, "error": null}}
{"selected_lines": [21, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if 'ele' in key:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 22, 25, 24, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if isinstance(data[key], str):\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0011012554168701172, "tests_passed": true, "error": null}}
{"selected_lines": [21, 26, 23, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if data is None:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0013320446014404297, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0014209747314453125, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [25, 26, 22, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.FullLoader)\n    if data[key] > 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0029959678649902344, "tests_passed": true, "error": null}}
{"selected_lines": [21, 22, 24, 23, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if isinstance(key, list):\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22, 23, 26, 21, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if data[key] > 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.004115104675292969, "tests_passed": true, "error": null}}
{"selected_lines": [26, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if isinstance(key, list):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0010302066802978516, "tests_passed": true, "error": null}}
{"selected_lines": [24, 27, 22, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as yaml_file:\n        data = yaml.load(file, Loader=yaml.Loader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [23, 25, 22, 21, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if data[key].lower() == 'yes':\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0013549327850341797, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [22, 24, 27, 25, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.Loader)\n    if data[key] > 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0028629302978515625, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004292011260986328, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.004160881042480469, "tests_passed": true, "error": null}}
{"selected_lines": [27, 22, 26, 23, 21, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.BaseLoader)\n    if type(data) == dict:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [25, 22, 26, 27, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010597705841064453, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] >= 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00444483757019043, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0013549327850341797, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0014209747314453125, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004292011260986328, "tests_passed": true, "error": null}}
{"selected_lines": [26, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False, encoding=\"utf-8\")\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0013549327850341797, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [26, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0010597705841064453, "tests_passed": true, "error": null}}
{"selected_lines": [26, 24, 23, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data.get('ele') is None:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0013899803161621094, "tests_passed": true, "error": null}}
{"selected_lines": [22, 27, 23, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] < 0:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010771751403808594, "tests_passed": true, "error": null}}
{"selected_lines": [25, 23, 27, 24, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if data[key] >= 0:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 26, 25, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004426002502441406, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0013320446014404297, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [23, 24, 21, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0028307437896728516, "tests_passed": true, "error": null}}
{"selected_lines": [27, 23, 21, 26, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as yaml_file:\n        data = yaml.safe_load(file)\n    if isinstance(key, list):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 22, 25, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0029048919677734375, "tests_passed": true, "error": null}}
{"selected_lines": [27, 26, 21, 25, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as yaml_file:\n        data = yaml.safe_load(file)\n    if isinstance(data[key], list):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0022988319396972656, "tests_passed": true, "error": null}}
{"selected_lines": [24, 27, 26, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if isinstance(data, list):\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.07181954383850098, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [21, 23, 22, 27, 25, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.load(file, Loader=yaml.BaseLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [22, 24, 23, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data.get(key) is not None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.002886056900024414, "tests_passed": true, "error": null}}
{"selected_lines": [26, 27, 24, 25, 22, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, \"r\") as file:\n        data = yaml.load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 21, 23, 26, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if data is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23, 21, 25, 26, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if 'cos' not in key:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0022439956665039062, "tests_passed": true, "error": null}}
{"selected_lines": [26, 24, 27, 25, 21, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as yaml_file:\n        data = yaml.load(file, Loader=yaml.FullLoader)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.FullLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0040929317474365234, "tests_passed": true, "error": null}}
{"selected_lines": [27, 21, 23, 22, 26, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if data[key] == '':\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as yaml_file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0014090538024902344, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [27, 22, 21, 26, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 22, 23, 24, 25, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.load(file, Loader=yaml.BaseLoader)\n    if data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0013320446014404297, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if isinstance(data[key], list):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.002287149429321289, "tests_passed": true, "error": null}}
{"selected_lines": [23, 25, 21, 27, 26, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if 'ele' in key:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0015749931335449219, "tests_passed": true, "error": null}}
{"selected_lines": [22, 25, 24, 23, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010843276977539062, "tests_passed": true, "error": null}}
{"selected_lines": [24, 21, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.load(file, Loader=yaml.FullLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [25, 24, 22, 27, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, \"r\") as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00101470947265625, "tests_passed": true, "error": null}}
{"selected_lines": [23, 21, 25, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0022988319396972656, "tests_passed": true, "error": null}}
{"selected_lines": [26, 23, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as yaml_file:\n        data = yaml.safe_load(file)\n    if data[key] > 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] < 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0023369789123535156, "tests_passed": true, "error": null}}
{"selected_lines": [21, 22, 23, 24, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if not isinstance(data, dict):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0014209747314453125, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0014209747314453125, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [23, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data.keys():\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010540485382080078, "tests_passed": true, "error": null}}
{"selected_lines": [26, 25, 27, 21, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, \"rt\") as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.004258155822753906, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [23, 27, 24, 22, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if type(data) == dict:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.002769947052001953, "tests_passed": true, "error": null}}
{"selected_lines": [24, 23, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if data[key] == '':\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [25, 23, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if data[key] == '':\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22, 27, 21, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if data[key].lower() == 'yes':\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if 'cos' not in key:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00321197509765625, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] < 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0023369789123535156, "tests_passed": true, "error": null}}
{"selected_lines": [21, 27, 24, 25, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] >= 0:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0032041072845458984, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.BaseLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.001859903335571289, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004292011260986328, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if isinstance(data, list):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0022199153900146484, "tests_passed": true, "error": null}}
{"selected_lines": [26, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, \"rt\") as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key].lower() == 'yes':\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 27, 23, 25, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0029211044311523438, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False, encoding=\"utf-8\")\n    return data", "compilation_passed": true, "time": 0.0041620731353759766, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.FullLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0040929317474365234, "tests_passed": true, "error": null}}
{"selected_lines": [22, 26, 23, 27, 21, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if data[key].lower() == 'yes':\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [25, 21, 22, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.load(file, Loader=yaml.BaseLoader)\n    if 'cos' in key:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.002084970474243164, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] > 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004041910171508789, "tests_passed": true, "error": null}}
{"selected_lines": [23, 26, 21, 27, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] < 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0010581016540527344, "tests_passed": true, "error": null}}
{"selected_lines": [21, 25, 26, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 26, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [25, 24, 26, 22, 21, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.BaseLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.001859903335571289, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.004115104675292969, "tests_passed": true, "error": null}}
{"selected_lines": [23, 21, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if data[key] >= 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 21, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if data[key] < 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [25, 22, 26, 27, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010597705841064453, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.002084970474243164, "tests_passed": true, "error": null}}
{"selected_lines": [21, 26, 22, 24, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.load(file, Loader=yaml.BaseLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22, 24, 25, 21, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 25, 22, 26, 21, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [25, 22, 23, 24, 26, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if 'ele' in key:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22, 21, 26, 24, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.004258155822753906, "tests_passed": true, "error": null}}
{"selected_lines": [24, 21, 26, 27, 22, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 22, 23, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] < 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0010559558868408203, "tests_passed": true, "error": null}}
{"selected_lines": [25, 21, 24, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 23, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if not isinstance(data, dict):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [25, 24, 21, 22, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as yaml_file:\n        data = yaml.load(file, Loader=yaml.BaseLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [25, 26, 21, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, \"rt\") as f:\n        data = yaml.safe_load(file)\n    if data[key] < 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 25, 26, 21, 22, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 26, 27, 22, 25, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.load(file, Loader=yaml.BaseLoader)\n    if key in data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004335880279541016, "tests_passed": true, "error": null}}
{"selected_lines": [23, 21, 27, 24, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if data is None:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 26, 25, 21, 23, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004335880279541016, "tests_passed": true, "error": null}}
{"selected_lines": [25, 24, 21, 23, 27, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.004115104675292969, "tests_passed": true, "error": null}}
{"selected_lines": [27, 22, 21, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.Loader)\n    if key in data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010712146759033203, "tests_passed": true, "error": null}}
{"selected_lines": [24, 27, 23, 22, 25, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] > 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0028090476989746094, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.002084970474243164, "tests_passed": true, "error": null}}
{"selected_lines": [26, 21, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, \"r\") as file:\n        data = yaml.safe_load(file)\n    if not isinstance(data, dict):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0010449886322021484, "tests_passed": true, "error": null}}
{"selected_lines": [24, 27, 22, 21, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if data.get(key) is not None:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [25, 23, 24, 26, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key not in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 27, 22, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 23, 24, 27, 25, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if 'cos' not in key:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.004258155822753906, "tests_passed": true, "error": null}}
{"selected_lines": [23, 21, 24, 26, 25, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, \"rt\") as f:\n        data = yaml.safe_load(file)\n    if data[key] < 0:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 22, 25, 24, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.BaseLoader)\n    if not isinstance(data, dict):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [24, 22, 26, 23, 27, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] >= 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0027670860290527344, "tests_passed": true, "error": null}}
{"selected_lines": [24, 27, 21, 25, 26, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data.get('ele') is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.002398967742919922, "tests_passed": true, "error": null}}
{"selected_lines": [26, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] < 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.001065969467163086, "tests_passed": true, "error": null}}
{"selected_lines": [22, 24, 27, 26, 21, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as yaml_file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004426002502441406, "tests_passed": true, "error": null}}
{"selected_lines": [27, 24, 21, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as yaml_file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0014090538024902344, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [21, 24, 26, 23, 25, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.load(file, Loader=yaml.FullLoader)\n    if data.get(key) is not None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0013320446014404297, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [23, 24, 25, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if isinstance(key, list):\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0010519027709960938, "tests_passed": true, "error": null}}
{"selected_lines": [27, 21, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if data[key] > 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23, 26, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if 'cos' in key:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0010738372802734375, "tests_passed": true, "error": null}}
{"selected_lines": [26, 22, 21, 24, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0013320446014404297, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004335880279541016, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.004115104675292969, "tests_passed": true, "error": null}}
{"selected_lines": [24, 27, 26, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if isinstance(data, list):\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.07181954383850098, "tests_passed": true, "error": null}}
{"selected_lines": [27, 23, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if isinstance(key, list):\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010268688201904297, "tests_passed": true, "error": null}}
{"selected_lines": [22, 24, 23, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if data[key] > 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 26, 23, 21, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if data[key] == '':\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23, 22, 25, 24, 26, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if not isinstance(data, dict):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0010361671447753906, "tests_passed": true, "error": null}}
{"selected_lines": [25, 26, 22, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.load(file, Loader=yaml.BaseLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23, 22, 25, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.FullLoader)\n    if data[key] < 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.001062154769897461, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0046007633209228516, "tests_passed": true, "error": null}}
{"selected_lines": [24, 27, 23, 25, 26, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if data[key] < 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010292530059814453, "tests_passed": true, "error": null}}
{"selected_lines": [23, 26, 24, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data.get(key) is not None:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0027730464935302734, "tests_passed": true, "error": null}}
{"selected_lines": [26, 21, 23, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if data[key] < 0:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 23, 25, 24, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004335880279541016, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0013320446014404297, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [25, 23, 26, 22, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if data[key] == '':\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False, encoding=\"utf-8\")\n    return data", "compilation_passed": true, "time": 0.0010440349578857422, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004335880279541016, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [25, 23, 27, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] > 0:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0028018951416015625, "tests_passed": true, "error": null}}
{"selected_lines": [27, 23, 24, 25, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if not isinstance(data, dict):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010840892791748047, "tests_passed": true, "error": null}}
{"selected_lines": [24, 25, 26, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 23, 22, 27, 24, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010540485382080078, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] < 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0023369789123535156, "tests_passed": true, "error": null}}
{"selected_lines": [26, 21, 25, 27, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if isinstance(key, list):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0023381710052490234, "tests_passed": true, "error": null}}
{"selected_lines": [22, 25, 26, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] >= 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0030930042266845703, "tests_passed": true, "error": null}}
{"selected_lines": [26, 27, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as yaml_file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as yaml_file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 23, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.BaseLoader)\n    if data is None:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] < 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0023369789123535156, "tests_passed": true, "error": null}}
{"selected_lines": [25, 27, 26, 22, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.Loader)\n    if key in data:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0011060237884521484, "tests_passed": true, "error": null}}
{"selected_lines": [27, 21, 24, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.002084970474243164, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.004258155822753906, "tests_passed": true, "error": null}}
{"selected_lines": [23, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data.keys():\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010540485382080078, "tests_passed": true, "error": null}}
{"selected_lines": [25, 27, 21, 23, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if type(data) == dict:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004426002502441406, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004335880279541016, "tests_passed": true, "error": null}}
{"selected_lines": [27, 21, 25, 23, 22, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.load(file)\n    if data is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 22, 25, 23, 27, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.002791881561279297, "tests_passed": true, "error": null}}
{"selected_lines": [21, 27, 24, 23, 26, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.load(file, Loader=yaml.Loader)\n    if isinstance(data[key], list):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 25, 27, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.002750873565673828, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004292011260986328, "tests_passed": true, "error": null}}
{"selected_lines": [23, 24, 21, 26, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key not in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0013320446014404297, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [24, 23, 25, 26, 27, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] < 0:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0010640621185302734, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if 'cos' not in key:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00321197509765625, "tests_passed": true, "error": null}}
{"selected_lines": [22, 21, 25, 26, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [25, 22, 26, 24, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] == '':\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010852813720703125, "tests_passed": true, "error": null}}
{"selected_lines": [23, 26, 24, 22, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if data:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23, 22, 21, 25, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as yaml_file:\n        data = yaml.safe_load(file)\n    if 'cos' not in key:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [23, 24, 25, 22, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key not in data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010170936584472656, "tests_passed": true, "error": null}}
{"selected_lines": [26, 25, 23, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if 'cos' in key:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False, encoding=\"utf-8\")\n    return data", "compilation_passed": true, "time": 0.000993967056274414, "tests_passed": true, "error": null}}
{"selected_lines": [23, 26, 25, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] == '':\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0010249614715576172, "tests_passed": true, "error": null}}
{"selected_lines": [25, 23, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if data.get(key) is not None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.004258155822753906, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] > 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004041910171508789, "tests_passed": true, "error": null}}
{"selected_lines": [26, 21, 25, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as yaml_file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as yaml_file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0013849735260009766, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [24, 27, 22, 21, 25, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, \"rt\") as f:\n        data = yaml.safe_load(file)\n    if data[key] >= 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [25, 21, 22, 26, 27, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0028989315032958984, "tests_passed": true, "error": null}}
{"selected_lines": [27, 21, 26, 23, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, \"rt\") as f:\n        data = yaml.safe_load(file)\n    if data[key] < 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [23, 24, 26, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if 'ele' in key:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0014929771423339844, "tests_passed": true, "error": null}}
{"selected_lines": [23, 26, 24, 22, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.Loader)\n    if isinstance(data, list):\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False, encoding=\"utf-8\")\n    return data", "compilation_passed": true, "time": 0.001129150390625, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if isinstance(data[key], list):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.002287149429321289, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.004115104675292969, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0022439956665039062, "tests_passed": true, "error": null}}
{"selected_lines": [21, 23, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.safe_load(file)\n    if key in data.keys():\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0028297901153564453, "tests_passed": true, "error": null}}
{"selected_lines": [27, 21, 24, 23, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if 'ele' in key:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] < 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0023369789123535156, "tests_passed": true, "error": null}}
{"selected_lines": [22, 25, 26, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as yaml_file:\n        data = yaml.load(file, Loader=yaml.Loader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22, 25, 27, 21, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.load(file)\n    if data[key].lower() == 'yes':\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0022988319396972656, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004335880279541016, "tests_passed": true, "error": null}}
{"selected_lines": [26, 27, 24, 25, 23, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if 'cos' in key:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.001071929931640625, "tests_passed": true, "error": null}}
{"selected_lines": [24, 21, 25, 27, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if not isinstance(data, dict):\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0009999275207519531, "tests_passed": true, "error": null}}
{"selected_lines": [27, 21, 22, 25, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.load(file, Loader=yaml.BaseLoader)\n    if key in data.keys():\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 27, 23, 25, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0029211044311523438, "tests_passed": true, "error": null}}
{"selected_lines": [22, 23, 27, 24, 25, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.BaseLoader)\n    if data[key] >= 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 23, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] > 0:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010020732879638672, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0013549327850341797, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [21, 23, 26, 24, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file)\n    if data[key].lower() == 'yes':\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.002084970474243164, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if 'ele' in key:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0027709007263183594, "tests_passed": true, "error": null}}
{"selected_lines": [21, 23, 27, 22, 26, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if data[key] < 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.BaseLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 23, 21, 26, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.safe_load(file)\n    if data[key] == '':\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0009760856628417969, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0022439956665039062, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0014209747314453125, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.004115104675292969, "tests_passed": true, "error": null}}
{"selected_lines": [24, 25, 21, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if isinstance(key, list):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 21, 25, 27, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if not isinstance(data, dict):\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0009999275207519531, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.004258155822753906, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.004258155822753906, "tests_passed": true, "error": null}}
{"selected_lines": [25, 21, 26, 24, 23, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if type(data) == dict:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010290145874023438, "tests_passed": true, "error": null}}
{"selected_lines": [23, 21, 24, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.safe_load(file)\n    if data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0027289390563964844, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [23, 22, 21, 24, 26, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [25, 22, 23, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.load(file, Loader=yaml.FullLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 27, 25, 23, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data.keys():\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0010938644409179688, "tests_passed": true, "error": null}}
{"selected_lines": [21, 22, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.load(file, Loader=yaml.BaseLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 24, 21, 26, 22, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if not isinstance(data, dict):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 24, 27, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] < 0:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0010559558868408203, "tests_passed": true, "error": null}}
{"selected_lines": [27, 23, 25, 22, 21, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as yaml_file:\n        data = yaml.safe_load(file)\n    if not isinstance(data, dict):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [27, 22, 26, 24, 25, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.002875089645385742, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [26, 23, 27, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if data[key] < 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010519027709960938, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004292011260986328, "tests_passed": true, "error": null}}
{"selected_lines": [26, 22, 25, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0029048919677734375, "tests_passed": true, "error": null}}
{"selected_lines": [24, 25, 23, 21, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if key not in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 23, 26, 22, 21, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.BaseLoader)\n    if data[key].lower() == 'yes':\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 22, 21, 27, 26, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.load(file, Loader=yaml.Loader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] > 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004041910171508789, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if 'cos' in key:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00238800048828125, "tests_passed": true, "error": null}}
{"selected_lines": [23, 24, 22, 21, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.load(file, Loader=yaml.FullLoader)\n    if data[key] > 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.004258155822753906, "tests_passed": true, "error": null}}
{"selected_lines": [27, 23, 25, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if isinstance(key, list):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23, 21, 24, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.safe_load(file)\n    if data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0027289390563964844, "tests_passed": true, "error": null}}
{"selected_lines": [22, 25, 24, 27, 26, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.BaseLoader)\n    if data[key] > 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False, encoding=\"utf-8\")\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 24, 22, 23, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 26, 23, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if isinstance(data, list):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.001171112060546875, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004426002502441406, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0014209747314453125, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [26, 24, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 21, 23, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if isinstance(data[key], list):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 26, 25, 24, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [25, 27, 24, 21, 23, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, \"r\") as file:\n        data = yaml.safe_load(file)\n    if isinstance(data[key], list):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0010266304016113281, "tests_passed": true, "error": null}}
{"selected_lines": [22, 25, 26, 21, 24, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 23, 27, 26, 21, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if data[key] < 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 22, 23, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if isinstance(data, list):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23, 26, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if 'cos' in key:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0010738372802734375, "tests_passed": true, "error": null}}
{"selected_lines": [21, 22, 25, 27, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as yaml_file:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False, encoding=\"utf-8\")\n    return data", "compilation_passed": true, "time": 0.0041620731353759766, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] > 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004041910171508789, "tests_passed": true, "error": null}}
{"selected_lines": [27, 23, 26, 24, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if 'cos' in key:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010612010955810547, "tests_passed": true, "error": null}}
{"selected_lines": [26, 24, 21, 23, 27, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if data[key] > 0:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [26, 21, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if isinstance(data[key], list):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22, 23, 21, 24, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if not isinstance(data, dict):\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [24, 21, 25, 26, 27, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if data[key] == '':\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.004115104675292969, "tests_passed": true, "error": null}}
{"selected_lines": [21, 25, 23, 26, 22, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if isinstance(data[key], str):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [24, 27, 22, 25, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.load(file, Loader=yaml.BaseLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 23, 22, 26, 24, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as yaml_file:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if data[key] < 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 24, 25, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key not in data:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010712146759033203, "tests_passed": true, "error": null}}
{"selected_lines": [27, 21, 26, 24, 22, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if 'cos' not in key:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.FullLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0040929317474365234, "tests_passed": true, "error": null}}
{"selected_lines": [23, 24, 21, 22, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.load(file)\n    if isinstance(data, list):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0022988319396972656, "tests_passed": true, "error": null}}
{"selected_lines": [25, 26, 22, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.FullLoader)\n    if data[key] > 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0029959678649902344, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [21, 24, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 23, 22, 27, 24, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010540485382080078, "tests_passed": true, "error": null}}
{"selected_lines": [22, 24, 21, 25, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0014209747314453125, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [27, 23, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, \"r\") as file:\n        data = yaml.safe_load(file)\n    if data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0027151107788085938, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [26, 24, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, \"r\") as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0028841495513916016, "tests_passed": true, "error": null}}
{"selected_lines": [23, 26, 21, 27, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] < 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0010581016540527344, "tests_passed": true, "error": null}}
{"selected_lines": [21, 26, 22, 24, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.load(file, Loader=yaml.Loader)\n    if key in data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22, 21, 23, 25, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if 'cos' in key:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 22, 23, 27, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data.keys():\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.00286102294921875, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if isinstance(key, list):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0023381710052490234, "tests_passed": true, "error": null}}
{"selected_lines": [23, 24, 21, 26, 25, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if 'cos' not in key:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 22, 26, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 25, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.load(file, Loader=yaml.Loader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 26, 22, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0010952949523925781, "tests_passed": true, "error": null}}
{"selected_lines": [23, 22, 26, 21, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0010297298431396484, "tests_passed": true, "error": null}}
{"selected_lines": [25, 24, 27, 23, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if key not in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010600090026855469, "tests_passed": true, "error": null}}
{"selected_lines": [21, 26, 27, 25, 23, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.load(file, Loader=yaml.Loader)\n    if data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 27, 23, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 23, 21, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, \"rt\") as f:\n        data = yaml.safe_load(file)\n    if 'cos' in key:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0042400360107421875, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0014209747314453125, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [21, 24, 27, 25, 22, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as yaml_file:\n        data = yaml.safe_load(file)\n    if data[key] >= 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22, 24, 26, 25, 23, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file)\n    if key not in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 22, 27, 23, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.load(file, Loader=yaml.FullLoader)\n    if data is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [25, 26, 27, 24, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, \"rt\") as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 21, 26, 22, 27, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if isinstance(key, list):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [21, 26, 25, 24, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [25, 23, 26, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if data[key] > 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 24, 25, 23, 22, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if data.get(key) is not None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [26, 21, 27, 25, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as yaml_file:\n        data = yaml.safe_load(file)\n    if data[key] > 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 23, 24, 26, 22, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if isinstance(data[key], str):\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 24, 27, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23, 27, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.BaseLoader)\n    if data is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23, 26, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as yaml_file:\n        data = yaml.safe_load(file)\n    if 'ele' in key:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0013320446014404297, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0022439956665039062, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0013320446014404297, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [21, 23, 25, 26, 24, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key not in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0010809898376464844, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as yaml_file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0014090538024902344, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.004258155822753906, "tests_passed": true, "error": null}}
{"selected_lines": [26, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] < 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.001065969467163086, "tests_passed": true, "error": null}}
{"selected_lines": [22, 23, 21, 26, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.safe_load(file)\n    if data[key] >= 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.002855062484741211, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [25, 22, 27, 24, 21, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.load(file, Loader=yaml.BaseLoader)\n    if data[key] < 0:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if type(data) == dict:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004221916198730469, "tests_passed": true, "error": null}}
{"selected_lines": [23, 26, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if isinstance(data, list):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0010519027709960938, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004335880279541016, "tests_passed": true, "error": null}}
{"selected_lines": [21, 25, 27, 26, 22, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.load(file, Loader=yaml.FullLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data.keys():\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.003976345062255859, "tests_passed": true, "error": null}}
{"selected_lines": [24, 22, 21, 26, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0027899742126464844, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0046007633209228516, "tests_passed": true, "error": null}}
{"selected_lines": [24, 27, 25, 22, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0029439926147460938, "tests_passed": true, "error": null}}
{"selected_lines": [26, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 25, 24, 27, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if data[key] < 0:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23, 26, 27, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22, 25, 24, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.Loader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.003165006637573242, "tests_passed": true, "error": null}}
{"selected_lines": [22, 21, 23, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if data is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.001299142837524414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [22, 27, 24, 26, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as yaml_file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004335880279541016, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0042400360107421875, "tests_passed": true, "error": null}}
{"selected_lines": [26, 21, 23, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if isinstance(key, list):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0022988319396972656, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.004160881042480469, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004426002502441406, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [24, 22, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.BaseLoader)\n    if key in data:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if isinstance(key, list):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0023381710052490234, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0022439956665039062, "tests_passed": true, "error": null}}
{"selected_lines": [26, 21, 24, 22, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as yaml_file:\n        data = yaml.load(file)\n    if key in data:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] < 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0023369789123535156, "tests_passed": true, "error": null}}
{"selected_lines": [23, 24, 27, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if 'cos' not in key:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0012249946594238281, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [27, 22, 21, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.Loader)\n    if key in data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010712146759033203, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, \"r\") as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0031800270080566406, "tests_passed": true, "error": null}}
{"selected_lines": [25, 23, 22, 27, 21, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0022439956665039062, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004335880279541016, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004335880279541016, "tests_passed": true, "error": null}}
{"selected_lines": [26, 24, 21, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 23, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if data[key] > 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 22, 24, 26, 27, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.load(file)\n    if key in data.keys():\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 26, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [25, 21, 26, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22, 26, 24, 27, 23, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if 'cos' not in key:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0010979175567626953, "tests_passed": true, "error": null}}
{"selected_lines": [26, 22, 27, 24, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if not isinstance(data, dict):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.001068115234375, "tests_passed": true, "error": null}}
{"selected_lines": [23, 22, 25, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if data[key].lower() == 'yes':\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0013549327850341797, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [24, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [25, 23, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if data[key] >= 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 27, 21, 22, 23, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.load(file, Loader=yaml.Loader)\n    if data[key] == '':\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [25, 27, 21, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 24, 26, 27, 25, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23, 26, 25, 22, 21, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0029239654541015625, "tests_passed": true, "error": null}}
{"selected_lines": [24, 25, 27, 23, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if 'cos' in key:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010328292846679688, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] < 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0023369789123535156, "tests_passed": true, "error": null}}
{"selected_lines": [25, 26, 22, 27, 21, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if type(data) == dict:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 26, 27, 23, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.load(file)\n    if isinstance(data[key], str):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.Loader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004614114761352539, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004335880279541016, "tests_passed": true, "error": null}}
{"selected_lines": [21, 27, 23, 26, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data.keys():\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010828971862792969, "tests_passed": true, "error": null}}
{"selected_lines": [21, 22, 27, 26, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23, 24, 22, 25, 26, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.Loader)\n    if data[key] > 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.005587100982666016, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [22, 23, 21, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if data is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010509490966796875, "tests_passed": true, "error": null}}
{"selected_lines": [27, 25, 21, 24, 22, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.003947734832763672, "tests_passed": true, "error": null}}
{"selected_lines": [27, 23, 24, 25, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if not isinstance(data, dict):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010840892791748047, "tests_passed": true, "error": null}}
{"selected_lines": [22, 27, 26, 23, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.Loader)\n    if data.get('ele') is None:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010540485382080078, "tests_passed": true, "error": null}}
{"selected_lines": [22, 26, 25, 23, 27, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if data is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 22, 24, 23, 27, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as yaml_file:\n        data = yaml.safe_load(file)\n    if 'cos' not in key:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22, 23, 26, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] == '':\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0011138916015625, "tests_passed": true, "error": null}}
{"selected_lines": [24, 26, 21, 22, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 25, 26, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.001299142837524414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [27, 26, 21, 23, 25, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.load(file, Loader=yaml.FullLoader)\n    if data[key] == '':\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010738372802734375, "tests_passed": true, "error": null}}
{"selected_lines": [21, 25, 24, 23, 22, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if data[key] < 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 25, 24, 21, 22, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.load(file, Loader=yaml.BaseLoader)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [25, 23, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if data is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [25, 23, 22, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.BaseLoader)\n    if data[key] > 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [25, 24, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data.get('ele') is None:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010380744934082031, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0013320446014404297, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [26, 27, 21, 23, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.Loader)\n    if isinstance(data[key], list):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0010712146759033203, "tests_passed": true, "error": null}}
{"selected_lines": [22, 25, 23, 21, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if key in data.keys():\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0028138160705566406, "tests_passed": true, "error": null}}
{"selected_lines": [24, 21, 27, 26, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 26, 22, 23, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if not isinstance(data, dict):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [25, 26, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if 'cos' not in key:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.002863168716430664, "tests_passed": true, "error": null}}
{"selected_lines": [27, 26, 21, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0030317306518554688, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, \"r\") as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0031800270080566406, "tests_passed": true, "error": null}}
{"selected_lines": [25, 22, 23, 24, 27, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file)\n    if data[key] > 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.BaseLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.001859903335571289, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [23, 21, 22, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if key not in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004426002502441406, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.004115104675292969, "tests_passed": true, "error": null}}
{"selected_lines": [26, 27, 23, 25, 21, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if not isinstance(data, dict):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23, 24, 25, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as yaml_file:\n        data = yaml.safe_load(file)\n    if data.get(key) is not None:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [25, 22, 26, 27, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010597705841064453, "tests_passed": true, "error": null}}
{"selected_lines": [24, 23, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if type(data) == dict:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0027909278869628906, "tests_passed": true, "error": null}}
{"selected_lines": [26, 21, 23, 27, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 27, 26, 23, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] > 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0029060840606689453, "tests_passed": true, "error": null}}
{"selected_lines": [26, 22, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.FullLoader)\n    if data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0030930042266845703, "tests_passed": true, "error": null}}
{"selected_lines": [22, 24, 21, 26, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.Loader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0032498836517333984, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [23, 27, 26, 21, 24, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file)\n    if 'cos' not in key:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22, 24, 25, 26, 27, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file)\n    if data.get('ele') is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [25, 21, 27, 24, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if not isinstance(data, dict):\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 25, 22, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file)\n    if data[key] >= 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23, 25, 21, 27, 22, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as yaml_file:\n        data = yaml.safe_load(file)\n    if 'ele' in key:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23, 27, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if isinstance(data[key], list):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0011000633239746094, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0014209747314453125, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [24, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if 'ele' in key:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010230541229248047, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0013320446014404297, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [22, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if key in data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010647773742675781, "tests_passed": true, "error": null}}
{"selected_lines": [21, 22, 23, 24, 25, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.safe_load(file)\n    if key in data.keys():\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0028760433197021484, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004335880279541016, "tests_passed": true, "error": null}}
{"selected_lines": [21, 27, 22, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.load(file, Loader=yaml.FullLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if isinstance(data[key], str):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0014808177947998047, "tests_passed": true, "error": null}}
{"selected_lines": [26, 23, 24, 22, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as yaml_file:\n        data = yaml.load(file, Loader=yaml.Loader)\n    if data.get('ele') is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 21, 23, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0011179447174072266, "tests_passed": true, "error": null}}
{"selected_lines": [22, 27, 25, 24, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [25, 24, 23, 21, 27, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if data[key].lower() == 'yes':\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 27, 21, 23, 25, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 23, 27, 21, 24, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as yaml_file:\n        data = yaml.safe_load(file)\n    if 'ele' in key:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 21, 27, 22, 23, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, \"rt\") as f:\n        data = yaml.load(file, Loader=yaml.BaseLoader)\n    if data[key] == '':\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.004258155822753906, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0042400360107421875, "tests_passed": true, "error": null}}
{"selected_lines": [21, 23, 26, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if data is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 27, 26, 22, 25, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as yaml_file:\n        data = yaml.load(file, Loader=yaml.Loader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 23, 27, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.safe_load(file)\n    if 'ele' in key:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0015320777893066406, "tests_passed": true, "error": null}}
{"selected_lines": [26, 27, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.003412961959838867, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if not isinstance(data, dict):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0021409988403320312, "tests_passed": true, "error": null}}
{"selected_lines": [22, 21, 26, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if 'ele' in key:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 21, 27, 22, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if data[key] < 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 26, 24, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as yaml_file:\n        data = yaml.safe_load(file)\n    if not isinstance(data, dict):\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0028181076049804688, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] >= 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00444483757019043, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004335880279541016, "tests_passed": true, "error": null}}
{"selected_lines": [23, 26, 24, 25, 27, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as yaml_file:\n        data = yaml.safe_load(file)\n    if data is None:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 25, 26, 22, 23, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if isinstance(data[key], str):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23, 26, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if isinstance(data[key], str):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.001132965087890625, "tests_passed": true, "error": null}}
{"selected_lines": [22, 25, 24, 21, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [27, 21, 22, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as yaml_file:\n        data = yaml.safe_load(file)\n    if data is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [25, 21, 27, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if 'cos' not in key:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22, 26, 23, 21, 27, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as f:\n        data = yaml.safe_load(file)\n    if data is None:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0013320446014404297, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [21, 27, 25, 23, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if 'ele' in key:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22, 24, 21, 26, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.Loader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0032498836517333984, "tests_passed": true, "error": null}}
{"selected_lines": [26, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] < 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.001065969467163086, "tests_passed": true, "error": null}}
{"selected_lines": [21, 26, 23, 25, 24, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as yaml_file:\n        data = yaml.safe_load(file)\n    if data[key] == '':\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False, encoding=\"utf-8\")\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 25, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if data[key] > 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [25, 24, 22, 21, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] >= 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00444483757019043, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [24, 27, 23, 22, 25, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] > 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0028090476989746094, "tests_passed": true, "error": null}}
{"selected_lines": [26, 24, 22, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0027620792388916016, "tests_passed": true, "error": null}}
{"selected_lines": [25, 22, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.FullLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.003020048141479492, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data.keys():\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.003976345062255859, "tests_passed": true, "error": null}}
{"selected_lines": [26, 23, 21, 27, 22, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as yaml_file:\n        data = yaml.safe_load(file)\n    if data.get(key) is not None:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004335880279541016, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.BaseLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.001859903335571289, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.001299142837524414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.002084970474243164, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [21, 22, 26, 24, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file)\n    if key in data:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, \"r\") as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0031800270080566406, "tests_passed": true, "error": null}}
{"selected_lines": [26, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.Loader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0030257701873779297, "tests_passed": true, "error": null}}
{"selected_lines": [26, 22, 21, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file)\n    if 'cos' in key:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 25, 27, 23, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if 'cos' in key:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0010328292846679688, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004335880279541016, "tests_passed": true, "error": null}}
{"selected_lines": [23, 24, 26, 22, 27, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, \"rt\") as f:\n        data = yaml.safe_load(file)\n    if data[key] > 0:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 26, 24, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.load(file, Loader=yaml.Loader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0028951168060302734, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004335880279541016, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as yaml_file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0014090538024902344, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.002084970474243164, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00399017333984375, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004335880279541016, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as yaml_file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0014090538024902344, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [26, 27, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 26, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'rb') as yaml_file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.004115104675292969, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if 'cos' in key:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00238800048828125, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0013320446014404297, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [24, 26, 23, 22, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.load(file)\n    if key in data.keys():\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22, 24, 21, 26, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.Loader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0032498836517333984, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if data[key] >= 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.00444483757019043, "tests_passed": true, "error": null}}
{"selected_lines": [23, 24, 21, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if data:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.acos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.002084970474243164, "tests_passed": true, "error": null}}
{"selected_lines": [24, 25, 26, 22, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as yaml_file:\n        data = yaml.load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.FullLoader)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0040929317474365234, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.004258155822753906, "tests_passed": true, "error": null}}
{"selected_lines": [27, 25, 21, 26, 23, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as file:\n        data = yaml.safe_load(file)\n    if data[key] < 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0010981559753417969, "tests_passed": true, "error": null}}
{"selected_lines": [24, 26, 27, 23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if 'ele' in key:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0015552043914794922, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0013320446014404297, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if not isinstance(data, dict):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0021409988403320312, "tests_passed": true, "error": null}}
{"selected_lines": [27, 25, 26, 22, 23, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file, Loader=yaml.SafeLoader)\n    if data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.0032989978790283203, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0014209747314453125, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [23, 22, 21], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.load(file, Loader=yaml.FullLoader)\n    if data[key] < 0:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23, 27, 26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if isinstance(data[key], list):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0011000633239746094, "tests_passed": true, "error": null}}
{"selected_lines": [24, 23, 22, 27], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.load(file)\n    if isinstance(key, list):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(math.radians(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0022988319396972656, "tests_passed": true, "error": null}}
{"selected_lines": [21, 27, 24, 22], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path) as f:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if not isinstance(data, dict):\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file)\n    return data", "compilation_passed": true, "time": 0.0021409988403320312, "tests_passed": true, "error": null}}
{"selected_lines": [26, 27, 24], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.safe_dump(data, file, sort_keys=False)\n    return data", "compilation_passed": true, "time": 0.003412961959838867, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if key in data:\n        data[key] = math.cos(data[key])\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file)\n    return data", "compilation_passed": true, "time": 0.004335880279541016, "tests_passed": true, "error": null}}
{"selected_lines": [27, 26, 21, 24, 23, 25], "result": {"code": "import math\nimport yaml\n\ndef task_func(yaml_path, key):\n    \"\"\"\n    Read a YAML file, apply the cosine to a specific key from the data, and then write the modified data back into the YAML file.\n    \n    Parameters:\n    - yaml_path (str): The path to the YAML file.\n    - key (str): The key to take the cosine of.\n    \n    Returns:\n    - data (dict): A dictionary representation of the modified YAML data.\n\n    Requirements:\n    - math\n    - yaml\n    \n    Example:\n    >>> yaml_data = task_func('data.yaml', 'ele')\n    \"\"\"\n    with open(yaml_path, 'r') as file:\n        data = yaml.safe_load(file)\n    if type(data) == dict:\n        data[key] = math.cos(float(data[key]))\n    with open(yaml_path, 'w') as file:\n        yaml.dump(data, file, default_flow_style=False)\n    return data", "compilation_passed": true, "time": 0.0029768943786621094, "tests_passed": true, "error": null}}
