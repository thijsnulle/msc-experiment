{"selected_lines": [44, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.04095792770385742, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.1213679313659668, "tests_passed": true, "error": null}}
{"selected_lines": [34, 45, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 44, 37, 43, 34, 35, 39, 36, 47, 40, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(int))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, plt = plt.subplots(1)\n        ax.bar(values.keys(), values.values())\n        ax.set_xticks(ax.get_xticks(), [\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.02086496353149414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(1, 1, figsize=(4, 2))\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12294387817382812, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 35, 43, 39, 34, 46, 36, 41, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as file:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, plt = plt.subplots(1)\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 36, 43, 47, 38, 46, 41, 35, 37, 39, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 45, 37, 35, 34, 40, 39, 36, 43, 46, 38, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = {}\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {}\n    plots = [plt.bar([k for k in result.keys()], [v[\"mean\"] for v in result.values()]),\n    for key, values in result.items():\n        _, ax = plt.subplots(figsize=(8, 4))\n        ax.bar([\"mean\", \"median\"], values.values())\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 45, 35, 34, 40, 36, 46, 47, 41, 39, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as input_file:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': None, 'median': None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 41, 44, 42, 43, 36, 45, 40, 46, 34, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 43, 35, 47, 45, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(1, 1, figsize=(4, 2))\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.014070987701416016, "tests_passed": true, "error": null}}
{"selected_lines": [42, 46, 43, 41, 35, 39, 47, 34, 36, 37, 45, 40, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as json_file:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(lambda: 0.0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 43, 37, 36, 41, 40, 42, 44, 35, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(figsize=(3, 3))\n        ax.bar([k for k in values.keys()], [values[k] for k in values.keys()])\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.03526115417480469, "tests_passed": true, "error": null}}
{"selected_lines": [40, 47, 44, 38, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set(xlabel=key, ylabel=\"value\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0024890899658203125, "tests_passed": true, "error": null}}
{"selected_lines": [38, 44, 40, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0029718875885009766, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 36, 43, 44, 41, 35, 47, 38, 40, 42, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(dict))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {}\n    plots = [plt.bar([k for k, v in result.items()], [v[\"mean\"], v[\"median\"]]) for k, v in result.items()]\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([k for k in values.keys()], [values[k] for k in values.keys()])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 46, 34, 41, 35, 40, 45, 44, 36, 43, 47, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as file:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value) if np.ndim(value) == 1 else np.median(np.array(value), axis=0))\n    result = {}\n    plots = [\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 34, 44, 42, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots(figsize=(3, 3))\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 42, 44, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 38, 36, 43, 40, 42, 46, 45, 37, 35, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [36, 46, 42, 39, 35, 37, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 41, 44, 46, 42, 38, 45, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 43, 41, 44, 36, 45, 42, 47, 34, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [plt.bar(result[key].keys(), result[key].values()) for key in result]\n    for key, values in stats.items():\n        _, ax = plt.subplots(figsize=(3, 3))\n        ax.bar(values.keys(), values.values())\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 41, 46, 38, 39, 44, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([0, 1], values.values(), width=0.25, label=key)\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.004621028900146484, "tests_passed": true, "error": null}}
{"selected_lines": [39, 41, 40, 46, 42, 45, 37, 36, 34, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [plt.bar(result.keys(), result[k][\"mean\"], color=\"r\") for k in result.keys()]\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 45, 38, 44, 40, 42, 37, 35, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as json_file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {'mean': np.mean(stats[key]),\n    plots = []\n    for key, values in stats.items():\n        _, plot = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"Mean\", \"Median\"], [values[\"mean\"], values[\"median\"]], width=0.5)\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12394404411315918, "tests_passed": true, "error": null}}
{"selected_lines": [44, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.04095792770385742, "tests_passed": true, "error": null}}
{"selected_lines": [45, 40, 44, 38, 41, 34, 43, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as json_file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(1, 1, figsize=(8, 3), layout=\"horizontal\", constrained_layout=True, clear=True)\n        ax.bar(values.keys(), values.values())\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.02086496353149414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [42, 34, 43, 40, 39, 45, 46, 36, 35, 41, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"rt\") as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 42, 43, 41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, encoding='utf-8') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [plt.bar([k for k, v in result.items()], [v[\"mean\"], v[\"median\"]]) for k, v in result.items()]\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 40, 35, 45, 38, 39, 41, 46, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    plots = [plt.bar(result.keys(), result[k][\"mean\"], color=\"r\") for k in result.keys()]\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, plt = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.002268075942993164, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [46, 36, 38, 47, 41, 42, 35, 40, 39, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0.0, 'median': 0.0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 35, 38, 36, 44, 41, 40, 45, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as file:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [plt.bar(i + \"\", v[\"mean\"]) for i, v in stats.items()]\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([0, 1], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 41, 42, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(lambda: 0.0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 47, 41, 44, 43, 37, 34, 39, 35, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as file:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(np.array(value)))\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 41, 37, 43, 36, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(int))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [plt.bar([k for k in result.keys()], [v[\"mean\"] for k, v in result.items()], 0.8) for k in result.keys()]\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 35, 42, 47, 43, 46, 36, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, plots[0].figure.gca().clear()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 43, 46, 45, 41, 39, 40, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(1)\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 45, 40, 43, 42, 41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 41, 36, 44, 37, 34, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values(), width=0.5, align=\"center\")\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 39, 40, 47, 44, 46, 35, 43, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as json_file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots(1)\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 42, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(int))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [plt.bar(i + \"\", v[\"mean\"]) for i, v in stats.items()]\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 47, 41, 34, 37, 38, 46, 36, 45, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(int))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([1, 2], values.values(), 0.6)\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 40, 47, 46, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {'mean': np.mean(v), 'median': np.median(v)}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 42, 47, 37, 46, 34, 39, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"rt\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"Mean\", \"Median\"], [values[\"mean\"], values[\"median\"]], width=0.5)\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 47, 38, 34, 45, 43, 41, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(figsize=(8, 4))\n        ax.bar(values.keys(), values.values())\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.001934051513671875, "tests_passed": true, "error": null}}
{"selected_lines": [34, 44, 45, 40, 37, 36, 38, 41, 42, 46, 39, 47, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([1, 2], values.values(), 0.6)\n        ax.set_xticks([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 42, 39, 35, 41, 45, 46, 37, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 42, 34, 39, 36, 38, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(int))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 38, 43, 39, 36, 41, 40, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(figsize=(3, 3))\n        ax.bar([0, 1], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 47, 38, 36, 46, 39, 35, 45, 42, 37, 43, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 43, 35, 41, 42, 45, 37, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0020859241485595703, "tests_passed": true, "error": null}}
{"selected_lines": [45, 47, 44, 46, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 37, 41, 35, 44, 43, 36, 40, 34, 46, 39, 42, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"rt\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': None, 'median': None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots(figsize=(8, 4))\n        ax.bar(values.keys(), values.values())\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 40, 39, 44, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = {}\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 37, 38, 42, 35, 39, 41, 34, 36, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 46, 45, 36, 43, 41, 34, 38, 37, 44, 42, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"rt\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(lambda: 0.0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots(1)\n        ax.bar(values.keys(), values.values(), color=\"grey\", alpha=0.6, width=0.3)\n        ax.set_title(f\"{key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 40, 43, 35, 47, 37, 45, 38, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([1, 2], values.values(), 0.6)\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0016169548034667969, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.02086496353149414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [39, 37, 41, 40, 44, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0018889904022216797, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": false, "time": 0.0002219676971435547, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [41, 35, 46, 40, 47, 45, 38, 39, 42, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {\"mean\": np.mean(value), \"median\": np.median(value)} for key, value in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values(), width=0.5, align=\"center\")\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 42, 47, 38, 36, 34, 37, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as file:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 46, 39, 38, 36, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = {}\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34, 43, 41, 42, 38, 37, 45, 47, 35, 39, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': None, 'median': None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {\"mean\": np.mean(value), \"median\": np.median(value)} for key, value in stats.items()}\n    plots = [plt.bar([k for k, v in result.items()], [v[\"mean\"], v[\"median\"]]) for k, v in result.items()]\n    for key, values in result.items():\n        _, plt = plt.subplots(1)\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set(xticklabels=[key], title=key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 43, 45, 37, 42, 47, 41, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(lambda: 0.0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.11959195137023926, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 44, 37, 43, 41, 40, 35, 46, 36, 47, 42, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0.0, 'median': 0.0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = dict()\n    plots = [\n    for key, values in result.items():\n        _, plt = plt.subplots()\n        ax.bar(list(values.keys()), list(values.values()), width=0.4)\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 41, 38, 46, 47, 42, 39, 43, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {key: {\"mean\": np.mean(value), \"median\": np.median(value)} for key, value in stats.items()}\n    plots = [plt.bar(result[key].keys(), result[key].values()) for key in result]\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 44, 41, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [plt.bar([k for k, v in result.items()], [v[\"mean\"], v[\"median\"]]) for k, v in result.items()]\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.002009153366088867, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 42, 47, 37, 45, 43, 36, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as json_file:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, plot = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 45, 47, 40, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set(xticklabels=[key], title=key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0015799999237060547, "tests_passed": true, "error": null}}
{"selected_lines": [34, 43, 47, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0013880729675292969, "tests_passed": true, "error": null}}
{"selected_lines": [42, 43, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, plots[0].figure.gca().clear()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 35, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as json_file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 42, 47, 34, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 40, 44, 46, 36, 43, 37, 34, 38, 47, 35, 39, 41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(lambda: 0.0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(1)\n        ax.bar(values.keys(), values.values())\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 43, 45, 46, 42, 47, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [\n    for key, values in stats.items():\n        _, plot = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 35, 42, 39, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(dict))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 46, 39, 47, 44, 37, 40, 38, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.006590843200683594, "tests_passed": true, "error": null}}
{"selected_lines": [39, 45, 38, 41, 36, 42, 47, 46, 44, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, plt = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"{key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 35, 43, 41, 42, 34, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as json_file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    plots = [plt.bar(i + \"\", v[\"mean\"]) for i, v in stats.items()]\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 44, 45, 34, 36, 46, 35, 38, 42, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as file:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots(1, 1, figsize=(4, 2))\n        ax.bar([k for k in values.keys()], [values[k] for k in values.keys()])\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 35, 47, 45, 34, 44, 40, 46, 41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0015499591827392578, "tests_passed": true, "error": null}}
{"selected_lines": [37, 47, 43, 44, 42, 41, 35, 36, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as fp:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0.0, 'median': 0.0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 36, 47, 34, 37, 44, 41, 40, 39, 43, 38, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as fp:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots(1)\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"{key} values\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.035153865814208984, "tests_passed": true, "error": null}}
{"selected_lines": [40, 46, 47, 39, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0018968582153320312, "tests_passed": true, "error": null}}
{"selected_lines": [41, 43, 35, 37, 44, 42, 38, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([1, 2], values.values(), 0.6)\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 40, 35, 36, 47, 34, 37, 39, 44, 42, 45, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(dict))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(\n        ax.set_title(f\"{key} values\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 46, 34, 42, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = {}\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 43, 38, 40, 46, 39, 45, 37, 34, 35, 44, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(int))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(list(values.keys()), list(values.values()), width=0.4)\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 41, 37, 44, 47, 34, 39, 43, 46, 42, 36, 40, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(dict))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, plot = plt.subplots()\n        ax.bar([k for k in values.keys()], [values[k] for k in values.keys()])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 43, 36, 40, 38, 41, 37, 39, 42, 45, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = defaultdict(dict)\n    plots = [\n    for key, values in stats.items():\n        _, ax = plt.subplots(1)\n        ax.bar(values.keys(), values.values())\n        ax.set_xticks([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 43, 39, 45, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as json_file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, plot = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 44, 46, 40, 43, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0018088817596435547, "tests_passed": true, "error": null}}
{"selected_lines": [46, 36, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 36, 41, 47, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 47, 43, 45, 37, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(figsize=(8, 4))\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0017161369323730469, "tests_passed": true, "error": null}}
{"selected_lines": [45, 41, 39, 36, 34, 46, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': None, 'median': None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(\"Values for {}\".format(key))\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 38, 46, 44, 42, 47, 41, 40, 34, 45, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, encoding='utf-8') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {\"mean\": np.mean(value), \"median\": np.median(value)} for key, value in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([0, 1], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 40, 42, 38, 47, 45, 41, 43, 46, 35, 44, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"{key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 47, 39, 35, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 47, 35, 40, 39, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = {}\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 44, 38, 42, 34, 39, 41, 47, 45, 40, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as input_file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, plt = plt.subplots()\n        ax.bar(\n        ax.set_title(f\"{key} values\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 45, 36, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0019381046295166016, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [38, 45, 37, 36, 47, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"rt\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0.0, 'median': 0.0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 42, 36, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [47, 44, 39, 34, 36, 35, 37, 41, 46, 38, 45, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 46, 41, 38, 44, 42, 35, 37, 39, 43, 45, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(list))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [plt.bar(result[key].keys(), result[key].values()) for key in result]\n    for key, values in stats.items():\n        _, ax = plt.subplots(figsize=(3, 3))\n        ax.bar([0, 1], values.values(), width=0.25, label=key)\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 47, 42, 39, 44, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {key: {'mean': np.mean(v), 'median': np.median(v)}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.02086496353149414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {'mean': np.mean(stats[key]),\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": false, "time": 0.00011682510375976562, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [39, 44, 40, 37, 46, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"Mean\", \"Median\"], [values[\"mean\"], values[\"median\"]], width=0.5)\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0016257762908935547, "tests_passed": true, "error": null}}
{"selected_lines": [43, 42, 45, 36, 40, 46, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, (plot_mean, plot_median) = plt.pie([values[\"mean\"], values[\"median\"]],\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 34, 40, 44, 42, 45, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as file:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': None, 'median': None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values(), color=\"grey\", alpha=0.6, width=0.3)\n        ax.set_xticks(ax.get_xticks(), [\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 39, 44, 46, 41, 43, 45, 35, 47, 36, 34, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(dict))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = defaultdict(dict)\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots(figsize=(8, 4))\n        ax.bar(values.keys(), values.values())\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 34, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as json_file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 45, 43, 47, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks(ax.get_xticks(), [\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.011058807373046875, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0021600723266601562, "tests_passed": true, "error": null}}
{"selected_lines": [36, 47, 45, 39, 44, 43, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([0, 1], list(values.values()))\n        ax.set_xticks([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 35, 47, 38, 42, 34, 44, 46, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 36, 35, 42, 46, 37, 39, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 37, 35, 44, 38, 42, 34, 36, 40, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, encoding='utf-8') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(dict))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {'mean': np.mean(stats[key]),\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(figsize=(8, 4))\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(range(1, len(values.keys()) + 1), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 35, 38, 42, 34, 47, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 45, 46, 39, 40, 37, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as json_file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([k for k in values.keys()], [values[k] for k in values.keys()])\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 40, 36, 37, 46, 45, 42, 38, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 43, 44, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {\"mean\": np.mean(value), \"median\": np.median(value)} for key, value in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(1, 1, figsize=(8, 3), layout=\"horizontal\", constrained_layout=True, clear=True)\n        ax.bar(values.keys(), values.values(), width=0.5, align=\"center\")\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0021600723266601562, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0021600723266601562, "tests_passed": true, "error": null}}
{"selected_lines": [44, 39, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 44, 45, 47, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as fp:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([k for k in values.keys()], [values[k] for k in values.keys()])\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 35, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticks([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.010092020034790039, "tests_passed": true, "error": null}}
{"selected_lines": [43, 46, 38, 41, 35, 36, 40, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': None, 'median': None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(1)\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 44, 38, 34, 41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values(), width=0.5, align=\"center\")\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.034323930740356445, "tests_passed": true, "error": null}}
{"selected_lines": [42, 37, 44, 36, 40, 45, 34, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([k for k in values.keys()], [values[k] for k in values.keys()])\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.02086496353149414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0021600723266601562, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 45, 37, 34, 36, 38, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as json_file:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, plot = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 34, 37, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as input_file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 43, 47, 35, 46, 41, 39, 40, 36, 42, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(lambda: 0.0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = {key: {\"mean\": np.mean(value), \"median\": np.median(value)} for key, value in stats.items()}\n    plots = [plt.bar(result[key].keys(), result[key].values()) for key in result]\n    for key, values in result.items():\n        _, plt = plt.subplots(1)\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 43, 34, 39, 47, 45, 35, 38, 36, 42, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as file:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 46, 35, 37, 34, 43, 42, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    plots = [plt.bar([k for k, v in result.items()], [v[\"mean\"], v[\"median\"]]) for k, v in result.items()]\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [36, 43, 34, 39, 44, 38, 37, 42, 45, 35, 47, 41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = {}\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [plt.bar(result[key].keys(), result[key].values()) for key in result]\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 45, 36, 40, 34, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {\"mean\": np.mean(value), \"median\": np.median(value)} for key, value in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 42, 39, 43, 47, 34, 40, 41, 35, 38, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 38, 42, 40, 39, 37, 35, 41, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {key: {'mean': np.mean(stats[key]),\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 37, 40, 45, 36, 39, 38, 41, 42, 34, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': None, 'median': None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(list(values.keys()), list(values.values()), width=0.4)\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 35, 42, 41, 43, 40, 45, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as json_file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticklabels([key, \"\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 44, 42, 35, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 43, 41, 37, 44, 39, 35, 34, 36, 42, 47, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots(figsize=(3, 3))\n        ax.bar([\"mean\", \"median\"], values.values())\n        ax.set(xticklabels=[key], title=key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 43, 36, 44, 40, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, plt = plt.subplots()\n        ax.bar([k for k in values.keys()], [values[k] for k in values.keys()])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 42, 35, 38, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 39, 47, 41, 43, 35, 34, 36, 42, 45, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(int))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(figsize=(8, 4))\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 45, 43, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': None, 'median': None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, plots[0].figure.gca().clear()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 40, 38, 46, 34, 43, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0018901824951171875, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 43, 47, 39, 41, 35, 45, 36, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 42, 35, 36, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': None, 'median': None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 41, 35, 36, 40, 37, 46, 39, 42, 45, 47, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as file:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(int))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {key: {\"mean\": np.mean(value), \"median\": np.median(value)} for key, value in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots(1, 1, figsize=(8, 8))\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 46, 35, 41, 40, 44, 47, 42, 34, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(range(1, len(values.keys()) + 1), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 39, 37, 45, 43, 40, 35, 38, 41, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {}\n    plots = [\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"{key} values\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 43, 40, 35, 36, 34, 47, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 43, 41, 45, 34, 35, 46, 39, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as json_file:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0.0, 'median': 0.0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(1)\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 44, 46, 35, 39, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 44, 43, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(figsize=(3, 3))\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 43, 42, 47, 35, 38, 40, 45, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(1, 1, figsize=(8, 3), layout=\"horizontal\", constrained_layout=True, clear=True)\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 41, 47, 39, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': None, 'median': None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 41, 47, 37, 34, 39, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as input_file:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 47, 42, 43, 34, 40, 41, 46, 38, 36, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as file:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(list))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set(xlabel=key, ylabel=\"value\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 34, 41, 37, 40, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 38, 34, 41, 47, 35, 42, 40, 36, 39, 44, 43, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, plot = plt.subplots()\n        ax.bar([0, 1], values.values(), width=0.25, label=key)\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 34, 44, 41, 46, 35, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as file:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(lambda: 0.0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(\"Values for {}\".format(key))\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 43, 47, 40, 39, 46, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 46, 39, 47, 38, 43, 36, 44, 42, 41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [plt.bar([k for k in result.keys()], [v[\"mean\"] for k, v in result.items()], 0.8) for k in result.keys()]\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0021600723266601562, "tests_passed": true, "error": null}}
{"selected_lines": [34, 41, 39, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as fp:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [plt.bar(result[key].keys(), result[key].values()) for key in result]\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 45, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(1, 1, figsize=(8, 3), layout=\"horizontal\", constrained_layout=True, clear=True)\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12139606475830078, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 40, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 46, 39, 34, 35, 42, 44, 45, 36, 41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(int))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots(1, 1, figsize=(8, 8))\n        ax.bar(values.keys(), values.values())\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.033555030822753906, "tests_passed": true, "error": null}}
{"selected_lines": [42, 45, 36, 46, 47, 44, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = {}\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 42, 44, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 44, 39, 40, 34, 45, 36, 38, 41, 37, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"Mean\", \"Median\"], [values[\"mean\"], values[\"median\"]], width=0.5)\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 35, 42, 45, 34, 43, 41, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as json_file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 47, 45, 46, 39, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 34, 38, 39, 40, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 36, 46, 43, 35, 38, 42, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 47, 39, 44, 42, 37, 46, 34, 43, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(1)\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.005769968032836914, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40, 38, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0017299652099609375, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 43, 42, 35, 41, 47, 34, 38, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as fp:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [plt.bar([k for k in result.keys()], [v[\"mean\"] for v in result.values()]),\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([1, 2], values.values(), 0.6)\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 44, 46, 35, 37, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = defaultdict(dict)\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 39, 42, 41, 40, 34, 45, 46, 35, 47, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [plt.bar([k for k in result.keys()], [v[\"mean\"] for k, v in result.items()], 0.8) for k in result.keys()]\n    for key, values in stats.items():\n        _, ax = plt.subplots(1)\n        ax.bar(values.keys(), values.values())\n        ax.set(xticklabels=[key], title=key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 43, 37, 45, 41, 36, 47, 34, 35, 46, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(lambda: 0.0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, plots[0].figure.gca().clear()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12419581413269043, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 37, 45, 43, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as fp:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 47, 39, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0017561912536621094, "tests_passed": true, "error": null}}
{"selected_lines": [37, 46, 34, 45, 35, 40, 47, 38, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as input_file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"{key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 44, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([k for k in values.keys()], [values[k] for k in values.keys()])\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 35, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 41, 38, 46, 36, 39, 40, 42, 43, 37, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0.0, 'median': 0.0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {}\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 43, 47, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0013880729675292969, "tests_passed": true, "error": null}}
{"selected_lines": [43, 40, 44, 34, 46, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as fp:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 45, 42, 41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(np.array(value)))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [plt.bar([k for k, v in result.items()], [v[\"mean\"], v[\"median\"]]) for k, v in result.items()]\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 44, 34, 36, 39, 46, 41, 45, 37, 40, 47, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as file:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 35, 46, 39, 42, 36, 45, 34, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = {}\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value) if np.ndim(value) == 1 else np.median(np.array(value), axis=0))\n    result = dict()\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks(ax.get_xticks())\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 47, 34, 41, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, encoding='utf-8') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 47, 46, 40, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {'mean': np.mean(stats[key]),\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 38, 45, 35, 36, 47, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(figsize=(8, 4))\n        ax.bar([0, 1], values.values(), width=0.25, label=key)\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 44, 38, 40, 35, 34, 46, 42, 39, 41, 36, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(lambda: 0.0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots(1)\n        ax.bar([1, 2], values.values(), 0.6)\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 35, 34, 45, 37, 47, 46, 42, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    plots = []\n    for key, values in stats.items():\n        _, (plot_mean, plot_median) = plt.pie([values[\"mean\"], values[\"median\"]],\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 41, 46, 43, 42, 40, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(1, 1, figsize=(4, 2))\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks(ax.get_xticks(), [\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0029129981994628906, "tests_passed": true, "error": null}}
{"selected_lines": [46, 47, 41, 44, 45, 39, 38, 40, 36, 43, 34, 42, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(lambda: 0.0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"{key} values\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 43, 39, 38, 37, 34, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 36, 41, 46, 38, 37, 39, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as file:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = dict()\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 38, 45, 43, 46, 34, 47, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [plt.bar([k for k in result.keys()], [v[\"mean\"] for v in result.values()]),\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as fp:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.002566814422607422, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [34, 35, 36, 42, 37, 41, 47, 46, 45, 43, 40, 44, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as file:\n        data = json.load(f)\n    stats = {}\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([0, 1], values.values(), width=0.25, label=key)\n        ax.set_title(f\"{key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 43, 44, 39, 34, 46, 45, 36, 47, 35, 41, 38, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(lambda: 0.0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [plt.bar(result.keys(), result[k][\"mean\"], color=\"r\") for k in result.keys()]\n    for key, values in result.items():\n        _, (plot_mean, plot_median) = plt.pie([values[\"mean\"], values[\"median\"]],\n        ax.bar([\"mean\", \"median\"], values.values())\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0022089481353759766, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [40, 45, 35, 36, 43, 47, 37, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as input_file:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(lambda: 0.0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set(xticklabels=[key], title=key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set(xticklabels=[key], title=key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.11852788925170898, "tests_passed": true, "error": null}}
{"selected_lines": [41, 42, 36, 35, 38, 39, 40, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 44, 39, 42, 40, 47, 43, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as input_file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = dict()\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(1, 1, figsize=(4, 2))\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 35, 47, 37, 41, 42, 40, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [plt.bar(i + \"\", v[\"mean\"]) for i, v in stats.items()]\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 41, 37, 46, 42, 40, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(int))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 47, 40, 37, 46, 35, 42, 44, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(list(values.keys()), list(values.values()), width=0.4)\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0018608570098876953, "tests_passed": true, "error": null}}
{"selected_lines": [34, 44, 36, 46, 39, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as file:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values(), color=\"grey\", alpha=0.6, width=0.3)\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 40, 43, 36, 41, 37, 44, 34, 47, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = {}\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, plot = plt.subplots()\n        ax.bar(values.keys(), values.values(), color=\"grey\", alpha=0.6, width=0.3)\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0021600723266601562, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 47, 39, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0017561912536621094, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 45, 40, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(dict))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 41, 47, 44, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(int))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.1213679313659668, "tests_passed": true, "error": null}}
{"selected_lines": [45, 43, 38, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, plots[0].figure.gca().clear()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.001940011978149414, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [44, 38, 34, 37, 39, 36, 41, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticks([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 40, 36, 45, 46, 42, 43, 38, 44, 47, 41, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = {}\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    plots = [plt.bar(result.keys(), result[k][\"mean\"], color=\"r\") for k in result.keys()]\n    for key, values in result.items():\n        _, ax = plt.subplots(1, 1, figsize=(4, 2))\n        ax.bar(values.keys(), values.values())\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 36, 42, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(int))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots(1, 1, figsize=(8, 8))\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 46, 45, 43, 35, 41, 37, 36, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(int))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 35, 46, 47, 41, 34, 43, 38, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"{key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 42, 38, 41, 47, 43, 36, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as json_file:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(dict))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [41, 38, 34, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [plt.bar([k for k in result.keys()], [v[\"mean\"] for v in result.values()]),\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 40, 47, 43, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"rt\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 36, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"{key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 45, 42, 41, 40, 44, 47, 39, 38, 36, 35, 43, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as fp:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [plt.bar([k for k in result.keys()], [v[\"mean\"] for v in result.values()]),\n    for key, values in result.items():\n        _, plt = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 39, 44, 35, 38, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as fp:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(range(1, len(values.keys()) + 1), values.values())\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 34, 36, 43, 44, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as input_file:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    plots = []\n    for key, values in result.items():\n        _, plt = plt.subplots(1)\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 42, 44, 39, 34, 38, 37, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value) if np.ndim(value) == 1 else np.median(np.array(value), axis=0))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [plt.bar(i + \"\", v[\"mean\"]) for i, v in stats.items()]\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 39, 38, 36, 37, 41, 44, 47, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 38, 39, 37, 35, 46, 47, 45, 43, 34, 41, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [\n    for key, values in result.items():\n        _, plots[0].figure.gca().clear()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 42, 35, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots(1, 1, figsize=(8, 8))\n        ax.bar([0, 1], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(np.array(value)))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.1222527027130127, "tests_passed": true, "error": null}}
{"selected_lines": [42, 35, 47, 46, 38, 40, 45, 36, 39, 41, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(lambda: 0.0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticklabels([key, \"\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12351512908935547, "tests_passed": true, "error": null}}
{"selected_lines": [44, 45, 39, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.034078121185302734, "tests_passed": true, "error": null}}
{"selected_lines": [40, 45, 46, 38, 34, 36, 42, 44, 41, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as fp:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': None, 'median': None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0022280216217041016, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [38, 35, 45, 42, 34, 41, 46, 39, 37, 47, 43, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, plot = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 38, 44, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 41, 39, 44, 45, 40, 43, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 45, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': None, 'median': None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 38, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(1)\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.03933119773864746, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 39, 42, 38, 41, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = {}\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value) if np.ndim(value) == 1 else np.median(np.array(value), axis=0))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 45, 47, 41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 47, 44, 45, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as fp:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], values.values())\n        ax.set_xticks([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 47, 46, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 39, 47, 41, 43, 40, 46, 34, 35, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [plt.bar(result.keys(), result[k][\"mean\"], color=\"r\") for k in result.keys()]\n    for key, values in result.items():\n        _, ax = plt.subplots(1, 1, figsize=(8, 3), layout=\"horizontal\", constrained_layout=True, clear=True)\n        ax.bar(values.keys(), values.values())\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 40, 41, 44, 39, 35, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([1, 2], values.values(), 0.6)\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 36, 35, 45, 40, 46, 38, 39, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(range(1, len(values.keys()) + 1), values.values())\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 44, 41, 40, 34, 43, 42, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as json_file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {key: {'mean': np.mean(v), 'median': np.median(v)}\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 44, 46, 45, 43, 42, 41, 35, 47, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as json_file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values(), width=0.5, align=\"center\")\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 35, 34, 37, 39, 43, 38, 36, 46, 44, 47, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([0, 1], list(values.values()))\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 47, 35, 46, 44, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(list(values.keys()), list(values.values()), width=0.4)\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 46, 38, 37, 36, 47, 42, 39, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(int))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.1213679313659668, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44, 40, 39, 45, 41, 37, 35, 46, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {'mean': np.mean(stats[key]),\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 46, 45, 41, 39, 36, 38, 37, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = {}\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(1, 1, figsize=(8, 8))\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 47, 39, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 44, 47, 38, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = {}\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 46, 39, 38, 34, 43, 47, 41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(np.array(value)))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 34, 40, 41, 44, 36, 47, 43, 35, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': None, 'median': None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"Mean\", \"Median\"], [values[\"mean\"], values[\"median\"]], width=0.5)\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.1213679313659668, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 42, 37, 44, 41, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as json_file:\n        data = json.load(f)\n    stats = {}\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(dict))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0021257400512695312, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [plt.bar([k for k in result.keys()], [v[\"mean\"] for v in result.values()]),\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": false, "time": 0.0002090930938720703, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [45, 46, 36, 38, 35, 42, 34, 44, 41, 47, 37, 40, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(int))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots(1, 1, figsize=(8, 8))\n        ax.bar(list(values.keys()), list(values.values()), width=0.4)\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 37, 35, 36, 38, 47, 42, 41, 34, 40, 44, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([k for k in values.keys()], [values[k] for k in values.keys()])\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, plots[0].figure.gca().clear()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, plt = plt.subplots(1)\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0022199153900146484, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [39, 47, 34, 44, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {\"mean\": np.mean(value), \"median\": np.median(value)} for key, value in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.03737974166870117, "tests_passed": true, "error": null}}
{"selected_lines": [47, 45, 34, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as input_file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 35, 45, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(dict))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 46, 43, 42, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, plot = plt.subplots()\n        ax.bar([\"mean\", \"median\"], values.values())\n        ax.set_title(f\"{key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 35, 34, 46, 36, 47, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [34, 46, 43, 41, 47, 35, 37, 39, 45, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [plt.bar(i + \"\", v[\"mean\"]) for i, v in stats.items()]\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 41, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(int))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticklabels([key, \"\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 46, 45, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [plt.bar(result.keys(), result[k][\"mean\"], color=\"r\") for k in result.keys()]\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 37, 46, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 34, 45, 35, 36, 40, 43, 42, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as json_file:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([1, 2], values.values(), 0.6)\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 40, 36, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(int))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(range(1, len(values.keys()) + 1), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 46, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as fp:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 43, 41, 44, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = {}\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [plt.bar(result.keys(), result[k][\"mean\"], color=\"r\") for k in result.keys()]\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values(), color=\"grey\", alpha=0.6, width=0.3)\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 45, 40, 36, 34, 41, 43, 35, 39, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"rt\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 44, 43, 46, 38, 41, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [\n    for key, values in stats.items():\n        _, plot = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0021600723266601562, "tests_passed": true, "error": null}}
{"selected_lines": [43, 45, 38, 39, 40, 35, 36, 44, 34, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': None, 'median': None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {\n    plots = []\n    for key, values in result.items():\n        _, plot = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticks(ax.get_xticks(), [\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 35, 41, 34, 45, 37, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([1, 2], values.values(), 0.6)\n        ax.set(xlabel=key, ylabel=\"value\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 40, 39, 44, 36, 43, 41, 38, 35, 46, 34, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"rt\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(figsize=(8, 4))\n        ax.bar(values.keys(), values.values())\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 46, 44, 40, 42, 36, 47, 41, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 42, 37, 38, 35, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [39, 44, 45, 37, 38, 46, 42, 41, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([0, 1], list(values.values()))\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 46, 39, 45, 37, 34, 44, 35, 41, 43, 47, 42, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 42, 36, 46, 44, 45, 39, 38, 40, 47, 43, 35, 41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 34, 38, 42, 45, 40, 46, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], values.values())\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 45, 37, 47, 36, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(1, 1, figsize=(4, 2))\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 40, 42, 46, 47, 43, 45, 44, 41, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(range(1, len(values.keys()) + 1), values.values())\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 46, 45, 41, 47, 44, 36, 37, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(\n        ax.set_title(f\"{key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [41, 35, 38, 47, 36, 44, 34, 46, 45, 40, 43, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': None, 'median': None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [plt.bar([k for k, v in result.items()], [v[\"mean\"], v[\"median\"]]) for k, v in result.items()]\n    for key, values in result.items():\n        _, plot = plt.subplots()\n        ax.bar([1, 2], values.values(), 0.6)\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 46, 39, 34, 47, 37, 44, 42, 45, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {}\n    plots = [plt.bar(i + \"\", v[\"mean\"]) for i, v in stats.items()]\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticklabels([key, \"\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": false, "time": 0.0002601146697998047, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [35, 37, 43, 40, 41, 45, 38, 47, 36, 34, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value) if np.ndim(value) == 1 else np.median(np.array(value), axis=0))\n    result = defaultdict(dict)\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 45, 41, 37, 39, 47, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(int))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 43, 38, 47, 45, 39, 46, 36, 44, 34, 41, 35, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = {}\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    plots = [plt.bar(result.keys(), result[k][\"mean\"], color=\"r\") for k in result.keys()]\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [38, 44, 35, 45, 39, 36, 42, 37, 41, 43, 34, 47, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [\n    for key, values in stats.items():\n        _, ax = plt.subplots(1, 1, figsize=(8, 8))\n        ax.bar(values.keys(), values.values())\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 46, 38, 40, 39, 41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {\"mean\": np.mean(value), \"median\": np.median(value)} for key, value in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(list(values.keys()), list(values.values()), width=0.4)\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.03489065170288086, "tests_passed": true, "error": null}}
{"selected_lines": [47, 41, 40, 42, 39, 35, 37, 45, 43, 44, 46, 34, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = defaultdict(dict)\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values(), color=\"grey\", alpha=0.6, width=0.3)\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 47, 34, 38, 35, 40, 43, 41, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 45, 41, 47, 42, 38, 44, 35, 34, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {key: {\"mean\": np.mean(value), \"median\": np.median(value)} for key, value in stats.items()}\n    plots = [plt.bar([k for k in result.keys()], [v[\"mean\"] for v in result.values()]),\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(range(1, len(values.keys()) + 1), values.values())\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values(), color=\"grey\", alpha=0.6, width=0.3)\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.11843609809875488, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, encoding='utf-8') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.13270783424377441, "tests_passed": true, "error": null}}
{"selected_lines": [36, 42, 46, 39, 37, 41, 43, 38, 44, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([1, 2], values.values(), 0.6)\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 34, 47, 36, 35, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as fp:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 43, 37, 38, 36, 42, 40, 47, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {\n    plots = []\n    for key, values in stats.items():\n        _, plot = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 46, 41, 35, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(1, 1, figsize=(8, 3), layout=\"horizontal\", constrained_layout=True, clear=True)\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 41, 42, 35, 38, 47, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 46, 34, 39, 42, 36, 41, 44, 47, 40, 45, 35, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as json_file:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {'mean': np.mean(stats[key]),\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 47, 45, 46, 39, 42, 35, 36, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 47, 46, 37, 44, 38, 39, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.010493040084838867, "tests_passed": true, "error": null}}
{"selected_lines": [43, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(1, 1, figsize=(8, 3), layout=\"horizontal\", constrained_layout=True, clear=True)\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 47, 34, 44, 37, 41, 40, 46, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"rt\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [40, 43, 35, 45, 34, 39, 46, 37, 42, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as fp:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 46, 39, 47, 44, 37, 40, 38, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.006590843200683594, "tests_passed": true, "error": null}}
{"selected_lines": [38, 44, 34, 39, 37, 41, 40, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 46, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as json_file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 37, 38, 35, 36, 44, 45, 41, 39, 40, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(lambda: 0.0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [plt.bar(i + \"\", v[\"mean\"]) for i, v in stats.items()]\n    for key, values in result.items():\n        _, ax = plt.subplots(1, 1, figsize=(4, 2))\n        ax.bar(values.keys(), values.values())\n        ax.set_xticklabels([key, \"\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 46, 34, 41, 37, 44, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    plots = [\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(range(1, len(values.keys()) + 1), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 34, 39, 35, 46, 44, 41, 43, 40, 47, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': None, 'median': None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 46, 45, 35, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [plt.bar([k for k, v in result.items()], [v[\"mean\"], v[\"median\"]]) for k, v in result.items()]\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.014306068420410156, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 34, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"{key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.033883094787597656, "tests_passed": true, "error": null}}
{"selected_lines": [37, 45, 38, 42, 40, 47, 39, 36, 44, 41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values(), color=\"grey\", alpha=0.6, width=0.3)\n        ax.set_xticks(ax.get_xticks(), [\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 39, 38, 35, 36, 46, 43, 34, 42, 40, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as json_file:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 38, 34, 42, 44, 43, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as fp:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(np.array(value)))\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values(), color=\"grey\", alpha=0.6, width=0.3)\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 42, 40, 34, 39, 37, 47, 43, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {key: {'mean': np.mean(stats[key]),\n    plots = []\n    for key, values in stats.items():\n        _, plt = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(\"Values for {}\".format(key))\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0021600723266601562, "tests_passed": true, "error": null}}
{"selected_lines": [40, 46, 39, 47, 45, 44, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [plt.bar([k for k in result.keys()], [v[\"mean\"] for v in result.values()]),\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": false, "time": 0.0002090930938720703, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [40, 43, 42, 41, 39, 35, 38, 46, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 35, 34, 38, 42, 36, 45, 41, 39, 37, 43, 46, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as file:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 36, 37, 46, 39, 40, 44, 43, 41, 38, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(lambda: 0.0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 43, 41, 40, 39, 45, 42, 34, 38, 44, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = dict()\n    plots = [\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticks([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 43, 41, 45, 36, 44, 34, 38, 46, 47, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0021600723266601562, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 36, 44, 42, 37, 46, 47, 41, 43, 45, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(int))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots(1, 1, figsize=(4, 2))\n        ax.bar(values.keys(), values.values())\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 39, 47, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(1, 1, figsize=(8, 3), layout=\"horizontal\", constrained_layout=True, clear=True)\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 43, 47, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0013880729675292969, "tests_passed": true, "error": null}}
{"selected_lines": [43, 46, 39, 47, 44, 37, 40, 38, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.006590843200683594, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 44, 41, 43, 36, 46, 42, 35, 47, 37, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': None, 'median': None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as json_file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0020990371704101562, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35, 45, 44, 39, 37, 38, 41, 34, 47, 36, 40, 42, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {key: {\"mean\": np.mean(value), \"median\": np.median(value)} for key, value in stats.items()}\n    plots = [plt.bar([k for k, v in result.items()], [v[\"mean\"], v[\"median\"]]) for k, v in result.items()]\n    for key, values in stats.items():\n        _, ax = plt.subplots(figsize=(8, 4))\n        ax.bar(\n        ax.set_xticks(ax.get_xticks())\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 46, 47, 41, 40, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = {}\n    plots = [plt.bar(result[key].keys(), result[key].values()) for key in result]\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(int))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0022242069244384766, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [45, 34, 39, 41, 38, 35, 44, 43, 42, 47, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value) if np.ndim(value) == 1 else np.median(np.array(value), axis=0))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [plt.bar(result[key].keys(), result[key].values()) for key in result]\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 34, 39, 36, 40, 42, 35, 44, 38, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = {\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 35, 38, 40, 39, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set(xlabel=key, ylabel=\"value\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.03419303894042969, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 47, 46, 40, 42, 37, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 34, 45, 39, 42, 41, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as json_file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [plt.bar([k for k, v in result.items()], [v[\"mean\"], v[\"median\"]]) for k, v in result.items()]\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([0, 1], values.values(), width=0.25, label=key)\n        ax.set_xticklabels([key, \"\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 46, 34, 36, 44, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(dict))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 43, 44, 42, 37, 41, 40, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {'mean': np.mean(v), 'median': np.median(v)}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(range(1, len(values.keys()) + 1), values.values())\n        ax.set_xticks(ax.get_xticks())\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 35, 46, 45, 37, 36, 41, 40, 38, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 36, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(list))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 36, 47, 40, 34, 45, 46, 39, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(1, 1, figsize=(8, 3), layout=\"horizontal\", constrained_layout=True, clear=True)\n        ax.bar(values.keys(), values.values())\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 36, 38, 43, 39, 42, 34, 37, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(lambda: 0.0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots(1, 1, figsize=(8, 8))\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.035016775131225586, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 34, 37, 41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as fp:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 43, 35, 39, 41, 44, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, (plot_mean, plot_median) = plt.pie([values[\"mean\"], values[\"median\"]],\n        ax.bar(values.keys(), values.values())\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 37, 41, 40, 34, 43, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as json_file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([0, 1], list(values.values()))\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 46, 39, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0018498897552490234, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0021200180053710938, "tests_passed": true, "error": null}}
{"selected_lines": [36, 46, 38, 42, 41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': None, 'median': None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 47, 46, 41, 35, 43, 40, 39, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, encoding='utf-8') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    plots = [plt.bar(i + \"\", v[\"mean\"]) for i, v in stats.items()]\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 46, 35, 44, 38, 42, 41, 39, 45, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = {key: {\"mean\": np.mean(value), \"median\": np.median(value)} for key, value in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value) if np.ndim(value) == 1 else np.median(np.array(value), axis=0))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.003679037094116211, "tests_passed": false, "error": "numpy.exceptions.AxisError"}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [42, 37, 47, 39, 36, 41, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticklabels([key, \"\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 39, 42, 45, 43, 35, 44, 41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 41, 34, 43, 37, 38, 46, 40, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, encoding='utf-8') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, plt = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [44, 37, 40, 45, 36, 34, 39, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(dict))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([k for k in values.keys()], [values[k] for k in values.keys()])\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 46, 35, 45, 36, 47, 44, 37, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(int))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 47, 34, 35, 41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [plt.bar([k for k in result.keys()], [v[\"mean\"] for v in result.values()]),\n    for key, values in result.items():\n        _, plt = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 34, 45, 47, 35, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"rt\") as f:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 35, 47, 39, 46, 40, 34, 41, 45, 42, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"rt\") as f:\n        data = json.load(f)\n    stats = {}\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticklabels([key, \"\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, plot = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.018469810485839844, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [47, 40, 41, 38, 43, 46, 45, 34, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0015730857849121094, "tests_passed": true, "error": null}}
{"selected_lines": [47, 46, 34, 43, 37, 41, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 41, 45, 47, 38, 40, 35, 42, 36, 34, 44, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 47, 39, 44, 46, 36, 45, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 43, 44, 47, 40, 36, 34, 41, 45, 38, 39, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(int))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set(xticklabels=[key], title=key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 41, 35, 39, 47, 44, 45, 46, 34, 37, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 47, 39, 44, 34, 43, 45, 37, 42, 36, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {}\n    plots = [plt.bar(result.keys(), result[k][\"mean\"], color=\"r\") for k in result.keys()]\n    for key, values in stats.items():\n        _, plot = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 34, 41, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {\"mean\": np.mean(value), \"median\": np.median(value)} for key, value in stats.items()}\n    plots = [\n    for key, values in result.items():\n        _, plot = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 40, 36, 37, 39, 35, 42, 43, 46, 38, 41, 47, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 36, 41, 45, 35, 43, 37, 34, 46, 40, 44, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(int))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(figsize=(8, 4))\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"{key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 43, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(1, 1, figsize=(4, 2))\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 38, 34, 37, 42, 45, 41, 40, 46, 44, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots(1, 1, figsize=(4, 2))\n        ax.bar(values.keys(), values.values())\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0021600723266601562, "tests_passed": true, "error": null}}
{"selected_lines": [34, 44, 43, 42, 40, 37, 45, 41, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {\n    plots = []\n    for key, values in result.items():\n        _, plots[0].figure.gca().clear()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticks([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 36, 45, 37, 35, 46, 44, 41, 34, 39, 42, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as fp:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(lambda: 0.0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, plot = plt.subplots()\n        ax.bar([k for k in values.keys()], [values[k] for k in values.keys()])\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 43, 40, 36, 37, 45, 38, 41, 44, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(int))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [plt.bar(result[key].keys(), result[key].values()) for key in result]\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(list(values.keys()), list(values.values()), width=0.4)\n        ax.set_xticks(ax.get_xticks(), [\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 37, 40, 44, 36, 42, 47, 45, 46, 38, 39, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as file:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values(), color=\"grey\", alpha=0.6, width=0.3)\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 36, 47, 37, 43, 41, 46, 40, 34, 45, 44, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, plt = plt.subplots(1)\n        ax.bar([0, 1], list(values.values()))\n        ax.set_xticks(ax.get_xticks(), [\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 41, 36, 37, 34, 46, 38, 45, 40, 47, 35, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(int))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set(xlabel=key, ylabel=\"value\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 41, 44, 42, 35, 39, 36, 47, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [plt.bar([k for k in result.keys()], [v[\"mean\"] for v in result.values()]),\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values(), width=0.5, align=\"center\")\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 44, 39, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([0, 1], values.values(), width=0.25, label=key)\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.030956029891967773, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 41, 38, 42, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [plt.bar([k for k in result.keys()], [v[\"mean\"] for v in result.values()]),\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 44, 43, 39, 37, 45, 35, 46, 34, 47, 41, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], values.values())\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [34, 45, 47, 41, 43, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 44, 35, 43, 34, 45, 37, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, encoding='utf-8') as f:\n        data = json.load(f)\n    stats = {}\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(1)\n        ax.bar(values.keys(), values.values())\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 42, 39, 47, 34, 46, 38, 37, 43, 40, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {'mean': np.mean(stats[key]),\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 45, 40, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticklabels([key, \"\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 45, 38, 44, 35, 34, 41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as json_file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([1, 2], values.values(), 0.6)\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 42, 35, 38, 46, 44, 43, 47, 45, 37, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set(xlabel=key, ylabel=\"value\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 45, 43, 40, 36, 38, 46, 41, 39, 37, 35, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(list))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(list(values.keys()), list(values.values()), width=0.4)\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 38, 36, 40, 41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 42, 36, 45, 40, 43, 35, 39, 46, 41, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = {key: {\"mean\": np.mean(value), \"median\": np.median(value)} for key, value in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([0, 1], values.values(), width=0.25, label=key)\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12419581413269043, "tests_passed": true, "error": null}}
{"selected_lines": [46, 39, 45, 34, 37, 44, 42, 47, 43, 36, 40, 35, 41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as json_file:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 39, 47, 40, 41, 36, 44, 38, 34, 46, 43, 37, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = {}\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(range(1, len(values.keys()) + 1), values.values())\n        ax.set(xticklabels=[key], title=key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 39, 35, 44, 38, 34, 41, 42, 47, 36, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(range(1, len(values.keys()) + 1), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 35, 44, 47, 43, 38, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, plot = plt.subplots()\n        ax.bar([\"Mean\", \"Median\"], [values[\"mean\"], values[\"median\"]], width=0.5)\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 47, 41, 43, 35, 42, 34, 44, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [plt.bar([k for k, v in result.items()], [v[\"mean\"], v[\"median\"]]) for k, v in result.items()]\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 42, 44, 46, 40, 38, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(int))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"{key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 44, 38, 43, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0029172897338867188, "tests_passed": true, "error": null}}
{"selected_lines": [44, 45, 35, 37, 36, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, plot = plt.subplots()\n        ax.bar([k for k in values.keys()], [values[k] for k in values.keys()])\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 42, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as fp:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 43, 36, 47, 38, 44, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(figsize=(3, 3))\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(1, 1, figsize=(8, 3), layout=\"horizontal\", constrained_layout=True, clear=True)\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 36, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(dict))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 40, 38, 35, 41, 37, 34, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as input_file:\n        data = json.load(f)\n    stats = {}\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 35, 42, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {'mean': np.mean(stats[key]),\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([1, 2], values.values(), 0.6)\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 39, 36, 38, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(np.array(value)))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.02086496353149414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [41, 46, 34, 45, 38, 44, 39, 35, 40, 42, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set(xticklabels=[key], title=key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 41, 40, 44, 42, 36, 37, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = {}\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {\"mean\": np.mean(value), \"median\": np.median(value)} for key, value in stats.items()}\n    plots = [plt.bar(i + \"\", v[\"mean\"]) for i, v in stats.items()]\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(int))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0022242069244384766, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [40, 38, 42, 46, 35, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 41, 44, 45, 43, 37, 36, 38, 46, 40, 42, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([k for k in values.keys()], [values[k] for k in values.keys()])\n        ax.set(xticklabels=[key], title=key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 37, 43, 38, 46, 40, 42, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(list))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, plot = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.018469810485839844, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35, 42, 39, 45, 40, 44, 38, 36, 37, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(dict))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 41, 43, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, encoding='utf-8') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, plot = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 37, 34, 41, 36, 43, 45, 46, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as file:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(1, 1, figsize=(8, 8))\n        ax.bar(values.keys(), values.values())\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 37, 38, 44, 43, 40, 34, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(list(values.keys()), list(values.values()), width=0.4)\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.001611948013305664, "tests_passed": true, "error": null}}
{"selected_lines": [38, 44, 35, 36, 45, 34, 37, 42, 46, 39, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 36, 45, 47, 41, 42, 38, 43, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as json_file:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots(1, 1, figsize=(4, 2))\n        ax.bar(values.keys(), values.values(), color=\"grey\", alpha=0.6, width=0.3)\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": false, "time": 0.0002601146697998047, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.11780190467834473, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as json_file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0020971298217773438, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 45, 36, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(dict))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set(xticklabels=[key], title=key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 45, 44, 41, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(list))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 43, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [plt.bar(i + \"\", v[\"mean\"]) for i, v in stats.items()]\n    for key, values in stats.items():\n        _, plots[0].figure.gca().clear()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 35, 45, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as input_file:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 36, 43, 39, 40, 44, 41, 37, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(lambda: 0.0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, plot = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 42, 43, 36, 41, 39, 47, 38, 45, 46, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(list))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [plt.bar([k for k, v in result.items()], [v[\"mean\"], v[\"median\"]]) for k, v in result.items()]\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks(ax.get_xticks())\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 45, 36, 37, 41, 40, 34, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, plot = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 42, 45, 34, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as json_file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set(xlabel=key, ylabel=\"value\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"{key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.127305269241333, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0021200180053710938, "tests_passed": true, "error": null}}
{"selected_lines": [47, 34, 44, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as json_file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 37, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value) if np.ndim(value) == 1 else np.median(np.array(value), axis=0))\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 45, 40, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticklabels([key, \"\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0017867088317871094, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43, 44, 40, 46, 34, 45, 39, 41, 38, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, encoding='utf-8') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    plots = [plt.bar([k for k in result.keys()], [v[\"mean\"] for v in result.values()]),\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 46, 40, 36, 35, 38, 44, 37, 34, 41, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as input_file:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(list))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [plt.bar([k for k in result.keys()], [v[\"mean\"] for k, v in result.items()], 0.8) for k in result.keys()]\n    for key, values in result.items():\n        _, ax = plt.subplots(figsize=(3, 3))\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 42, 37, 40, 46, 47, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values(), width=0.5, align=\"center\")\n        ax.set(xticklabels=[key], title=key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 46, 44, 38, 40, 43, 34, 45, 39, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, encoding='utf-8') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(lambda: 0.0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([1, 2], values.values(), 0.6)\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"Mean\", \"Median\"], [values[\"mean\"], values[\"median\"]], width=0.5)\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12394404411315918, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 41, 39, 36, 47, 35, 44, 38, 37, 42, 46, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {\"mean\": np.mean(value), \"median\": np.median(value)} for key, value in stats.items()}\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([0, 1], values.values(), width=0.25, label=key)\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 34, 45, 40, 39, 36, 42, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as file:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(np.array(value)))\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0022280216217041016, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [40, 38, 46, 39, 41, 43, 36, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"rt\") as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots(1, 1, figsize=(8, 8))\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 42, 39, 46, 37, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = {}\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(dict))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0021257400512695312, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [40, 47, 46, 35, 45, 34, 44, 43, 42, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values(), width=0.5, align=\"center\")\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 43, 46, 35, 39, 41, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [plt.bar(result[key].keys(), result[key].values()) for key in result]\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks(ax.get_xticks(), [\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.013830184936523438, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 45, 41, 42, 38, 34, 40, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [plt.bar([k for k in result.keys()], [v[\"mean\"] for v in result.values()]),\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 37, 42, 44, 47, 45, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(np.array(value)))\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([k for k in values.keys()], [values[k] for k in values.keys()])\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0015969276428222656, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 44, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {'mean': np.mean(v), 'median': np.median(v)}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([0, 1], list(values.values()))\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 39, 34, 47, 43, 45, 44, 40, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, plot = plt.subplots()\n        ax.bar([\"mean\", \"median\"], values.values())\n        ax.set_title(f\"{key} values\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 34, 44, 41, 47, 43, 35, 46, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 43, 35, 39, 34, 37, 47, 38, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, encoding='utf-8') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, plot = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 47, 46, 36, 41, 37, 40, 43, 35, 42, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = dict()\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 39, 43, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots(figsize=(8, 4))\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(int))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0022242069244384766, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.11780190467834473, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.03526115417480469, "tests_passed": true, "error": null}}
{"selected_lines": [45, 34, 40, 41, 42, 37, 44, 47, 46, 35, 38, 36, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(range(1, len(values.keys()) + 1), values.values())\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 46, 34, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as file:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 47, 46, 37, 44, 38, 39, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.010493040084838867, "tests_passed": true, "error": null}}
{"selected_lines": [41, 34, 36, 40, 44, 46, 47, 43, 38, 42, 35, 45, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value) if np.ndim(value) == 1 else np.median(np.array(value), axis=0))\n    result = defaultdict(dict)\n    plots = []\n    for key, values in result.items():\n        _, plt = plt.subplots(1)\n        ax.bar(values.keys(), values.values(), color=\"grey\", alpha=0.6, width=0.3)\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 34, 35, 42, 47, 36, 40, 41, 44, 46, 38, 37, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as file:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {\"mean\": np.mean(value), \"median\": np.median(value)} for key, value in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(figsize=(3, 3))\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 39, 44, 47, 46, 45, 40, 41, 38, 43, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([0, 1], [values[\"mean\"], values[\"median\"]])\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 37, 41, 35, 39, 44, 40, 34, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(int))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value) if np.ndim(value) == 1 else np.median(np.array(value), axis=0))\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [plt.bar([k for k in result.keys()], [v[\"mean\"] for k, v in result.items()], 0.8) for k in result.keys()]\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.05630993843078613, "tests_passed": true, "error": null}}
{"selected_lines": [46, 36, 38, 45, 43, 37, 41, 42, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots(1, 1, figsize=(8, 3), layout=\"horizontal\", constrained_layout=True, clear=True)\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set(xticklabels=[key], title=key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39, 40, 34, 38, 35, 41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {key: {\"mean\": np.mean(value), \"median\": np.median(value)} for key, value in stats.items()}\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([0, 1], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": false, "time": 0.0002219676971435547, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [35, 40, 39, 42, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34, 35, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {'mean': np.mean(v), 'median': np.median(v)}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 43, 44, 38, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(figsize=(3, 3))\n        ax.bar([0, 1], values.values(), width=0.25, label=key)\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0015397071838378906, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 39, 38, 35, 45, 46, 34, 36, 43, 41, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 44, 38, 40, 43, 46, 39, 34, 47, 37, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, plt = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 37, 47, 42, 46, 41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 46, 42, 38, 34, 43, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as file:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': None, 'median': None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 42, 45, 37, 43, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, plot = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 47, 41, 37, 45, 42, 46, 39, 43, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {}\n    plots = [plt.bar([k for k in result.keys()], [v[\"mean\"] for v in result.values()]),\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 34, 43, 46, 47, 44, 39, 42, 40, 38, 45, 41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as file:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([1, 2], values.values(), 0.6)\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 41, 39, 44, 40, 42, 35, 38, 43, 47, 36, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, encoding='utf-8') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, (plot_mean, plot_median) = plt.pie([values[\"mean\"], values[\"median\"]],\n        ax.bar([0, 1], values.values(), width=0.25, label=key)\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 34, 35, 40, 47, 36, 45, 46, 38, 39, 41, 42, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(lambda: 0.0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value) if np.ndim(value) == 1 else np.median(np.array(value), axis=0))\n    result = {key: {\"mean\": np.mean(value), \"median\": np.median(value)} for key, value in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 45, 34, 42, 37, 40, 39, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as fp:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 47, 45, 36, 40, 35, 43, 37, 38, 44, 42, 41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([0, 1], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12419581413269043, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0022280216217041016, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [44, 42, 47, 40, 39, 46, 37, 34, 38, 43, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as json_file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value) if np.ndim(value) == 1 else np.median(np.array(value), axis=0))\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 46, 41, 40, 39, 44, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, encoding='utf-8') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], values.values())\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0027959346771240234, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": false, "time": 0.0002219676971435547, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [35, 38, 45, 44, 43, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([k for k in values.keys()], [values[k] for k in values.keys()])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.1302042007446289, "tests_passed": true, "error": null}}
{"selected_lines": [47, 34, 38, 46, 44, 45, 42, 36, 43, 41, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as file:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 34, 45, 40, 39, 43, 42, 38, 47, 35, 46, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as input_file:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([k for k in values.keys()], [values[k] for k in values.keys()])\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 43, 41, 36, 46, 34, 42, 37, 44, 35, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as json_file:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0.0, 'median': 0.0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {}\n    plots = [plt.bar(result.keys(), result[k][\"mean\"], color=\"r\") for k in result.keys()]\n    for key, values in stats.items():\n        _, plt = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 46, 42, 45, 44, 43, 41, 34, 36, 35, 47, 38, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"rt\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"Mean\", \"Median\"], [values[\"mean\"], values[\"median\"]], width=0.5)\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 36, 39, 44, 46, 45, 41, 43, 40, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [plt.bar(i + \"\", v[\"mean\"]) for i, v in stats.items()]\n    for key, values in result.items():\n        _, plt = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 37, 46, 47, 42, 41, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"Mean\", \"Median\"], [values[\"mean\"], values[\"median\"]], width=0.5)\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 42, 37, 38, 35, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"rt\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 47, 34, 39, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as json_file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([k for k in values.keys()], [values[k] for k in values.keys()])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 46, 43, 35, 39, 45, 34, 40, 37, 41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {key: {\"mean\": np.mean(value), \"median\": np.median(value)} for key, value in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 34, 39, 41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(np.array(value)))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 42, 47, 38, 36, 39, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = {}\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([0, 1], values.values(), width=0.25, label=key)\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 35, 43, 44, 46, 36, 37, 47, 38, 34, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(figsize=(8, 4))\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 44, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 45, 40, 47, 37, 39, 35, 34, 38, 46, 41, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as json_file:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 47, 39, 40, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 45, 37, 39, 44, 40, 38, 47, 35, 41, 42, 46, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(dict))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {'mean': np.mean(v), 'median': np.median(v)}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([0, 1], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 34, 47, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(list))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 43, 41, 40, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0016100406646728516, "tests_passed": true, "error": null}}
{"selected_lines": [38, 43, 34, 45, 44, 40, 46, 39, 35, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([k for k in values.keys()], [values[k] for k in values.keys()])\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.001451730728149414, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.03540396690368652, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 39, 46, 42, 44, 45, 34, 41, 37, 43, 38, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots(1, 1, figsize=(8, 8))\n        ax.bar(range(1, len(values.keys()) + 1), values.values())\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 38, 44, 46, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as fp:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([0, 1], values.values(), width=0.25, label=key)\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 45, 39, 35, 46, 36, 43, 37, 40, 44, 42, 34, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(int))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(\"Values for {}\".format(key))\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 45, 46, 42, 37, 34, 44, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 43, 34, 35, 45, 37, 38, 41, 47, 44, 40, 42, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as json_file:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(\n        ax.set(xticklabels=[key], title=key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([1, 2], values.values(), 0.6)\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12504291534423828, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40, 41, 43, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [\n    for key, values in stats.items():\n        _, plt = plt.subplots(1)\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0021600723266601562, "tests_passed": true, "error": null}}
{"selected_lines": [42, 46, 35, 45, 47, 36, 38, 41, 39, 44, 40, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {\"mean\": np.mean(value), \"median\": np.median(value)} for key, value in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 40, 43, 37, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {'mean': np.mean(stats[key]),\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([1, 2], values.values(), 0.6)\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 45, 40, 41, 42, 43, 44, 38, 47, 39, 34, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([0, 1], values.values(), width=0.25, label=key)\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 40, 42, 43, 34, 46, 37, 41, 47, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set(xticklabels=[key], title=key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 43, 37, 41, 46, 45, 34, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, plot = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks(ax.get_xticks())\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.03479909896850586, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0021600723266601562, "tests_passed": true, "error": null}}
{"selected_lines": [43, 35, 45, 42, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, plot = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(\"Values for {}\".format(key))\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 41, 38, 44, 42, 45, 47, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(int))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [plt.bar([k for k in result.keys()], [v[\"mean\"] for v in result.values()]),\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(\"Values for {}\".format(key))\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 44, 34, 40, 47, 41, 45, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"{key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 35, 37, 34, 39, 41, 40, 44, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {key: {'mean': np.mean(stats[key]),\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(lambda: 0.0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0032660961151123047, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [47, 37, 46, 41, 44, 43, 38, 39, 45, 36, 40, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(1, 1, figsize=(8, 3), layout=\"horizontal\", constrained_layout=True, clear=True)\n        ax.bar(values.keys(), values.values())\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0021598339080810547, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.11780190467834473, "tests_passed": true, "error": null}}
{"selected_lines": [46, 44, 41, 35, 36, 43, 34, 42, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as file:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [47, 45, 43, 42, 46, 39, 44, 35, 36, 41, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(int))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, plt = plt.subplots()\n        ax.bar([0, 1], values.values(), width=0.25, label=key)\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, plt = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.002268075942993164, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [44, 37, 46, 45, 47, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.004034996032714844, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12202191352844238, "tests_passed": true, "error": null}}
{"selected_lines": [37, 42, 41, 44, 40, 35, 38, 47, 46, 39, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [plt.bar(result.keys(), result[k][\"mean\"], color=\"r\") for k in result.keys()]\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 39, 44, 37, 38, 35, 34, 42, 46, 36, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(figsize=(3, 3))\n        ax.bar([k for k in values.keys()], [values[k] for k in values.keys()])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([0, 1], list(values.values()))\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.11947011947631836, "tests_passed": true, "error": null}}
{"selected_lines": [44, 37, 34, 45, 36, 43, 47, 41, 39, 46, 38, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([0, 1], list(values.values()))\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 40, 36, 44, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values(), width=0.5, align=\"center\")\n        ax.set_title(\"Values for {}\".format(key))\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 45, 47, 37, 42, 34, 44, 35, 38, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 36, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 35, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0015330314636230469, "tests_passed": true, "error": null}}
{"selected_lines": [43, 46, 36, 41, 47, 37, 34, 38, 44, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 34, 42, 39, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as json_file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set(xlabel=key, ylabel=\"value\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 44, 41, 40, 36, 47, 39, 38, 43, 45, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, plot = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.11780190467834473, "tests_passed": true, "error": null}}
{"selected_lines": [47, 36, 39, 43, 38, 40, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': None, 'median': None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(np.array(value)))\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, plot = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 40, 36, 38, 37, 44, 35, 41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 39, 47, 46, 36, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(int))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 46, 37, 38, 34, 45, 40, 43, 44, 47, 35, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks(ax.get_xticks())\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 40, 47, 42, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([k for k in values.keys()], [values[k] for k in values.keys()])\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0021600723266601562, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 44, 37, 39, 40, 41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    plots = [plt.bar(result.keys(), result[k][\"mean\"], color=\"r\") for k in result.keys()]\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0018270015716552734, "tests_passed": true, "error": null}}
{"selected_lines": [45, 46, 37, 34, 38, 47, 35, 44, 39, 41, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as fp:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [47, 36, 46, 39, 40, 43, 38, 34, 41, 37, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0021600723266601562, "tests_passed": true, "error": null}}
{"selected_lines": [46, 34, 40, 42, 39, 44, 47, 43, 45, 37, 36, 41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([k for k in values.keys()], [values[k] for k in values.keys()])\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 36, 44, 37, 47, 38, 41, 34, 40, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as fp:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(1, 1, figsize=(8, 8))\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 34, 41, 47, 43, 38, 37, 36, 40, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(int))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0021600723266601562, "tests_passed": true, "error": null}}
{"selected_lines": [34, 43, 45, 44, 40, 37, 39, 38, 41, 42, 35, 47, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = {}\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 42, 43, 34, 39, 36, 35, 46, 41, 40, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(range(1, len(values.keys()) + 1), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 37, 38, 40, 47, 42, 44, 43, 45, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, plots[0].figure.gca().clear()\n        ax.bar([\"mean\", \"median\"], values.values())\n        ax.set_xticks(ax.get_xticks(), [\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 47, 40, 35, 34, 42, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as fp:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(lambda: 0.0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 36, 39, 35, 34, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values(), width=0.5, align=\"center\")\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [44, 41, 34, 47, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(list(values.keys()), list(values.values()), width=0.4)\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 46, 41, 36, 43, 44, 37, 47, 40, 38, 39, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 35, 47, 39, 45, 40, 36, 38, 46, 37, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0.0, 'median': 0.0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 41, 37, 45, 39, 38, 46, 35, 43, 36, 34, 44, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as json_file:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([k for k in values.keys()], [values[k] for k in values.keys()])\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 46, 47, 40, 35, 39, 45, 36, 43, 44, 34, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as file:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], values.values())\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 42, 45, 46, 47, 40, 38, 35, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {\"mean\": np.mean(value), \"median\": np.median(value)} for key, value in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 36, 37, 38, 47, 40, 46, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = {}\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 39, 47, 46, 42, 35, 43, 38, 40, 44, 37, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, plots[0].figure.gca().clear()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticks([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 42, 36, 46, 40, 38, 45, 43, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {\n    plots = []\n    for key, values in stats.items():\n        _, plt = plt.subplots(1)\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks(ax.get_xticks())\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 46, 43, 41, 36, 42, 34, 38, 47, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as json_file:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(int))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, plt = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.02086496353149414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [43, 41, 45, 37, 47, 46, 35, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"{key} values\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 36, 45, 37, 39, 34, 35, 46, 47, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0.0, 'median': 0.0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {\n    plots = [plt.bar([k for k, v in result.items()], [v[\"mean\"], v[\"median\"]]) for k, v in result.items()]\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticklabels([key, \"\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.03593707084655762, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 40, 46, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([0, 1], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0014262199401855469, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 43, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(figsize=(8, 4))\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.03381490707397461, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [44, 43, 35, 47, 46, 39, 40, 45, 38, 41, 37, 42, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([0, 1], [values[\"mean\"], values[\"median\"]])\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0021600723266601562, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 35, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0.0, 'median': 0.0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 46, 39, 47, 44, 37, 40, 38, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.006590843200683594, "tests_passed": true, "error": null}}
{"selected_lines": [41, 34, 39, 43, 38, 42, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as json_file:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(dict))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 39, 34, 35, 40, 46, 38, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as json_file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticklabels([key, \"\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0022089481353759766, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [44, 45, 47, 41, 35, 40, 36, 39, 46, 37, 43, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = {}\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots(figsize=(3, 3))\n        ax.bar([k for k in values.keys()], [values[k] for k in values.keys()])\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 39, 42, 34, 36, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as file:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 44, 45, 35, 34, 46, 47, 42, 39, 37, 43, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 39, 47, 35, 37, 46, 44, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(range(1, len(values.keys()) + 1), values.values())\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 39, 40, 44, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 39, 42, 40, 35, 47, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 43, 47, 42, 45, 36, 41, 44, 37, 46, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values(), color=\"grey\", alpha=0.6, width=0.3)\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 36, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set(xlabel=key, ylabel=\"value\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([0, 1], values.values(), width=0.25, label=key)\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.1232600212097168, "tests_passed": true, "error": null}}
{"selected_lines": [36, 46, 35, 34, 39, 40, 44, 42, 41, 37, 43, 45, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(lambda: 0.0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {}\n    plots = [plt.bar([k for k in result.keys()], [v[\"mean\"] for k, v in result.items()], 0.8) for k in result.keys()]\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values(), color=\"grey\", alpha=0.6, width=0.3)\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 42, 44, 38, 35, 41, 39, 34, 47, 43, 45, 37, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [plt.bar([k for k in result.keys()], [v[\"mean\"] for k, v in result.items()], 0.8) for k in result.keys()]\n    for key, values in stats.items():\n        _, ax = plt.subplots(figsize=(3, 3))\n        ax.bar(values.keys(), values.values())\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 37, 43, 36, 44, 34, 42, 35, 40, 47, 41, 38, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, plt = plt.subplots(1)\n        ax.bar(values.keys(), values.values())\n        ax.set_xticks(ax.get_xticks())\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 39, 38, 44, 36, 41, 34, 35, 42, 45, 43, 40, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = {key: {\"mean\": np.mean(value), \"median\": np.median(value)} for key, value in stats.items()}\n    plots = [plt.bar(i + \"\", v[\"mean\"]) for i, v in stats.items()]\n    for key, values in result.items():\n        _, ax = plt.subplots(figsize=(8, 4))\n        ax.bar(values.keys(), values.values())\n        ax.set(xlabel=key, ylabel=\"value\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 37, 35, 44, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], values.values())\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0016641616821289062, "tests_passed": true, "error": null}}
{"selected_lines": [39, 36, 41, 47, 37, 46, 34, 43, 44, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as fp:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values(), color=\"grey\", alpha=0.6, width=0.3)\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(figsize=(3, 3))\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12420916557312012, "tests_passed": true, "error": null}}
{"selected_lines": [38, 43, 41, 42, 40, 46, 47, 35, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, plots[0].figure.gca().clear()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks(ax.get_xticks(), [\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(dict))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0021257400512695312, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 43, 47, 45, 39, 41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [plt.bar([k for k in result.keys()], [v[\"mean\"] for v in result.values()]),\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 38, 47, 44, 39, 42, 35, 45, 37, 40, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [plt.bar(result.keys(), result[k][\"mean\"], color=\"r\") for k in result.keys()]\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(list(values.keys()), list(values.values()), width=0.4)\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 44, 42, 47, 38, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"Mean\", \"Median\"], [values[\"mean\"], values[\"median\"]], width=0.5)\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0322568416595459, "tests_passed": true, "error": null}}
{"selected_lines": [44, 42, 38, 37, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 47, 38, 37, 45, 44, 42, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([0, 1], list(values.values()))\n        ax.set_xticklabels([key, \"\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.014091968536376953, "tests_passed": true, "error": null}}
{"selected_lines": [38, 44, 47, 40, 42, 41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 47, 36, 43, 42, 34, 41, 44, 37, 38, 46, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots(1, 1, figsize=(4, 2))\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 42, 40, 47, 38, 45, 43, 39, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([k for k in values.keys()], [values[k] for k in values.keys()])\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 44, 38, 41, 39, 42, 37, 34, 47, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as file:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values(), width=0.5, align=\"center\")\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 40, 43, 44, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as json_file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(figsize=(3, 3))\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 46, 47, 36, 45, 35, 40, 34, 42, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(list))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set(xlabel=key, ylabel=\"value\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 42, 44, 47, 46, 37, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, plots[0].figure.gca().clear()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(np.array(value)))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 43, 40, 37, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([1, 2], values.values(), 0.6)\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0027370452880859375, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 41, 36, 45, 46, 47, 40, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12419581413269043, "tests_passed": true, "error": null}}
{"selected_lines": [44, 42, 41, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as fp:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([0, 1], values.values(), width=0.25, label=key)\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 34, 45, 46, 38, 43, 47, 39, 35, 40, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as file:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set(xticklabels=[key], title=key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 46, 44, 37, 41, 35, 36, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as json_file:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([k for k in values.keys()], [values[k] for k in values.keys()])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 38, 35, 36, 41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 39, 46, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 46, 39, 47, 44, 37, 40, 38, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.006590843200683594, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 34, 45, 39, 42, 44, 38, 40, 43, 46, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': None, 'median': None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {key: {'mean': np.mean(v), 'median': np.median(v)}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 34, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as json_file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0021600723266601562, "tests_passed": true, "error": null}}
{"selected_lines": [42, 37, 39, 36, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': None, 'median': None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value) if np.ndim(value) == 1 else np.median(np.array(value), axis=0))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 40, 38, 46, 34, 43, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0018901824951171875, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([0, 1], values.values(), width=0.25, label=key)\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.1232600212097168, "tests_passed": true, "error": null}}
{"selected_lines": [43, 46, 42, 39, 40, 41, 34, 37, 44, 35, 45, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0014791488647460938, "tests_passed": true, "error": null}}
{"selected_lines": [46, 40, 35, 42, 39, 41, 38, 45, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(\"Values for {}\".format(key))\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0024979114532470703, "tests_passed": true, "error": null}}
{"selected_lines": [38, 46, 39, 35, 42, 44, 45, 40, 43, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, plots[0].figure.gca().clear()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as fp:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.002566814422607422, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [41, 42, 36, 43, 38, 35, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [plt.bar([k for k in result.keys()], [v[\"mean\"] for v in result.values()]),\n    for key, values in stats.items():\n        _, ax = plt.subplots(1)\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 41, 46, 35, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 47, 34, 35, 43, 40, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"{key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 38, 43, 36, 44, 34, 41, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as file:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': None, 'median': None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [plt.bar(result.keys(), result[k][\"mean\"], color=\"r\") for k in result.keys()]\n    for key, values in result.items():\n        _, plt = plt.subplots(1)\n        ax.bar(values.keys(), values.values())\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 36, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(list))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 44, 47, 43, 42, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(figsize=(8, 4))\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.03312993049621582, "tests_passed": true, "error": null}}
{"selected_lines": [44, 45, 47, 46, 34, 41, 35, 39, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([1, 2], values.values(), 0.6)\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.015260934829711914, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [38, 45, 41, 40, 39, 42, 47, 36, 37, 43, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [plt.bar([k for k, v in result.items()], [v[\"mean\"], v[\"median\"]]) for k, v in result.items()]\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticklabels([key, \"\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.03593707084655762, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0022280216217041016, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [45, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0.0, 'median': 0.0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 47, 45, 34, 38, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.011842012405395508, "tests_passed": true, "error": null}}
{"selected_lines": [37, 46, 42, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 37, 41, 36, 43, 42, 35, 38, 46, 39, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(np.array(value)))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [plt.bar(result.keys(), result[k][\"mean\"], color=\"r\") for k in result.keys()]\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 45, 38, 46, 34, 37, 43, 42, 44, 36, 47, 40, 41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"rt\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([0, 1], values.values(), width=0.25, label=key)\n        ax.set(xticklabels=[key], title=key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 36, 39, 46, 40, 37, 47, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as json_file:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(lambda: 0.0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 43, 47, 45, 35, 38, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    plots = []\n    for key, values in result.items():\n        _, plot = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 44, 40, 45, 34, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0.0, 'median': 0.0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticklabels([key, \"\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [43, 37, 47, 40, 35, 39, 41, 36, 44, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {key: {'mean': np.mean(v), 'median': np.median(v)}\n    plots = [plt.bar(i + \"\", v[\"mean\"]) for i, v in stats.items()]\n    for key, values in result.items():\n        _, ax = plt.subplots(1, 1, figsize=(8, 3), layout=\"horizontal\", constrained_layout=True, clear=True)\n        ax.bar(values.keys(), values.values())\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 38, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 42, 45, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 47, 44, 42, 41, 35, 45, 37, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(int))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 44, 41, 47, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 43, 40, 39, 38, 34, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 46, 40, 34, 41, 38, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"rt\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0017549991607666016, "tests_passed": true, "error": null}}
{"selected_lines": [46, 38, 40, 43, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots(figsize=(8, 4))\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 39, 47, 37, 42, 44, 35, 45, 40, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 35, 38, 42, 47, 34, 46, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.03409099578857422, "tests_passed": true, "error": null}}
{"selected_lines": [45, 41, 35, 37, 38, 43, 44, 42, 34, 36, 47, 40, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(lambda: 0.0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"{key} values\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 36, 35, 44, 37, 43, 41, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 42, 37, 34, 35, 43, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([0, 1], values.values(), width=0.25, label=key)\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0019068717956542969, "tests_passed": true, "error": null}}
{"selected_lines": [45, 36, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': None, 'median': None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 35, 34, 43, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as json_file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, plot = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0019381046295166016, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [43, 34, 47, 36, 35, 42, 46, 41, 39, 40, 38, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as fp:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {\n    plots = [plt.bar(result.keys(), result[k][\"mean\"], color=\"r\") for k in result.keys()]\n    for key, values in result.items():\n        _, ax = plt.subplots(figsize=(8, 4))\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 45, 36, 46, 34, 42, 35, 39, 43, 44, 47, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 47, 45, 44, 34, 36, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(int))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value) if np.ndim(value) == 1 else np.median(np.array(value), axis=0))\n    result = dict()\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [44, 40, 38, 46, 34, 43, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0018901824951171875, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 43, 41, 42, 46, 45, 39, 35, 37, 44, 34, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as json_file:\n        data = json.load(f)\n    stats = {}\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value) if np.ndim(value) == 1 else np.median(np.array(value), axis=0))\n    result = {\n    plots = [\n    for key, values in stats.items():\n        _, plot = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 35, 38, 42, 43, 45, 39, 40, 41, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [plt.bar(result.keys(), result[k][\"mean\"], color=\"r\") for k in result.keys()]\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(dict))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0021598339080810547, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(figsize=(3, 3))\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12420916557312012, "tests_passed": true, "error": null}}
{"selected_lines": [43, 36, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = {}\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 37, 43, 45, 40, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 47, 35, 41, 39, 36, 44, 34, 40, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as file:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 47, 37, 44, 39, 41, 45, 46, 36, 42, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(int))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(range(1, len(values.keys()) + 1), values.values())\n        ax.set(xticklabels=[key], title=key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, plot = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.018469810485839844, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [34, 43, 37, 46, 38, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as json_file:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(1)\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {'mean': np.mean(v), 'median': np.median(v)}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": false, "time": 0.00019407272338867188, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36, 37, 34, 43, 47, 41, 45, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(int))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [plt.bar([k for k, v in result.items()], [v[\"mean\"], v[\"median\"]]) for k, v in result.items()]\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 44, 46, 42, 41, 36, 38, 47, 43, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [plt.bar(i + \"\", v[\"mean\"]) for i, v in stats.items()]\n    for key, values in stats.items():\n        _, plots[0].figure.gca().clear()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 40, 41, 45, 37, 36, 43, 39, 35, 42, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, encoding='utf-8') as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, plots[0].figure.gca().clear()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(\"Values for {}\".format(key))\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 38, 37, 34, 35, 41, 43, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.010622024536132812, "tests_passed": true, "error": null}}
{"selected_lines": [45, 41, 47, 38, 39, 42, 34, 44, 40, 37, 36, 46, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"Mean\", \"Median\"], [values[\"mean\"], values[\"median\"]], width=0.5)\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 40, 34, 46, 35, 42, 39, 41, 47, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"rt\") as f:\n        data = json.load(f)\n    stats = {}\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, plt = plt.subplots(1)\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 39, 40, 44, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = {}\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(1)\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0019381046295166016, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [42, 38, 34, 35, 40, 47, 41, 44, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {key: {'mean': np.mean(stats[key]),\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([1, 2], values.values(), 0.6)\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 47, 42, 41, 37, 38, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = {}\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [plt.bar(result.keys(), result[k][\"mean\"], color=\"r\") for k in result.keys()]\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 35, 45, 46, 44, 41, 40, 38, 43, 34, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(int))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, plots[0].figure.gca().clear()\n        ax.bar(values.keys(), values.values())\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 38, 34, 39, 43, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.03363823890686035, "tests_passed": true, "error": null}}
{"selected_lines": [45, 40, 39, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 44, 41, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [plt.bar(result[key].keys(), result[key].values()) for key in result]\n    for key, values in result.items():\n        _, (plot_mean, plot_median) = plt.pie([values[\"mean\"], values[\"median\"]],\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 42, 36, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 43, 38, 35, 45, 42, 39, 40, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 43, 38, 46, 39, 35, 40, 45, 44, 47, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(figsize=(3, 3))\n        ax.bar([0, 1], list(values.values()))\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 47, 37, 38, 39, 45, 34, 41, 36, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {}\n    plots = [\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticklabels([key, \"\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 45, 46, 47, 44, 37, 42, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {\"mean\": np.mean(value), \"median\": np.median(value)} for key, value in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticks(ax.get_xticks(), [\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 45, 34, 42, 38, 39, 46, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as json_file:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"{key} values\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 43, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots(1, 1, figsize=(8, 8))\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.11780190467834473, "tests_passed": true, "error": null}}
{"selected_lines": [40, 46, 45, 41, 34, 35, 44, 38, 47, 43, 42, 37, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, encoding='utf-8') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(lambda: 0.0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set(xticklabels=[key], title=key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [plt.bar([k for k in result.keys()], [v[\"mean\"] for k, v in result.items()], 0.8) for k in result.keys()]\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.05630993843078613, "tests_passed": true, "error": null}}
{"selected_lines": [47, 46, 39, 44, 41, 40, 35, 42, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {}\n    plots = [plt.bar(result[key].keys(), result[key].values()) for key in result]\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([1, 2], values.values(), 0.6)\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.002062082290649414, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0022280216217041016, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [40, 35, 43, 44, 39, 36, 45, 42, 47, 38, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"{key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 45, 43, 47, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks(ax.get_xticks(), [\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.011058807373046875, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 41, 43, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [plt.bar(result.keys(), result[k][\"mean\"], color=\"r\") for k in result.keys()]\n    for key, values in result.items():\n        _, ax = plt.subplots(1)\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.013334035873413086, "tests_passed": true, "error": null}}
{"selected_lines": [37, 44, 40, 46, 47, 45, 34, 36, 41, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as fp:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {\"mean\": np.mean(value), \"median\": np.median(value)} for key, value in stats.items()}\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 43, 39, 36, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': None, 'median': None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 36, 35, 40, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"rt\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [44, 39, 35, 45, 37, 43, 36, 42, 41, 46, 40, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, plt = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticklabels([key, \"\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.03593707084655762, "tests_passed": true, "error": null}}
{"selected_lines": [34, 44, 35, 38, 37, 41, 43, 39, 36, 42, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, plot = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 47, 35, 43, 36, 42, 46, 38, 45, 40, 39, 41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as file:\n        data = json.load(f)\n    stats = {}\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots(1, 1, figsize=(8, 8))\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set(xticklabels=[key], title=key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39, 43, 47, 38, 40, 36, 37, 34, 35, 45, 46, 41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    plots = []\n    for key, values in result.items():\n        _, plt = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 34, 46, 36, 41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(list))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set(xticklabels=[key], title=key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 45, 39, 37, 42, 38, 43, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 46, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as file:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(int))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [41, 46, 40, 43, 39, 34, 42, 38, 37, 35, 45, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.033555030822753906, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 45, 46, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 40, 38, 46, 39, 43, 37, 35, 41, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 35, 39, 40, 47, 46, 34, 44, 41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as json_file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 45, 36, 35, 39, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticklabels([key, \"\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = {}\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0021660327911376953, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [43, 41, 44, 47, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [plt.bar(result.keys(), result[k][\"mean\"], color=\"r\") for k in result.keys()]\n    for key, values in result.items():\n        _, plot = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 38, 42, 41, 44, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 46, 39, 40, 37, 41, 34, 42, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 40, 36, 46, 37, 47, 44, 45, 39, 35, 41, 38, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0.0, 'median': 0.0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 43, 40, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots(1, 1, figsize=(8, 8))\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 39, 37, 36, 46, 43, 41, 35, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value) if np.ndim(value) == 1 else np.median(np.array(value), axis=0))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"{key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 42, 43, 44, 45, 47, 41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(figsize=(3, 3))\n        ax.bar(values.keys(), values.values())\n        ax.set_xticklabels([key, \"\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 35, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0015330314636230469, "tests_passed": true, "error": null}}
{"selected_lines": [41, 34, 40, 44, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0015399456024169922, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.03526115417480469, "tests_passed": true, "error": null}}
{"selected_lines": [37, 45, 36, 35, 40, 46, 42, 44, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = {}\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(range(1, len(values.keys()) + 1), values.values())\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 43, 42, 45, 41, 35, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 40, 38, 45, 43, 42, 34, 36, 39, 44, 35, 41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as json_file:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = {key: {'mean': np.mean(v), 'median': np.median(v)}\n    plots = []\n    for key, values in stats.items():\n        _, plot = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 45, 42, 38, 41, 35, 36, 39, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [plt.bar([k for k, v in result.items()], [v[\"mean\"], v[\"median\"]]) for k, v in result.items()]\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [44, 45, 39, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.034078121185302734, "tests_passed": true, "error": null}}
{"selected_lines": [46, 36, 40, 44, 47, 39, 45, 35, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(lambda: 0.0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {'mean': np.mean(v), 'median': np.median(v)}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"Mean\", \"Median\"], [values[\"mean\"], values[\"median\"]], width=0.5)\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 39, 40, 44, 34, 42, 35, 43, 38, 36, 37, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': None, 'median': None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(np.array(value)))\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 43, 45, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.002619028091430664, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36, 43, 34, 41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as file:\n        data = json.load(f)\n    stats = {}\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [plt.bar(i + \"\", v[\"mean\"]) for i, v in stats.items()]\n    for key, values in result.items():\n        _, plot = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 45, 42, 43, 46, 41, 44, 40, 39, 36, 47, 35, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value) if np.ndim(value) == 1 else np.median(np.array(value), axis=0))\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, plt = plt.subplots(1)\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 38, 44, 39, 47, 36, 46, 41, 45, 42, 34, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as file:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 36, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': None, 'median': None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([k for k in values.keys()], [values[k] for k in values.keys()])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, encoding='utf-8') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.13270783424377441, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [47, 42, 36, 38, 35, 41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0022089481353759766, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [36, 44, 37, 34, 39, 45, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(lambda: 0.0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"{key} values\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 39, 44, 38, 40, 42, 35, 47, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = {}\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(np.array(value)))\n    result = dict()\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([0, 1], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 34, 41, 35, 37, 42, 43, 38, 47, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, encoding='utf-8') as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 38, 43, 46, 41, 34, 47, 40, 36, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value) if np.ndim(value) == 1 else np.median(np.array(value), axis=0))\n    result = defaultdict(dict)\n    plots = [plt.bar([k for k in result.keys()], [v[\"mean\"] for v in result.values()]),\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 46, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as json_file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, plot = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 40, 36, 37, 47, 38, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as json_file:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 41, 38, 45, 47, 43, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as input_file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, (plot_mean, plot_median) = plt.pie([values[\"mean\"], values[\"median\"]],\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([k for k in values.keys()], [values[k] for k in values.keys()])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.1302042007446289, "tests_passed": true, "error": null}}
{"selected_lines": [40, 46, 35, 37, 42, 47, 41, 45, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [plt.bar(result[key].keys(), result[key].values()) for key in result]\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 40, 47, 44, 46, 35, 45, 41, 38, 36, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(lambda: 0.0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"Mean\", \"Median\"], [values[\"mean\"], values[\"median\"]], width=0.5)\n        ax.set_xticks(ax.get_xticks(), [\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 45, 40, 41, 42, 43, 35, 38, 36, 46, 47, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value) if np.ndim(value) == 1 else np.median(np.array(value), axis=0))\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, plot = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks(ax.get_xticks())\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.03540396690368652, "tests_passed": true, "error": null}}
{"selected_lines": [43, 37, 42, 40, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, plot = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 36, 47, 43, 45, 46, 40, 38, 34, 35, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(np.array(value)))\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.11780190467834473, "tests_passed": true, "error": null}}
{"selected_lines": [45, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as input_file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39, 35, 42, 45, 46, 41, 47, 37, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(int))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [plt.bar([k for k in result.keys()], [v[\"mean\"] for k, v in result.items()], 0.8) for k in result.keys()]\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 40, 43, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': None, 'median': None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 41, 44, 36, 37, 47, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(range(1, len(values.keys()) + 1), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 42, 44, 46, 45, 43, 36, 39, 35, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, encoding='utf-8') as f:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots(figsize=(3, 3))\n        ax.bar([k for k in values.keys()], [values[k] for k in values.keys()])\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 35, 47, 39, 40, 37, 41, 44, 42, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 34, 42, 41, 37, 43, 46, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as input_file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(figsize=(3, 3))\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set(xticklabels=[key], title=key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 46, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as fp:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [plt.bar(result[key].keys(), result[key].values()) for key in result]\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([k for k in values.keys()], [values[k] for k in values.keys()])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.1302042007446289, "tests_passed": true, "error": null}}
{"selected_lines": [46, 35, 40, 36, 42, 37, 38, 43, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    plots = []\n    for key, values in result.items():\n        _, plot = plt.subplots()\n        ax.bar(values.keys(), values.values(), width=0.5, align=\"center\")\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0021600723266601562, "tests_passed": true, "error": null}}
{"selected_lines": [34, 42, 46, 40, 47, 35, 44, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as input_file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(figsize=(8, 4))\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 42, 43, 39, 36, 46, 44, 40, 38, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(list))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks(ax.get_xticks())\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [40, 45, 44, 41, 47, 35, 42, 38, 46, 43, 39, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': None, 'median': None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set(xlabel=key, ylabel=\"value\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 44, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([0, 1], list(values.values()))\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.032950639724731445, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0019381046295166016, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [44, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.04095792770385742, "tests_passed": true, "error": null}}
{"selected_lines": [35, 45, 34, 37, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.034020185470581055, "tests_passed": true, "error": null}}
{"selected_lines": [42, 38, 45, 34, 47, 40, 37, 44, 39, 46, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {'mean': np.mean(v), 'median': np.median(v)}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 46, 34, 41, 42, 39, 45, 47, 44, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as fp:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticklabels([key, \"\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 37, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"Mean\", \"Median\"], [values[\"mean\"], values[\"median\"]], width=0.5)\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0016989707946777344, "tests_passed": true, "error": null}}
{"selected_lines": [44, 34, 47, 35, 36, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 47, 43, 41, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots(figsize=(8, 4))\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks(ax.get_xticks(), [\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 47, 40, 35, 39, 45, 43, 44, 41, 34, 46, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [plt.bar(result[key].keys(), result[key].values()) for key in result]\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([k for k in values.keys()], [values[k] for k in values.keys()])\n        ax.set_xticks(ax.get_xticks(), [\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0015702247619628906, "tests_passed": true, "error": null}}
{"selected_lines": [44, 45, 47, 38, 35, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.001531839370727539, "tests_passed": true, "error": null}}
{"selected_lines": [46, 41, 45, 35, 36, 37, 43, 34, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as fp:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticks([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [37, 41, 36, 45, 46, 43, 34, 39, 42, 44, 38, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as fp:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [plt.bar(result[key].keys(), result[key].values()) for key in result]\n    for key, values in stats.items():\n        _, plots[0].figure.gca().clear()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.03526115417480469, "tests_passed": true, "error": null}}
{"selected_lines": [41, 47, 44, 36, 34, 42, 43, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [plt.bar([k for k in result.keys()], [v[\"mean\"] for v in result.values()]),\n    for key, values in result.items():\n        _, plot = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 40, 34, 43, 39, 46, 38, 47, 36, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as input_file:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value) if np.ndim(value) == 1 else np.median(np.array(value), axis=0))\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 35, 44, 43, 42, 45, 38, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, plot = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 40, 36, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 45, 41, 42, 43, 39, 36, 47, 46, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(lambda: 0.0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [\n    for key, values in stats.items():\n        _, ax = plt.subplots(1, 1, figsize=(8, 3), layout=\"horizontal\", constrained_layout=True, clear=True)\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 45, 39, 47, 38, 35, 40, 34, 37, 46, 42, 44, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as input_file:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = defaultdict(dict)\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots(1, 1, figsize=(4, 2))\n        ax.bar(values.keys(), values.values())\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 35, 37, 36, 40, 41, 39, 45, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {'mean': np.mean(v), 'median': np.median(v)}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 46, 36, 40, 39, 38, 47, 35, 37, 42, 41, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as file:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': None, 'median': None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, plt = plt.subplots(1)\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 37, 45, 41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as json_file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 39, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.034078121185302734, "tests_passed": true, "error": null}}
{"selected_lines": [42, 47, 37, 36, 39, 43, 34, 41, 40, 38, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"Mean\", \"Median\"], [values[\"mean\"], values[\"median\"]], width=0.5)\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 34, 41, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as json_file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = {}\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.11780190467834473, "tests_passed": true, "error": null}}
{"selected_lines": [40, 41, 43, 37, 36, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0.0, 'median': 0.0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(1, 1, figsize=(8, 8))\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 35, 45, 34, 39, 46, 43, 47, 41, 42, 36, 37, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as fp:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(int))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(np.array(value)))\n    result = {}\n    plots = [plt.bar([k for k in result.keys()], [v[\"mean\"] for k, v in result.items()], 0.8) for k in result.keys()]\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 34, 45, 40, 35, 39, 37, 47, 42, 38, 41, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [plt.bar([k for k, v in result.items()], [v[\"mean\"], v[\"median\"]]) for k, v in result.items()]\n    for key, values in stats.items():\n        _, plots[0].figure.gca().clear()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 34, 36, 45, 37, 43, 42, 40, 44, 38, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 43, 44, 46, 45, 36, 41, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 47, 39, 40, 34, 46, 43, 44, 38, 36, 41, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as json_file:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticklabels([key, \"\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 45, 40, 41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 46, 40, 44, 41, 42, 34, 47, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as file:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values(), width=0.5, align=\"center\")\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 46, 35, 43, 34, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, (plot_mean, plot_median) = plt.pie([values[\"mean\"], values[\"median\"]],\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 34, 37, 44, 39, 35, 40, 36, 41, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, encoding='utf-8') as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = {}\n    plots = [plt.bar([k for k, v in result.items()], [v[\"mean\"], v[\"median\"]]) for k, v in result.items()]\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 34, 37, 41, 44, 47, 45, 43, 36, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as json_file:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(lambda: 0.0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, plot = plt.subplots()\n        ax.bar(range(1, len(values.keys()) + 1), values.values())\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 35, 36, 38, 44, 34, 39, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(list))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values(), width=0.5, align=\"center\")\n        ax.set_xticks(ax.get_xticks(), [\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as input_file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.003120899200439453, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [46, 45, 38, 37, 34, 35, 41, 43, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.010622024536132812, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44, 46, 34, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 36, 41, 43, 34, 46, 39, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as json_file:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [plt.bar([k for k in result.keys()], [v[\"mean\"] for k, v in result.items()], 0.8) for k in result.keys()]\n    for key, values in result.items():\n        _, plt = plt.subplots(1)\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.02086496353149414, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [44, 46, 39, 42, 36, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0021598339080810547, "tests_passed": true, "error": null}}
{"selected_lines": [36, 41, 46, 47, 39, 38, 45, 35, 34, 44, 43, 37, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [plt.bar(i + \"\", v[\"mean\"]) for i, v in stats.items()]\n    for key, values in result.items():\n        _, plt = plt.subplots(1)\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"{key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 36, 42, 40, 39, 46, 38, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(list(values.keys()), list(values.values()), width=0.4)\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 34, 47, 38, 45, 35, 41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as fp:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [plt.bar(result[key].keys(), result[key].values()) for key in result]\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 42, 45, 46, 38, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.010355949401855469, "tests_passed": true, "error": null}}
{"selected_lines": [43, 35, 45, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(1, 1, figsize=(4, 2))\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"{key} values\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0328369140625, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.11780190467834473, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks(ax.get_xticks())\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.03479909896850586, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12216496467590332, "tests_passed": true, "error": null}}
{"selected_lines": [36, 41, 45, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([0, 1], list(values.values()))\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 46, 36, 41], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [plt.bar(result.keys(), result[k][\"mean\"], color=\"r\") for k in result.keys()]\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0019121170043945312, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [41, 40, 44, 47, 36, 39, 38, 42, 46, 43, 34, 35, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(lambda: 0.0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {key: {'mean': np.mean(v), 'median': np.median(v)}\n    plots = [plt.bar(result.keys(), result[k][\"mean\"], color=\"r\") for k in result.keys()]\n    for key, values in result.items():\n        _, plot = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 45, 47, 38, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 45, 41, 44, 39, 47, 46, 35, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = {}\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(1, 1, figsize=(8, 8))\n        ax.bar([\"mean\", \"median\"], values.values())\n        ax.set_title(f\"{key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 44, 40, 42, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 46, 44, 45, 47, 38, 36, 37], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as file:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0.0, 'median': 0.0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.04095792770385742, "tests_passed": true, "error": null}}
{"selected_lines": [47, 34, 38, 39, 46, 40, 41, 35, 37, 42, 45, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as json_file:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(int))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_xticks(ax.get_xticks())\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 34, 35, 40, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 41, 45, 47, 44, 37, 35], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.01026296615600586, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0021600723266601562, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.11780190467834473, "tests_passed": true, "error": null}}
{"selected_lines": [47, 46, 45, 38, 44, 37, 36, 42, 43, 41, 40, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12202191352844238, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 46, 39], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(np.array(value)))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 43, 39, 40, 47, 35, 46, 34, 37, 41, 42, 38, 44], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.median(value))\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(range(1, len(values.keys()) + 1), values.values())\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 41, 37, 34, 35, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': None, 'median': None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 37, 47, 36, 34, 46, 35, 39, 40, 42, 41, 45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [plt.bar([k for k in result.keys()], [v[\"mean\"] for v in result.values()]),\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticklabels([key, \"\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0019381046295166016, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [45, 35, 43, 46, 34, 36, 40, 39, 42, 41, 44, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {}\n    plots = [plt.bar([k for k, v in result.items()], [v[\"mean\"], v[\"median\"]]) for k, v in result.items()]\n    for key, values in result.items():\n        _, plot = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots(1)\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.1195368766784668, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 38, 34, 44, 42], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(int))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: defaultdict(lambda: 0.0))\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0032660961151123047, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [36, 39, 40, 37, 45, 44, 34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = defaultdict(dict)\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values(), color=\"grey\", alpha=0.6, width=0.3)\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.03526115417480469, "tests_passed": true, "error": null}}
{"selected_lines": [47, 44, 40, 45, 36, 43, 34, 37, 35, 42, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(lambda: {'mean': None, 'median': None})\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots(figsize=(8, 4))\n        ax.bar(values.keys(), values.values())\n        ax.set_xticklabels([\"mean\", \"median\"])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 47, 40], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values(), color=\"grey\", alpha=0.6, width=0.3)\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.001608133316040039, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [values[\"mean\"], values[\"median\"]])\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.12202191352844238, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 45, 37, 44, 46, 47, 35, 42, 43, 34, 38], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as file:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {k: {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()}\n    plots = [\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set_ylabel(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 47, 37, 39, 35, 34, 40, 44, 46, 43], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = dict()\n    plots = []\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values(), color=\"grey\", alpha=0.6, width=0.3)\n        ax.set_title(f\"Statistics of {key}\")\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0016722679138183594, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 39, 47, 44, 35, 45, 46, 41, 38, 36], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = [\n    for key, values in result.items():\n        _, ax = plt.subplots()\n        ax.bar(values.keys(), values.values())\n        ax.set(\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 36, 47, 43, 42, 37, 44, 45, 38, 46], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    stats = []\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(np.mean(value))\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, plots[0].figure.gca().clear()\n        ax.bar([0, 1], values.values(), width=0.25, label=key)\n        ax.set_xticks([0, 1])\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 46, 42, 34, 37, 41, 45, 40, 36, 43, 35, 47], "result": {"code": "import json\nimport numpy as np\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(input_file):\n    \"\"\"\n    Reads a JSON file containing a list of dictionaries. For each key across all dictionaries,\n    calculates the mean and median of its values using numpy. Visualizes the mean and median\n    using bar charts. Returns the results and plots.\n\n    Parameters:\n        - input_file (str): Path to the input JSON file containing a list of dictionaries.\n\n    Returns:\n        - result (dict): each key corresponds to those in the input dictionaries, and the corresponding\n          value is another dict with keys 'mean' and 'median', representing the calculated statistics.\n        - plots  (list[matplotlib.axes._axes.Axes]): A list of bar charts, one for\n          each key in the dictionaries, visualizing the mean and median values.\n\n    Requirements:\n        - json\n        - numpy\n        - collections.defaultdict\n        - matplotlib.pyplot\n\n    Example:\n    >>> results, plots = task_func(\"sample_data.json\")\n    >>> type(plots[0])\n    <class 'matplotlib.axes._axes.Axes'>\n    >>> results\n    {'a': {'mean': 3.0, 'median': 3.0}, 'b': {'mean': 6.0, 'median': 6.0}}\n    \"\"\"\n    with open(input_file) as file:\n        data = json.load(f)\n    stats = defaultdict(dict)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n    result = {}\n    plots = []\n    for key, values in stats.items():\n        _, ax = plt.subplots()\n        ax.bar([0, 1], values.values(), width=0.25, label=key)\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
