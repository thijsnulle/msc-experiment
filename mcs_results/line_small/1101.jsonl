{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06459283828735352, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06459283828735352, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30, 26, 33, 28, 29, 27, 32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(f'python3 {py_script}', shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 30, 26, 27, 33], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(\"%s*.py\" % test_dir)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.07366585731506348, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.DEVNULL)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.3903639316558838, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 31, 29, 32, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.022217988967895508, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(os.path.abspath(test_dir), \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0832211971282959, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [28, 27, 31, 29, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 30, 32, 33, 29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.run(['python3', py_script], stdout=subprocess.DEVNULL)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(args=[py_script, test_dir])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.07115912437438965, "tests_passed": false, "error": "PermissionError"}}
{"selected_lines": [33, 27, 30, 26], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = [f for f in glob.glob(f\"{test_dir}/*.py\")]\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 26, 30, 29, 32, 28], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 27, 28, 31], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{os.path.dirname(test_dir)}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.PIPE)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 28, 31, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([\"python3\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.12041282653808594, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [27, 30, 29, 33, 32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.run([\"python3\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 28, 29, 30, 31, 32, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 31, 29, 33, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30, 27, 29, 26], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{os.path.dirname(test_dir)}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.07366585731506348, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [28, 33, 27, 32, 30, 26, 29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.run(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.PIPE)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.3870117664337158, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = [f for f in glob.glob(f\"{test_dir}/*.py\")]\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0640261173248291, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.07366585731506348, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.6331582069396973, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.015484809875488281, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.015484809875488281, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32, 26, 29, 30, 28, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{os.path.dirname(test_dir)}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.02226400375366211, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(os.path.abspath(test_dir), \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0832211971282959, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"**/*.py\", recursive=True)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.07847809791564941, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [29, 26, 30, 32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.check_call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06459283828735352, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.07202720642089844, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [26, 31, 33, 30, 28, 27, 32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.02226400375366211, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06459283828735352, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [26, 33, 32, 29, 28, 31, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + '*.py')\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round(end_time - start_time, 3)\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [29, 30, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python3\", py_script], capture_output=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.4273488521575928, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [33, 32, 31, 26, 30, 27, 29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([\"python3\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(os.path.abspath(test_dir), \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0832211971282959, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python3\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.4027979373931885, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [26, 29, 31, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.check_call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 28, 31, 29, 27, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.run(['python3', py_script], stdout=subprocess.DEVNULL)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 26, 29, 28, 33, 32, 31], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.run([\"python\", py_script], check=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 29, 27, 26, 31, 33], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python3\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 29, 31, 28, 32, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python3\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06459283828735352, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([\"python3\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.12041282653808594, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [28, 30, 29, 27, 26, 31], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = [f for f in glob.glob(f\"{test_dir}/*.py\")]\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python', py_script], check=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27, 33, 29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 27, 30, 32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"/*.py\")\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [31, 30, 26, 32, 29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.check_call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 30, 27, 32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_output('python3 ' + py_script, shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.PIPE)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.3870117664337158, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.DEVNULL)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.3903639316558838, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 27, 33, 29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(os.path.abspath(test_dir), \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.run(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = [f for f in glob.glob(f\"{test_dir}/*.py\")]\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0640261173248291, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [26, 33, 32, 30, 29, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(os.path.abspath(test_dir), \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_output('python3 ' + py_script, shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 30, 32, 27, 29, 33], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(os.path.abspath(test_dir), \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 27, 33, 29, 30, 26], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python\", py_script], check=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06459283828735352, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27, 30, 29, 28, 31], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*\", \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python3\", py_script], capture_output=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27, 30, 32, 31, 28, 26, 33], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([\"python3\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.12041282653808594, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [29, 27, 30, 26, 31, 28, 32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32, 26, 31, 27, 29, 33], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round(end_time - start_time, 3)\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 31, 28], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python3\", py_script], capture_output=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round(end_time - start_time, 3)\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 26, 33, 29, 28, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.run([\"python\", py_script], check=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [31, 30, 28, 33, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27, 30, 32, 28, 29, 31, 26], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(\"%s*.py\" % test_dir)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call([\"python\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.02226400375366211, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [33, 30, 32, 27, 31, 28], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python3\", py_script], capture_output=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.02226400375366211, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"**/*.py\", recursive=True)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.07847809791564941, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.02226400375366211, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + '*.py')\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.014488935470581055, "tests_passed": true, "error": null}}
{"selected_lines": [29, 26, 32, 28, 30, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.check_call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 33, 29, 26], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 27, 32, 30, 31, 26], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(os.path.abspath(test_dir), \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round((end_time - start_time), 3)\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06459283828735352, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.02226400375366211, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [33, 29, 32, 30, 31, 28, 26], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.run([\"python3\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 31, 26, 28, 27, 33], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + '*.py')\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06459283828735352, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32, 27, 28, 31], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"**/*.py\", recursive=True)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round(end_time - start_time, 3)\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.015484809875488281, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [31, 29, 30, 33, 32, 28, 26], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06459283828735352, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [28, 30, 29, 26], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06459283828735352, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.3803572654724121, "tests_passed": true, "error": null}}
{"selected_lines": [26, 28, 33, 32, 27, 30, 31], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{os.path.dirname(test_dir)}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32, 28, 33, 31, 27, 26], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(os.path.abspath(test_dir), \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round(end_time - start_time, 3)\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.PIPE)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.3870117664337158, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [29, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 27, 31, 33, 32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + '*.py')\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(\"%s/*.py\" % test_dir)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06641983985900879, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [33, 30, 29, 28, 27, 31], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30, 27, 32, 33, 26, 28], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 30, 32, 27, 33], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{os.path.dirname(test_dir)}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(args=[py_script, test_dir])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([\"python3\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.12041282653808594, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + '*.py')\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.014488935470581055, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(args=[py_script, test_dir])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.07115912437438965, "tests_passed": false, "error": "PermissionError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27, 30, 32, 33], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = [f for f in glob.glob(f\"{test_dir}/*.py\")]\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27, 30, 26, 33], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.015484809875488281, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [28, 32, 31, 27, 29, 33, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([\"python3\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [31, 27, 33, 29, 28, 30, 26], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python3\", py_script], capture_output=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.015484809875488281, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python', py_script], check=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.08496689796447754, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32, 30, 29, 26, 31, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*\", \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.check_call([\"python3\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32, 28, 30, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06459283828735352, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.022217988967895508, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [28, 30, 33, 32, 29, 26], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.run([\"python\", py_script], check=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round((end_time - start_time), 3)\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([\"python3\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.12041282653808594, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.08226513862609863, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06459283828735352, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [26, 27, 30, 31, 33], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [29, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(args=[py_script, test_dir])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 30, 32, 28, 29, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(\"%s*.py\" % test_dir)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.024910688400268555, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python\", py_script], check=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0733039379119873, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.07202720642089844, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.11458992958068848, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [27, 30, 28, 32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python3\", py_script], capture_output=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(\"python3 \" + py_script, shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.5567841529846191, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"**/*.py\", recursive=True)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.07847809791564941, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [29, 32, 27, 26, 30, 33], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(\"%s/*.py\" % test_dir)\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.run([\"python3\", py_script], capture_output=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = [f for f in glob.glob(f\"{test_dir}/*.py\")]\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0640261173248291, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"**/*.py\", recursive=True)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.07847809791564941, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06459283828735352, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [31, 30, 32, 33, 29, 27, 28], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(\"%s/*.py\" % test_dir)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 32, 30, 26, 29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.run(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.PIPE)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.3870117664337158, "tests_passed": true, "error": null}}
{"selected_lines": [30, 28, 33, 31, 32, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*\", \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(\"python3 \" + py_script, shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.5567841529846191, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(args=[py_script, test_dir])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.07115912437438965, "tests_passed": false, "error": "PermissionError"}}
{"selected_lines": [33, 28, 30, 27, 29, 26, 32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*\")\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [31, 29, 27, 26, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.DEVNULL)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.3903639316558838, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.02226400375366211, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(\"%s*.py\" % test_dir)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.024910688400268555, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 27, 26, 30, 28, 29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.08042716979980469, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.3803572654724121, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.6331582069396973, "tests_passed": true, "error": null}}
{"selected_lines": [27, 30, 26, 29, 28, 31, 33], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.run(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [29, 30, 28, 27, 31, 26], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + '*.py')\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.run(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_output('python3 ' + py_script, shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.26073217391967773, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [28, 27, 26, 30, 33, 31, 29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python3\", py_script], capture_output=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 27, 28, 33, 30, 32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.08042716979980469, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + '*.py')\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.014488935470581055, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(os.path.abspath(test_dir), \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0832211971282959, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [29, 28, 26, 33, 27, 31, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(os.path.abspath(test_dir), \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(args=[py_script, test_dir])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.022217988967895508, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29, 32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round((end_time - start_time), 3)\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.11458992958068848, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(os.path.abspath(test_dir), \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0832211971282959, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27, 30, 29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python\", py_script], check=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(args=[py_script, test_dir])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.07115912437438965, "tests_passed": false, "error": "PermissionError"}}
{"selected_lines": [29, 32, 31, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round(end_time - start_time, 3)\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"**/*.py\", recursive=True)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python3\", py_script], capture_output=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": false, "time": 0.0003287792205810547, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [31, 30, 33, 29, 27, 32, 26], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python3\", py_script], capture_output=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round(end_time - start_time, 3)\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 26, 32, 31, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + '*.py')\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.014488935470581055, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(\"%s/*.py\" % test_dir)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06641983985900879, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_output('python3 ' + py_script, shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.26073217391967773, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [32, 28, 26, 33, 31, 30, 29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.check_output('python3 ' + py_script, shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 27, 26, 30, 32, 33, 31], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06459283828735352, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [29, 32, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.run(['python3', py_script], stdout=subprocess.PIPE)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.015484809875488281, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [27, 29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{os.path.dirname(test_dir)}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 28, 33, 27, 32, 30, 26], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + '*.py')\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{os.path.dirname(test_dir)}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.014441967010498047, "tests_passed": true, "error": null}}
{"selected_lines": [26, 27, 32, 30, 28, 33, 29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + '*.py')\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 28, 27, 26, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_output('python3 ' + py_script, shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 26, 29, 28, 30, 32, 33], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round((end_time - start_time), 3)\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 29, 26, 32, 30, 33, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(\"python3 \" + py_script, shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 29, 30, 27, 32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"**/*.py\", recursive=True)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(\"python3 \" + py_script, shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(\"%s/*.py\" % test_dir)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06641983985900879, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python', py_script], check=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.08496689796447754, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python3\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.4027979373931885, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(f'python3 {py_script}', shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.55531907081604, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(\"python3 \" + py_script, shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.5567841529846191, "tests_passed": true, "error": null}}
{"selected_lines": [27, 31, 30, 26, 29, 28, 33], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python\", py_script], check=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.07202720642089844, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27, 30, 31, 32, 28], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [31, 30, 26, 33, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(f'python3 {py_script}', shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06459283828735352, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32, 30, 26, 33, 27, 31, 28], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python3\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06459283828735352, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.022217988967895508, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32, 29, 30, 28], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.run([\"python3\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 33, 30, 32, 31], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round((end_time - start_time), 3)\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30, 33, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = [f for f in glob.glob(f\"{test_dir}/*.py\")]\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.015484809875488281, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [31, 33, 26, 30, 32, 29, 28], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call([\"python\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06459283828735352, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + '*.py')\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.014488935470581055, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round((end_time - start_time), 3)\n    return execution_times", "compilation_passed": true, "time": 0.05388498306274414, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.02226400375366211, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.015484809875488281, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29, 27, 31, 32, 28, 33, 26], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 26, 27, 29, 32, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 33, 32, 27, 28, 31], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round((end_time - start_time), 3)\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 27, 26, 31, 30, 32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round(end_time - start_time, 3)\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([\"python3\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.12041282653808594, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [28, 27, 30, 33, 31], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + '*.py')\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": false, "time": 0.0003287792205810547, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [30, 32, 28, 26, 33, 27, 31], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + '*.py')\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.07202720642089844, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [28, 29, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(\"%s/*.py\" % test_dir)\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 26, 33, 27, 29, 28], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 27, 32, 30, 26, 28], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06459283828735352, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [26, 29, 33, 27, 32, 28], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = [f for f in glob.glob(f\"{test_dir}/*.py\")]\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"**/*.py\", recursive=True)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.07847809791564941, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_output('python3 ' + py_script, shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.26073217391967773, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [33, 29, 31, 28, 30, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.check_output('python3 ' + py_script, shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 32, 30, 28, 33, 29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(\"%s/*.py\" % test_dir)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 30, 33, 32, 28, 31, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.DEVNULL)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + '*.py')\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.014488935470581055, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 26, 29, 27, 28, 32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round((end_time - start_time), 3)\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 30, 26], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round((end_time - start_time), 3)\n    return execution_times", "compilation_passed": true, "time": 0.05388498306274414, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.PIPE)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.3870117664337158, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [29, 31, 26, 32, 27, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + '*.py')\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27, 28, 31, 30, 33, 26, 32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [29, 27, 31, 33, 26, 28, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 30, 33, 29, 31, 32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round((end_time - start_time), 3)\n    return execution_times", "compilation_passed": true, "time": 0.05388498306274414, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [26, 30, 28, 27, 32, 31], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 33, 28, 30, 27, 32, 31], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27, 31, 33, 30, 29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"**/*.py\", recursive=True)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.DEVNULL)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.3903639316558838, "tests_passed": true, "error": null}}
{"selected_lines": [27, 33, 30, 31, 28], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.DEVNULL)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.07366585731506348, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": false, "time": 0.0003287792205810547, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python3\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.4027979373931885, "tests_passed": true, "error": null}}
{"selected_lines": [30, 28, 26, 27, 32, 33], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"**/*.py\", recursive=True)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.DEVNULL)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = [f for f in glob.glob(f\"{test_dir}/*.py\")]\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0640261173248291, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [28, 30, 32, 27, 33, 26], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round((end_time - start_time), 3)\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 27, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([\"python3\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.12041282653808594, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(\"%s*.py\" % test_dir)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.024910688400268555, "tests_passed": true, "error": null}}
{"selected_lines": [26, 27, 29, 31], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(os.path.abspath(test_dir), \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 29, 28, 27, 26, 33], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 31, 33, 30, 32, 27, 29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.run(['python', py_script], check=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 28, 26, 27, 30, 29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 32, 27, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = [f for f in glob.glob(f\"{test_dir}/*.py\")]\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.02226400375366211, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.DEVNULL)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.3903639316558838, "tests_passed": true, "error": null}}
{"selected_lines": [32, 27, 30, 33, 26, 29, 28], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*\", \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(args=[py_script, test_dir])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.07115912437438965, "tests_passed": false, "error": "PermissionError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.3803572654724121, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.015484809875488281, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30, 29, 26], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.08226513862609863, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.08042716979980469, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.07366585731506348, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30, 27, 28, 29, 33], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 30, 33, 32, 29, 28], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([\"python3\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 31, 30, 28, 26], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"**/*.py\", recursive=True)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python\", py_script], check=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python', py_script], check=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.08496689796447754, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 27, 30, 29, 32, 33, 31], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.check_output('python3 ' + py_script, shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 31, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round((end_time - start_time), 3)\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.PIPE)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.3870117664337158, "tests_passed": true, "error": null}}
{"selected_lines": [28, 29, 26, 27, 33, 31, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 26, 28, 32, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06459283828735352, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [31, 27, 32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round(end_time - start_time, 3)\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [33, 30, 32, 27, 28, 26], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(os.path.abspath(test_dir), \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 28, 33, 27, 29, 31, 32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(\"%s/*.py\" % test_dir)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06641983985900879, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.02226400375366211, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [27, 28, 26, 30, 29, 31], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = [f for f in glob.glob(f\"{test_dir}/*.py\")]\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.11458992958068848, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_output('python3 ' + py_script, shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.26073217391967773, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.07366585731506348, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [33, 27, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 33, 31, 29, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python', py_script], check=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.015484809875488281, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [31, 29, 27, 30, 33, 28, 32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(f'python3 {py_script}', shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round(end_time - start_time, 3)\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.022217988967895508, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.4103209972381592, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.022217988967895508, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [29, 33, 26, 28, 32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round((end_time - start_time), 3)\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [28, 27, 29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.022217988967895508, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [31, 30, 26, 33, 27, 29, 28], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python3\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.4027979373931885, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.08042716979980469, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + '*.py')\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.014488935470581055, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06459283828735352, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [28, 27, 31, 33, 30, 29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"**/*.py\", recursive=True)\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.run(['python3', py_script], stdout=subprocess.PIPE)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [28, 29, 33, 26, 27, 31, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + '*.py')\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call([\"python\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 26, 27, 28, 31, 29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [29, 28, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.run([\"python3\", py_script], capture_output=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29, 28, 31, 26, 32, 33], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call([\"python\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(os.path.abspath(test_dir), \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0832211971282959, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [28, 27, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{os.path.dirname(test_dir)}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.08087396621704102, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27, 33, 26, 31, 32, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python3\", py_script], capture_output=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 27, 32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(f'python3 {py_script}', shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.55531907081604, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 28, 33, 30, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.check_call(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 28, 26, 29, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{os.path.dirname(test_dir)}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 29, 26], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.022217988967895508, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [26, 27, 29, 32, 30, 31, 33], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.07202720642089844, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.08087396621704102, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30, 27, 28, 26, 29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"**/*.py\", recursive=True)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python3\", py_script], capture_output=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.4273488521575928, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round((end_time - start_time), 3)\n    return execution_times", "compilation_passed": true, "time": 0.05388498306274414, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27, 26, 32, 29, 33, 31, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.02226400375366211, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(\"%s*.py\" % test_dir)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.024910688400268555, "tests_passed": true, "error": null}}
{"selected_lines": [27, 32, 26, 29, 31, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*\", \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + '*.py')\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.014488935470581055, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [33, 30, 29, 31, 32, 28, 26], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.022217988967895508, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [31, 30, 28, 27, 32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = [f for f in glob.glob(f\"{test_dir}/*.py\")]\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python3\", py_script], capture_output=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.4273488521575928, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [26, 31, 33, 27, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.015484809875488281, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.3803572654724121, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 31, 30, 32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_output('python3 ' + py_script, shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.26073217391967773, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06459283828735352, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.DEVNULL)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.3903639316558838, "tests_passed": true, "error": null}}
{"selected_lines": [28, 27, 31, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(f'python3 {py_script}', shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32, 28, 30, 29, 31, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call([\"python\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 29, 28, 26, 30, 32, 31], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.run(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + '*.py')\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.014488935470581055, "tests_passed": true, "error": null}}
{"selected_lines": [27, 26, 29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 27, 30, 29, 26, 31, 28], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(args=[py_script, test_dir])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 27, 31, 29, 33], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": false, "time": 0.0003287792205810547, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.PIPE)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.3870117664337158, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.DEVNULL)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.3903639316558838, "tests_passed": true, "error": null}}
{"selected_lines": [30, 27, 29, 33, 28, 26, 32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.run(['python3', py_script], stdout=subprocess.PIPE)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [26, 31, 27, 30, 32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.022217988967895508, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + '*.py')\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.014488935470581055, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 31, 30, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.DEVNULL)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round((end_time - start_time), 3)\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python\", py_script], check=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0733039379119873, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python', py_script], check=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.08496689796447754, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.4103209972381592, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 26, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.07366585731506348, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + '*.py')\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.014488935470581055, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [26, 32, 28, 30, 31, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.02226400375366211, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(\"%s/*.py\" % test_dir)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06641983985900879, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06459283828735352, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32, 29, 31, 27, 28, 30, 26], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*\", \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.PIPE)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": false, "time": 0.0003287792205810547, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.02226400375366211, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29, 27, 33, 32, 30, 26, 28], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python3\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 33, 29, 32, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.02226400375366211, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [28, 27, 30, 29, 32, 31, 33], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30, 28, 33, 32, 31, 27, 29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(\"python3 \" + py_script, shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round(end_time - start_time, 3)\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.08226513862609863, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [29, 33, 30, 28, 31], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [33, 30, 28, 32, 27, 31, 26], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*\", \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 33, 29, 26, 28, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.08226513862609863, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.02226400375366211, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.07366585731506348, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [33, 30, 28, 31, 32, 27, 29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 30, 33, 26, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30, 31, 27, 33, 26, 28, 29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.PIPE)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30, 28, 33, 31, 29, 26, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(f'python3 {py_script}', shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.08087396621704102, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27, 28, 31, 26, 30, 29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(\"python3 \" + py_script, shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.3803572654724121, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_output('python3 ' + py_script, shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python3\", py_script], capture_output=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.4273488521575928, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.07366585731506348, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.08087396621704102, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30, 32, 33, 26, 31, 27, 29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 27, 31, 26, 33, 29, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [33, 29, 31, 28, 32, 27, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(\"python3 \" + py_script, shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = [f for f in glob.glob(f\"{test_dir}/*.py\")]\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0640261173248291, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.02226400375366211, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27, 30, 26, 33, 29, 31], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*\")\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06459283828735352, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.022217988967895508, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.3803572654724121, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.07366585731506348, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.PIPE)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.3870117664337158, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [33, 26, 31, 30, 29, 28, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + '*.py')\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(\"python3 \" + py_script, shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06459283828735352, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(f'python3 {py_script}', shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.55531907081604, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.022217988967895508, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [26, 33, 27, 30, 29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python3\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 28, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(f'python3 {py_script}', shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round((end_time - start_time), 3)\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.02226400375366211, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [31, 27, 28, 29, 30, 32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30, 33, 31, 32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.DEVNULL)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round((end_time - start_time), 3)\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30, 31, 26], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [28, 31, 29, 32, 33, 27, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(\"python3 \" + py_script, shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06459283828735352, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [29, 27, 30, 28, 31], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"/*.py\")\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call([\"python\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.08042716979980469, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [28, 31, 30, 27, 32, 33, 29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(\"python3 \" + py_script, shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 26, 33, 29, 31, 28, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 33, 30, 28, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06459283828735352, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.02226400375366211, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30, 27, 33, 32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"**/*.py\", recursive=True)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python\", py_script], check=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0733039379119873, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python', py_script], check=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.08496689796447754, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30, 28, 31, 32, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.07366585731506348, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(\"%s/*.py\" % test_dir)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06641983985900879, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.08087396621704102, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.07202720642089844, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27, 28, 33, 26, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.DEVNULL)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(\"%s/*.py\" % test_dir)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06641983985900879, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(\"%s/*.py\" % test_dir)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06641983985900879, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{os.path.dirname(test_dir)}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.014441967010498047, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 27, 26], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + '*.py')\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.DEVNULL)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30, 33, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([\"python3\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.6331582069396973, "tests_passed": true, "error": null}}
{"selected_lines": [33, 27, 30, 26, 29, 32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 29, 33, 30, 28, 27, 32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.run(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 26, 28, 27, 33, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(\"python3 \" + py_script, shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python', py_script], check=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.08496689796447754, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27, 31, 30, 26, 32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(\"%s/*.py\" % test_dir)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python3\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.6331582069396973, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 30, 32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(\"%s*.py\" % test_dir)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python', py_script], check=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python\", py_script], check=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0733039379119873, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27, 26, 33, 29, 28], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.07366585731506348, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(\"python3 \" + py_script, shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.5567841529846191, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 30, 33, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(\"%s/*.py\" % test_dir)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(args=[py_script, test_dir])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.015484809875488281, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.022217988967895508, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30, 27, 26], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(\"%s*.py\" % test_dir)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.024910688400268555, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + '*.py')\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.014488935470581055, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.DEVNULL)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.3903639316558838, "tests_passed": true, "error": null}}
{"selected_lines": [27, 30, 28, 31, 26, 32, 29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_output('python3 ' + py_script, shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(\"%s*.py\" % test_dir)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.024910688400268555, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 33, 31, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(\"%s/*.py\" % test_dir)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(f'python3 {py_script}', shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 29, 30, 27, 28], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*\", \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.PIPE)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27, 29, 31], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(os.path.abspath(test_dir), \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.015484809875488281, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [27, 31, 33, 30, 28, 26], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call([\"python\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30, 27, 32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(\"%s*.py\" % test_dir)\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.6331582069396973, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 26, 31, 27, 28], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python3\", py_script], capture_output=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 32, 30, 31, 29, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_output('python3 ' + py_script, shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.26073217391967773, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + '*.py')\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.014488935470581055, "tests_passed": true, "error": null}}
{"selected_lines": [31, 26, 30, 27, 29, 28], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.check_output('python3 ' + py_script, shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.015484809875488281, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.02226400375366211, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.3803572654724121, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27, 26, 29, 33], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"/*.py\")\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.02226400375366211, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python3\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.4027979373931885, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [33, 29, 32, 27, 31, 26, 28], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 29, 28, 33, 26, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.run([\"python3\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*\", \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.016191959381103516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(\"python3 \" + py_script, shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.5567841529846191, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 29, 28, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.run([\"python\", py_script], check=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.08087396621704102, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [26, 27, 28, 30, 29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 29, 30, 31, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(args=[py_script, test_dir])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.4103209972381592, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + '*.py')\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.014488935470581055, "tests_passed": true, "error": null}}
{"selected_lines": [26, 27, 31, 29, 30, 33], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.run(['python3', py_script], stdout=subprocess.PIPE)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 27, 31, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{os.path.dirname(test_dir)}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(args=[py_script, test_dir])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.07115912437438965, "tests_passed": false, "error": "PermissionError"}}
{"selected_lines": [32, 29, 27, 33, 26], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 32, 28, 33], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round(end_time - start_time, 3)\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.07202720642089844, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30, 29, 33, 31, 32, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 29, 26, 30, 28], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.run(['python3', py_script], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 29, 33, 30, 32, 28, 26], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round(end_time - start_time, 3)\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27, 30, 32, 33], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = [f for f in glob.glob(f\"{test_dir}/*.py\")]\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call([\"python\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06458234786987305, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.08042716979980469, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27, 29, 31], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 27, 29, 33, 28], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + '*.py')\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round(end_time - start_time, 3)\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python3\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.4027979373931885, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python3\", py_script], capture_output=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.4273488521575928, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.022217988967895508, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.08087396621704102, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30, 26, 31, 28, 29, 27, 32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 31, 30, 33, 26], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(args=[py_script, test_dir])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 30, 32, 33, 28, 31, 29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 27, 26, 33, 28], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"/*.py\")\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 33, 31, 28, 29, 26, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(f'python3 {py_script}', shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06459283828735352, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32, 28, 33, 29, 27, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.02226400375366211, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python', py_script], check=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.08496689796447754, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [28, 31, 33, 29, 30, 27, 32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.run([\"python\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round(end_time - start_time, 3)\n    return execution_times", "compilation_passed": true, "time": 0.08753108978271484, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(\"%s/*.py\" % test_dir)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06641983985900879, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30, 33, 28, 27, 29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(args=[py_script, test_dir])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python', py_script], check=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.08496689796447754, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.02226400375366211, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30, 31, 29, 28], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 31, 28, 30, 32, 26, 29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round((end_time - start_time), 3)\n    return execution_times", "compilation_passed": true, "time": 0.05388498306274414, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [28, 33, 32, 26, 27, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python\", py_script], check=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 31, 26, 27, 28, 33], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*\", \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06459283828735352, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.3803572654724121, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(\"python3 \" + py_script, shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.5567841529846191, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.08042716979980469, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30, 27, 28], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(args=[py_script, test_dir])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [26, 27, 30, 28, 33, 32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round((end_time - start_time), 3)\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.3803572654724121, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.022217988967895508, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.6331582069396973, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 31, 33, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(\"%s/*.py\" % test_dir)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.DEVNULL)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06459283828735352, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32, 33, 29, 31, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"/*.py\")\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python3\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.4027979373931885, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 28, 27, 33], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 30, 27, 33], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(os.path.abspath(test_dir), \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python\", py_script], check=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30, 27, 28, 31, 33, 32, 26], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python3\", py_script], capture_output=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06459283828735352, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.08087396621704102, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30, 29, 27, 33, 28, 26, 31], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.07202720642089844, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python3\", py_script], capture_output=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.4273488521575928, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 29, 33, 31], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.check_call([\"python3\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([\"python3\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.12041282653808594, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [30, 33, 31, 28, 26, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call([\"python\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 29, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{os.path.dirname(test_dir)}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 29, 33, 28, 26, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32, 27, 29, 33, 30, 26], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [31, 26, 27, 28, 32, 29, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.08226513862609863, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [29, 33, 31, 28, 26, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 27, 31, 29, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(\"%s*.py\" % test_dir)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python3\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.4027979373931885, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.02226400375366211, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.07366585731506348, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30, 27, 26, 29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32, 29, 33, 30, 28, 31, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(f'python3 {py_script}', shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.55531907081604, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06459283828735352, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_output('python3 ' + py_script, shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.26073217391967773, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [29, 32, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(args=[py_script, test_dir])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python3\", py_script], capture_output=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.4273488521575928, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.4103209972381592, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 28, 26, 27, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(os.path.abspath(test_dir), \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 27, 26, 28, 29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*\", \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 27, 26], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = [f for f in glob.glob(f\"{test_dir}/*.py\")]\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(f'python3 {py_script}', shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_output('python3 ' + py_script, shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.26073217391967773, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [30, 28, 31, 32, 26, 33, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32, 30, 26, 28, 29, 27, 31], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.PIPE)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 27, 28, 26, 32, 30, 31], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.015484809875488281, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [28, 29, 31, 30, 27, 33], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 33, 26, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.run(['python3', py_script], stdout=subprocess.PIPE)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27, 29, 28, 32, 26], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"/*.py\")\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 27, 33, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_output('python3 ' + py_script, shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_output('python3 ' + py_script, shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.26073217391967773, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06459283828735352, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [28, 31, 27, 30, 26, 33], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 27, 29, 30, 33, 28], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(\"%s/*.py\" % test_dir)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python', py_script], check=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.08226513862609863, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([\"python3\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.12041282653808594, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.3803572654724121, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 27, 28, 31, 33, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.PIPE)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27, 30, 26], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python3\", py_script], capture_output=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [33, 27, 31, 32, 30, 29, 28], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.check_call(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06459283828735352, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [29, 33, 30, 27, 28], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*\", \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06459283828735352, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27, 33, 29, 28, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06459283828735352, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06459283828735352, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [33, 26, 30, 29, 32, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{os.path.dirname(test_dir)}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 28, 26, 33, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python\", py_script], check=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30, 32, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*\", \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [33, 29, 26, 32, 27, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": false, "time": 0.0003287792205810547, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.11458992958068848, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(args=[py_script, test_dir])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.07115912437438965, "tests_passed": false, "error": "PermissionError"}}
{"selected_lines": [30, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = [f for f in glob.glob(f\"{test_dir}/*.py\")]\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.PIPE)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [33, 29, 31, 28, 27, 32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 26, 28, 30, 29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.run(['python3', py_script], stdout=subprocess.PIPE)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 30, 31, 26, 33, 29, 28], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + '*.py')\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call([\"python\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 26, 30, 28, 31, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.run(['python3', py_script], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{os.path.dirname(test_dir)}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0021789073944091797, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(f'python3 {py_script}', shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.55531907081604, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06459283828735352, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27, 31, 32, 33, 26, 30, 28], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(\"%s/*.py\" % test_dir)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 31, 29, 27, 30, 32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + '*.py')\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30, 28, 27, 33], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(\"python3 \" + py_script, shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.07202720642089844, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.02226400375366211, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{os.path.dirname(test_dir)}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.014441967010498047, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [29, 27, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"/*.py\")\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.08042716979980469, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30, 29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(f'python3 {py_script}', shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 28, 30, 33, 27, 32, 26], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 33, 27, 30, 32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{os.path.dirname(test_dir)}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.PIPE)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + '*.py')\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.014488935470581055, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(args=[py_script, test_dir])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.07115912437438965, "tests_passed": false, "error": "PermissionError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.07366585731506348, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.07366585731506348, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.PIPE)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.3870117664337158, "tests_passed": true, "error": null}}
{"selected_lines": [33, 27, 30, 26], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{os.path.dirname(test_dir)}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_output('python3 ' + py_script, shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.08087396621704102, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [31, 27, 28, 26, 33, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_output('python3 ' + py_script, shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 28, 29, 27, 26], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(\"%s*.py\" % test_dir)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python3\", py_script], capture_output=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python3\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.4027979373931885, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python', py_script], check=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.08496689796447754, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [26, 27, 31, 32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"**/*.py\", recursive=True)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round(end_time - start_time, 3)\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.3803572654724121, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06459283828735352, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [28, 32, 27, 33, 26, 31, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 31, 28, 30, 26], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.02226400375366211, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [31, 33, 29, 32, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round((end_time - start_time), 3)\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.08226513862609863, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30, 27, 26], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python3\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": false, "time": 0.0003287792205810547, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"**/*.py\", recursive=True)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.07847809791564941, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [28, 27, 32, 26, 30, 31, 33], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python', py_script], check=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 31, 27, 26, 33, 29, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.check_call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.08226513862609863, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round((end_time - start_time), 3)\n    return execution_times", "compilation_passed": true, "time": 0.05388498306274414, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27, 29, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([\"python3\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [31, 30, 27, 33, 28], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + '*.py')\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(args=[py_script, test_dir])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [33, 31, 29, 26, 30, 28, 32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.run([\"python3\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06459283828735352, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.07202720642089844, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python3\", py_script], capture_output=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.4273488521575928, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round((end_time - start_time), 3)\n    return execution_times", "compilation_passed": true, "time": 0.05388498306274414, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32, 31, 33, 29, 27, 30, 28], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round((end_time - start_time), 3)\n    return execution_times", "compilation_passed": true, "time": 0.05388498306274414, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": false, "time": 0.0003287792205810547, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [28, 30, 31, 26, 32, 29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [28, 33, 29, 30, 26, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.6331582069396973, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06459283828735352, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(os.path.abspath(test_dir), \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0832211971282959, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [26, 31, 30, 28, 27, 29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"/*.py\")\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.run(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 27, 33, 29, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(\"%s*.py\" % test_dir)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.DEVNULL)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.3903639316558838, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.11458992958068848, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.022217988967895508, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.08087396621704102, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [33, 27, 29, 31, 32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = [f for f in glob.glob(f\"{test_dir}/*.py\")]\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round((end_time - start_time), 3)\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 27, 33, 31, 28, 30, 32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [28, 26, 33, 30, 32, 29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.run(['python3', py_script], stdout=subprocess.PIPE)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round(end_time - start_time, 3)\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 32, 26, 31, 29, 28, 33], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = [f for f in glob.glob(f\"{test_dir}/*.py\")]\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round((end_time - start_time), 3)\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.DEVNULL)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.3903639316558838, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.3803572654724121, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(\"%s*.py\" % test_dir)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.024910688400268555, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.02226400375366211, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [28, 30, 31, 33, 32, 29, 26], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.run(['python3', py_script], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 27, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*\")\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.check_call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(\"%s/*.py\" % test_dir)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06641983985900879, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06459283828735352, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30, 26, 27, 31], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(os.path.abspath(test_dir), \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python\", py_script], check=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"**/*.py\", recursive=True)\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.07847809791564941, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30, 27, 31, 33, 32, 26], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30, 27, 31, 29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 28, 33, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*\", \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round((end_time - start_time), 3)\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.022217988967895508, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [26, 32, 31, 27, 33, 29, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.07202720642089844, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + '*.py')\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.014488935470581055, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.02226400375366211, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(f'python3 {py_script}', shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.55531907081604, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [33, 30, 26, 31, 27, 28], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call([\"python\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_output('python3 ' + py_script, shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.26073217391967773, "tests_passed": false, "error": "subprocess.CalledProcessError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.022217988967895508, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [26, 32, 33, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round((end_time - start_time), 3)\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 28, 27, 30, 33, 32, 29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{os.path.dirname(test_dir)}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 26, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(f'python3 {py_script}', shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 26, 31, 30, 27, 29, 28], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{os.path.dirname(test_dir)}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call([\"python\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 26, 32, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = [f for f in glob.glob(f\"{test_dir}/*.py\")]\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call([\"python\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 27, 30, 29, 26, 31, 28], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 28, 32, 27, 33], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.PIPE)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [26, 27, 32, 29, 33], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round(end_time - start_time, 3)\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.PIPE)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.3870117664337158, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.022217988967895508, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06459283828735352, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(\"python3 \" + py_script, shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.5567841529846191, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = [f for f in glob.glob(f\"{test_dir}/*.py\")]\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0640261173248291, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06459283828735352, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.02226400375366211, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([\"python\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.08226513862609863, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [29, 32, 27, 28, 33], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round((end_time - start_time), 3)\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.07202720642089844, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{os.path.dirname(test_dir)}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.014441967010498047, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + '*.py')\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.014488935470581055, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 32, 27, 30, 28, 26], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call([\"python\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(os.path.abspath(test_dir), \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0832211971282959, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(test_dir + \"/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.07202720642089844, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python', py_script], check=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.08496689796447754, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [26, 32, 31, 27, 33], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round((end_time - start_time), 3)\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 33, 28, 32, 31, 26, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06459283828735352, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [26, 29, 33, 28, 30, 31, 27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.PIPE)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06530189514160156, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [27, 30, 32, 31], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.check_call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [26, 32, 27, 29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python', py_script], check=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.08496689796447754, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [26, 28, 29, 32, 30, 33, 31], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.run(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = round((end_time - start_time), 3)\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.4103209972381592, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 29], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.run([\"python\", py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.08087396621704102, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [29, 32, 33, 27, 31, 28, 30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run(['python3', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 28, 31, 30, 27, 33], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{test_dir}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(f'python3 {py_script}', shell=True)\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(f\"{os.path.dirname(test_dir)}/*.py\")\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.014441967010498047, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 29, 28, 27, 33], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for py_script in py_scripts:\n        start_time = time.perf_counter()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.run([sys.executable, py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.02226400375366211, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import subprocess\nimport os\nimport glob\nimport time\n\n\ndef task_func(test_dir):\n    \"\"\"\n    Run all Python codes in a specific directory and return their execution times.\n\n    Parameters:\n    - script_path (str): Path to the directory for Python code(s) to be executed.\n    \n    Returns:\n    dict: A dictionary with the script names as keys and their execution times as values.\n\n    Requirements:\n    - subprocess\n    - os\n    - glob\n    - time\n\n    Example:\n    >>> task_func(\"/mnt/data/mix_files/\")\n    {'script1.py': 0.04103803634643555, \"script2.py\": 5}\n    \"\"\"\n    execution_times = {}\n    py_scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    for py_script in py_scripts:\n        start_time = time.time()\n        subprocess.call(['python', py_script])\n        end_time = time.time()\n        execution_times[os.path.basename(py_script)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.06483912467956543, "tests_passed": false, "error": "FileNotFoundError"}}
