{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.14838814735412598, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [37, 44, 41, 42, 36, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 1.012066125869751, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [40, 43, 41, 37, 39, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.py'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.056777238845825195, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [36, 35, 39, 44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, \"encrypted_files.zip\")\n    with zipfile.ZipFile(zipfile_name, 'w') as encrypted_file_zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39, 40, 35, 41, 36, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 43, 35, 40, 37, 41, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file) = generate_rsa_keys(directory)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file_in:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0459747314453125, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 38, 44, 37, 36, 41, 35, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(rsa.encrypt(f.read(), pub_key)).decode()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.18262982368469238, "tests_passed": false, "error": "OverflowError"}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.21873998641967773, "tests_passed": true, "error": null}}
{"selected_lines": [44, 34, 37, 40, 36, 39, 35, 42, 41, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file, encrypted_files) = generate_rsa_keys(directory)\n    zipfile_name = generate_zipfile(directory, pub_key, priv_key)\n    with zipfile.ZipFile(zipfile_name, 'w') as encrypted_file_zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.14838814735412598, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 43, 41, 44, 40, 38, 39, 42, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_rsa_keys()\n    zipfile_name = 'encrypted_files.zip'\n    with ZipFile(zipfile_name, 'w') as zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 1.012066125869751, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [37, 34, 44, 41, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)  # Generate RSA keys of size 2048 bits.\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [44, 42, 39, 38, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 41, 43, 44, 34, 39, 36, 40, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, _) = rsa.newkeys(2048)\n    zipfile_name = directory + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13207793235778809, "tests_passed": true, "error": null}}
{"selected_lines": [42, 38, 44, 39, 40, 43, 35, 37, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = directory + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as file_in:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 43, 36, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.21873998641967773, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.11566305160522461, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(key_size=512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.011242866516113281, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [40, 36, 43, 38, 44, 35, 37, 42, 41, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = \"encrypted.zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 41, 34, 35, 44, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 41, 44, 42, 39, 34, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 35, 41, 39, 40, 44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = generate_zipfile(directory, pub_key, priv_key)\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and not filename.startswith('.'):\n                with open(filepath, 'rb') as file_to_encrypt:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, pub_key_str, priv_key_str) = generate_rsa_key()\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.010682106018066406, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [37, 39, 35, 44, 43, 42, 36, 41, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w', compression=zipfile.ZIP_DEFLATED) as zipfile_obj:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 43, 41, 40, 38, 44, 39, 42, 37, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = f'file_encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w', zipfile.ZIP_DEFLATED) as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 40, 39, 44, 43, 38, 37, 34, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file) = generate_rsa_keys(directory)\n    zipfile_name = 'files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 39, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file_in:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 35, 37, 38, 34, 40, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 34, 41, 39, 36, 42, 38, 43, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.21873998641967773, "tests_passed": true, "error": null}}
{"selected_lines": [35, 41, 42, 36, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [38, 43, 39, 44, 40, 42, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 37, 36, 40, 43, 39, 42, 38, 34, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = f'{directory}encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w', compression=zipfile.ZIP_DEFLATED) as zipfile_obj:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = \"encrypted.zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.14553594589233398, "tests_passed": true, "error": null}}
{"selected_lines": [37, 42, 40, 43, 41, 34, 36, 44, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipfile_obj:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 42, 36, 34, 40, 35, 44, 38, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, key_size) = generate_rsa_keys(directory, 1024)\n    zipfile_name = f'{directory}encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file_to_encrypt:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.11739230155944824, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipfile_obj:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.1280519962310791, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [42, 44, 39, 36, 37, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'data.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipfile_obj:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.11739230155944824, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [36, 40, 37, 38, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 37, 39, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'data.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.14838814735412598, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [42, 44, 40, 41, 39, 34, 35, 38, 36, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512)\n    zipfile_name = f'file_encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w', compression=zipfile.ZIP_DEFLATED) as zipfile_obj:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2794981002807617, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [43, 40, 41, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 40, 34, 44, 41, 43, 39, 37, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2492508888244629, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [43, 40, 44, 34, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file_in:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.35613369941711426, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = generate_zipfile(directory, pub_key, priv_key)\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.027120113372802734, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [40, 34, 35, 38, 43, 42, 39, 44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = \"encrypted.zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 34, 44, 37, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, _) = rsa.newkeys(2048)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 34, 40, 35, 39, 44, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file, encrypted_files) = generate_rsa_keys(directory)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 35, 34, 42, 38, 44, 37, 36, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, key_size) = generate_rsa_keys(directory, 1024)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 43, 41, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = directory + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2243211269378662, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2492508888244629, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [38, 43, 42, 34, 40, 37, 36, 35, 44, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file) = rsa.newkeys(512, random_prime=False, curve=None)\n    zipfile_name = \"encrypted.zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 43, 36, 38, 41, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = f'{directory}encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w', zipfile.ZIP_DEFLATED) as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read())\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2843489646911621, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and not filename.startswith('.'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.22016406059265137, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 34, 40, 38, 42, 41, 39, 44, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 34, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 38, 35, 34, 42, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = \"encrypted.zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read())\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.24781107902526855, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = generate_zipfile(directory, pub_key, priv_key)\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.027120113372802734, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2794981002807617, "tests_passed": true, "error": null}}
{"selected_lines": [44, 42, 34, 37, 35, 38, 36, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 43, 35, 40, 39, 34, 42, 37, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(key_size=512)\n    zipfile_name = directory + \"/\" + os.path.basename(directory) + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [38, 39, 35, 40, 41, 36, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512)\n    zipfile_name = generate_zipfile(directory, pub_key, priv_key)\n    with zipfile.ZipFile(zipfile_name, 'w') as encrypted_file_zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and not filename.startswith('.'):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(rsa.encrypt(f.read(), pub_key)).decode()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 41, 39, 35, 44, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 40, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, pub_key_str, priv_key_str) = generate_rsa_key()\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 37, 36, 40, 42, 34, 44, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, pub_key_str, priv_key_str) = generate_rsa_key()\n    zipfile_name = f'{directory}encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 35, 37, 34, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.10262703895568848, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2794981002807617, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.py'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.056777238845825195, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [39, 34, 44, 35, 41, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 39, 36, 40, 42, 37, 44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.21873998641967773, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 39, 41, 40, 42, 34, 35, 43, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)  # Generate RSA keys of size 2048 bits.\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 44, 41, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.1418461799621582, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 40, 42, 44, 43, 38, 34, 35, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, key_size) = generate_rsa_keys(directory, 1024)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [37, 41, 34, 40, 38, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 35, 39, 38, 44, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(key_size=512)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 38, 35, 37, 39, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file_in:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 40, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = f'file_encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.21873998641967773, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2492508888244629, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [42, 35, 39, 44, 38, 43, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = os.path.basename(directory) + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.15820598602294922, "tests_passed": true, "error": null}}
{"selected_lines": [43, 36, 41, 39, 44, 37, 34, 38, 35, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024, os.urandom)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipfile:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.1027536392211914, "tests_passed": false, "error": "UnboundLocalError"}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.18260407447814941, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.21873998641967773, "tests_passed": true, "error": null}}
{"selected_lines": [41, 36, 40, 44, 37, 42, 38, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2492508888244629, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [36, 37, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'rsa_encryption_' + str(os.getpid()) + '.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 41, 39, 43, 36, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)  # Generate RSA keys of size 2048 bits.\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 39, 41, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048, os.urandom)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 41, 36, 44, 43, 39, 40, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 43, 41, 44, 42, 39, 37, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'rsa_encryption_' + str(os.getpid()) + '.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 35, 37, 44, 38, 36, 39, 40, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, pub_key_file, priv_key_file) = rsa.newkeys(2048, os.urandom)\n    zipfile_name = directory + \"/\" + os.path.basename(directory) + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file_in:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 43, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 41, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, pub_key_str, priv_key_str) = generate_rsa_key()\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 42, 38, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as file:\n                    data = b64encode(rsa.encrypt(f.read(), pub_key)).decode()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 43, 36, 40, 41, 44, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = directory + \"/\" + os.path.basename(directory) + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 42, 38, 44, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.py'):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 43, 39, 35, 41, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, \"encrypted_files.zip\")\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(rsa.encrypt(f.read(), pub_key)).decode()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 38, 44, 39, 42, 40, 37, 43, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, pub_key_file, priv_key_file) = rsa.newkeys(2048, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 43, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 43, 34, 38, 44, 40, 39, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.11426877975463867, "tests_passed": true, "error": null}}
{"selected_lines": [38, 44, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 38, 41, 37, 36, 44, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(rsa.encrypt(f.read(), pub_key)).decode()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 43, 42, 38, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.py'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 43, 41, 35, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.17524194717407227, "tests_passed": true, "error": null}}
{"selected_lines": [43, 41, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.02889871597290039, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 39, 44, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file) = rsa.newkeys(512, random_prime=False, curve=None)\n    zipfile_name = directory + \"/\" + os.path.basename(directory) + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 35, 36, 39, 42, 34, 43, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = os.path.join(directory, 'data.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and not filename.startswith('.'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 38, 36, 39, 35, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'rsa_encryption_' + str(os.getpid()) + '.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 41, 39, 38, 37, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 37, 40, 44, 42, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.040412187576293945, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 1.012066125869751, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.23538494110107422, "tests_passed": true, "error": null}}
{"selected_lines": [43, 35, 41, 36, 40, 42, 44, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = f'file_encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file_in:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 44, 41, 39, 42, 43, 37, 38, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 36, 43, 35, 40, 42, 38, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.14838814735412598, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [40, 37, 39, 44, 35, 42, 41, 34, 38, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = directory + \"/\" + os.path.basename(directory) + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w', zipfile.ZIP_DEFLATED) as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 34, 41, 38, 37, 35, 43, 39, 44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_rsa_keys()\n    zipfile_name = directory.split('./')[1] + '_keys.zip'\n    with zipfile.ZipFile(zipfile_name, 'w', zipfile.ZIP_DEFLATED) as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [40, 35, 34, 37, 38, 44, 36, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file, encrypted_files) = generate_rsa_keys(directory)\n    zipfile_name = generate_zipfile(directory, pub_key, priv_key)\n    with ZipFile(zipfile_name, 'w') as zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 41, 37, 34, 38, 36, 35, 43, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048, os.urandom)\n    zipfile_name = directory + \"/\" + os.path.basename(directory) + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2794981002807617, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.21873998641967773, "tests_passed": true, "error": null}}
{"selected_lines": [36, 42, 37, 35, 39, 34, 38, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_rsa_keys()\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 35, 36, 44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = f'{directory}encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = directory + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2050948143005371, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 43, 41, 44, 36, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, _) = rsa.newkeys(2048)\n    zipfile_name = directory + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w', zipfile.ZIP_DEFLATED) as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.11426877975463867, "tests_passed": true, "error": null}}
{"selected_lines": [41, 35, 44, 38, 43, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.basename(directory) + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.09193181991577148, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40, 42, 39, 35, 44, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'rsa_encryption_' + str(os.getpid()) + '.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2794981002807617, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 38, 36, 44, 37, 40, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, pub_key_str, priv_key_str) = generate_rsa_key()\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 43, 42, 40, 38, 34, 44, 39, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_keys()\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2794981002807617, "tests_passed": true, "error": null}}
{"selected_lines": [40, 43, 42, 36, 34, 41, 35, 39, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file) = generate_rsa_keys(directory)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 44, 43, 36, 39, 37, 38, 41, 42, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipfile_obj:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 34, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file) = generate_rsa_keys(directory)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w', zipfile.ZIP_DEFLATED) as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 42, 37, 44, 39, 38, 40, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 37, 36, 43, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file) = rsa.newkeys(512, random_prime=False, curve=None)\n    zipfile_name = 'encrypted_files.zip'\n    with os.scandir(directory) as it:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, _) = rsa.newkeys(2048)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 1.011587142944336, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [44, 39, 40, 34, 43, 41, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0459747314453125, "tests_passed": true, "error": null}}
{"selected_lines": [41, 43, 44, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 34, 37, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(key_size=512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 39, 44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 40, 37, 38, 44, 43, 39, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_keys()\n    zipfile_name = generate_zipfile(directory, pub_key, priv_key)\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 39, 35, 41, 38, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as encrypted_file_zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 37, 41, 36, 42, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 41, 39, 40, 44, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read())\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.02715611457824707, "tests_passed": true, "error": null}}
{"selected_lines": [43, 36, 44, 41, 35, 40, 42, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 37, 39, 40, 35, 43, 34, 41, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file, encrypted_files) = generate_rsa_keys(directory)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w', compression=zipfile.ZIP_DEFLATED) as zipfile_obj:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 39, 37, 34, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 44, 39, 41, 37, 35, 42, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w', zipfile.ZIP_DEFLATED) as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [37, 42, 41, 34, 35, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = f'file_encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 43, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.10257291793823242, "tests_passed": true, "error": null}}
{"selected_lines": [42, 34, 36, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2492508888244629, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.23538494110107422, "tests_passed": true, "error": null}}
{"selected_lines": [42, 37, 40, 35, 34, 36, 41, 39, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024, os.urandom)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as encrypted_file_zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.18260407447814941, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 43, 36, 35, 44, 39, 37, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 35, 34, 39, 38, 41, 42, 40, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_rsa_keys()\n    zipfile_name = os.path.join(directory, 'files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 36, 41, 38, 40, 35, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipfile:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 35, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = 'files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 40, 39, 38, 41, 35, 42, 44, 37, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = \"encrypted.zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file_in:\n                    data = b64encode(f.read())\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.11566305160522461, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [41, 39, 40, 36, 38, 35, 44, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(rsa.encrypt(f.read(), pub_key)).decode()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 42, 39, 41, 40, 35, 44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 35, 40, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = generate_zipfile(directory, pub_key, priv_key)\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.11566305160522461, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [43, 38, 39, 35, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = directory.split('./')[1] + '_keys.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2492508888244629, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 1.0123100280761719, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [42, 37, 41, 40, 36, 44, 35, 43, 39, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, \"encrypted_files.zip\")\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 44, 36, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w', zipfile.ZIP_DEFLATED) as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.11426877975463867, "tests_passed": true, "error": null}}
{"selected_lines": [40, 43, 42, 34, 37, 35, 39, 44, 38, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 43, 44, 37, 38, 39, 36, 40, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024, os.urandom)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 36, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, key_size) = generate_rsa_keys(directory, 1024)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 39, 43, 41, 34, 40, 42, 44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 39, 36, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = directory.split('./')[1] + '_keys.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipfile:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.21873998641967773, "tests_passed": true, "error": null}}
{"selected_lines": [38, 39, 43, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 42, 43, 38, 41, 39, 36, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w', zipfile.ZIP_DEFLATED) as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 42, 39, 40, 37, 41, 44, 38, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)  # Generate RSA keys of size 2048 bits.\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 1.0111322402954102, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [41, 34, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(key_size=512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read())\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 41, 35, 44, 37, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 44, 42, 34, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_rsa_keys()\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file_in:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 41, 37, 34, 40, 44, 43, 35, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, pub_key_file, priv_key_file) = rsa.newkeys(2048, os.urandom)\n    zipfile_name = os.path.join(directory, \"encrypted_files.zip\")\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 42, 43, 44, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 35, 44, 41, 38, 39, 36, 34, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file) = rsa.newkeys(512, random_prime=False, curve=None)\n    zipfile_name = 'files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipfile:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 43, 37, 36, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 41, 44, 35, 34, 38, 42, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.1418461799621582, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.272097110748291, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 1.0263209342956543, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2492508888244629, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_rsa_keys()\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.01036691665649414, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [42, 34, 38, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as encrypted_file_zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, _) = rsa.newkeys(2048)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 1.011587142944336, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [39, 38, 40, 43, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file) = generate_rsa_keys(directory)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 36, 38, 37, 41, 43, 40, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_rsa_keys()\n    zipfile_name = 'encrypted_files.zip'\n    with ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 40, 36, 43, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'rsa_encryption_' + str(os.getpid()) + '.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.05724501609802246, "tests_passed": true, "error": null}}
{"selected_lines": [36, 42, 35, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'data.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 40, 43, 34, 36, 35, 38, 44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048, os.urandom)\n    zipfile_name = generate_zipfile(directory, pub_key, priv_key)\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file_to_encrypt:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 40, 41, 39, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read())\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_keys()\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.011626005172729492, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2492508888244629, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [42, 34, 43, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 41, 39, 35, 37, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(key_size=512)\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as encrypted_file_zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 42, 39, 43, 37, 35, 38, 34, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.03222489356994629, "tests_passed": true, "error": null}}
{"selected_lines": [34, 44, 42, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 1.0123100280761719, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [41, 37, 36, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(rsa.encrypt(f.read(), pub_key)).decode()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 42, 34, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_keys()\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.21873998641967773, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.11294913291931152, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.21873998641967773, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file_to_encrypt:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.09763693809509277, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [43, 36, 34, 38, 39, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2017831802368164, "tests_passed": true, "error": null}}
{"selected_lines": [40, 43, 36, 42, 44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 42, 36, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file) = rsa.newkeys(512, random_prime=False, curve=None)\n    zipfile_name = 'encrypted_files.zip'\n    with ZipFile(zipfile_name, 'w') as zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 42, 37, 43, 35, 38, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = directory + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 37, 44, 36, 42, 35, 43, 38, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = directory + \"/\" + os.path.basename(directory) + \".zip\"\n    with ZipFile(zipfile_name, 'w') as zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 37, 41, 36, 43, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = os.path.join(directory, 'data.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.272097110748291, "tests_passed": true, "error": null}}
{"selected_lines": [42, 34, 36, 44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_rsa_keys()\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 35, 40, 42, 36, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024, os.urandom)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [34, 44, 38, 43, 42, 41, 36, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 44, 43, 36, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = directory + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 42, 40, 35, 38, 39, 44, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.py'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2492508888244629, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35, 37, 40, 43, 34, 36, 38, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, _) = rsa.newkeys(2048)\n    zipfile_name = generate_zipfile(directory, pub_key, priv_key)\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.1418461799621582, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'data.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0355381965637207, "tests_passed": true, "error": null}}
{"selected_lines": [43, 41, 37, 36, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with os.scandir(directory) as it:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.06711697578430176, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [36, 40, 41, 37, 34, 44, 42, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 36, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, \"encrypted_files.zip\")\n    with ZipFile(zipfile_name, 'w') as zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 40, 35, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.basename(directory) + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w', zipfile.ZIP_DEFLATED) as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 41, 36, 43, 34, 35, 44, 40, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = directory.split('./')[1] + '_keys.zip'\n    with os.scandir(directory) as it:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.272097110748291, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 1.012066125869751, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [40, 41, 36, 44, 34, 43, 42, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = b64encode(rsa.encrypt(f.read(), pub_key)).decode()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 41, 34, 40, 35, 43, 38, 36, 39, 44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 34, 38, 42, 40, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, _) = rsa.newkeys(2048)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as encrypted_file_zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.py'):\n                with open(filepath, 'rb') as file_to_encrypt:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.21873998641967773, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 35, 39, 42, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [43, 35, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = directory + \"/\" + os.path.basename(directory) + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 35, 36, 37, 34, 41, 38, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = \"encrypted.zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 39, 43, 36, 44, 38, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 41, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_rsa_keys()\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 39, 37, 38, 34, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w', compression=zipfile.ZIP_DEFLATED) as zipfile_obj:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2492508888244629, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [44, 37, 42, 39, 34, 38, 43, 36, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = f'{directory}encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipfile_obj:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 43, 41, 36, 39, 40, 35, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)  # Generate RSA keys of size 2048 bits.\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 37, 39, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 44, 39, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and not filename.startswith('.'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 34, 40, 43, 36, 44, 41, 35, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 42, 40, 35, 36, 44, 43, 39, 37, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, _) = rsa.newkeys(2048)\n    zipfile_name = os.path.join(directory, 'rsa_encryption_' + str(os.getpid()) + '.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.py'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2492508888244629, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [44, 35, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.030755281448364258, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 41, 38, 36, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34, 41, 39, 44, 43, 42, 38, 36, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipfile_obj:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 1.012066125869751, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [44, 40, 34, 43, 38, 41, 35, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = directory + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file_to_encrypt:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 42, 34, 39, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and not filename.startswith('.'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.014102935791015625, "tests_passed": true, "error": null}}
{"selected_lines": [38, 43, 35, 44, 42, 34, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.19289588928222656, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43, 44, 38, 35, 41, 34, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 38, 40, 34, 41, 39, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file, encrypted_files) = generate_rsa_keys(directory)\n    zipfile_name = \"encrypted.zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.11739230155944824, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_keys()\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.011626005172729492, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [42, 43, 36, 40, 35, 37, 44, 39, 34, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048, os.urandom)\n    zipfile_name = directory + \".zip\"\n    with os.scandir(directory) as it:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 36, 44, 43, 34, 37, 41, 38, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024, os.urandom)\n    zipfile_name = directory.split('./')[1] + '_keys.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and not filename.startswith('.'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2274472713470459, "tests_passed": true, "error": null}}
{"selected_lines": [43, 41, 42, 37, 36, 44, 39, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w', zipfile.ZIP_DEFLATED) as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 35, 43, 34, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = os.path.join(directory, \"encrypted_files.zip\")\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 44, 35, 40, 37, 42, 41, 34, 43, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file) = generate_rsa_keys(directory)\n    zipfile_name = 'files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w', compression=zipfile.ZIP_DEFLATED) as zipfile_obj:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 36, 37, 40, 42, 35, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.basename(directory) + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 43, 41, 38, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file) = generate_rsa_keys(directory)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 35, 44, 41, 34, 40, 38, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = os.path.join(directory, 'files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as encrypted_file_zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(key_size=512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.02715611457824707, "tests_passed": true, "error": null}}
{"selected_lines": [34, 44, 39, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 43, 40, 38, 34, 41, 44, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 35, 39, 43, 41, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, pub_key_file, priv_key_file) = rsa.newkeys(2048, os.urandom)\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as encrypted_file_zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 40, 38, 35, 36, 42, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'data.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0355381965637207, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [35, 42, 43, 39, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 35, 39, 42, 43, 38, 37, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.py'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 40, 37, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file_to_encrypt:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 43, 42, 37, 36, 39, 40, 38, 44, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_keys()\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 44, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 43, 42, 39, 38, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 42, 35, 40, 36, 34, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.basename(directory) + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 44, 34, 38, 41, 40, 39, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = directory + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 41, 34, 35, 36, 44, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048, os.urandom)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0459747314453125, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2794981002807617, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [36, 43, 35, 37, 44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipfile_obj:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 44, 40, 41, 35, 38, 36, 43, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.21873998641967773, "tests_passed": true, "error": null}}
{"selected_lines": [43, 37, 39, 35, 36, 40, 42, 34, 44, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file) = rsa.newkeys(512, random_prime=False, curve=None)\n    zipfile_name = os.path.join(directory, 'rsa_encryption_' + str(os.getpid()) + '.zip')\n    with os.scandir(directory) as it:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 42, 40, 44, 36, 35, 43, 38, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.21873998641967773, "tests_passed": true, "error": null}}
{"selected_lines": [38, 43, 37, 35, 41, 44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.024895906448364258, "tests_passed": true, "error": null}}
{"selected_lines": [44, 35, 37, 34, 40, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, pub_key_file, priv_key_file) = rsa.newkeys(2048, os.urandom)\n    zipfile_name = 'files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2794981002807617, "tests_passed": true, "error": null}}
{"selected_lines": [44, 34, 39, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file) = generate_rsa_keys(directory)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 40, 34, 37, 38, 42, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file, encrypted_files) = generate_rsa_keys(directory)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 42, 36, 41, 39, 44, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = directory + \"/\" + os.path.basename(directory) + \".zip\"\n    with ZipFile(zipfile_name, 'w') as zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as file_to_encrypt:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 37, 35, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w', zipfile.ZIP_DEFLATED) as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, key_size) = generate_rsa_keys(directory, 1024)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.015753984451293945, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [40, 36, 35, 41, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w', zipfile.ZIP_DEFLATED) as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.04652118682861328, "tests_passed": true, "error": null}}
{"selected_lines": [41, 36, 37, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file) = rsa.newkeys(512, random_prime=False, curve=None)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.01134181022644043, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [38, 34, 43, 37, 42, 36, 41, 40, 44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read())\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 43, 38, 39, 42, 40, 44, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'files.zip'\n    with ZipFile(zipfile_name, 'w') as zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 43, 40, 44, 42, 36, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, pub_key_str, priv_key_str) = generate_rsa_key()\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 39, 37, 35, 41, 44, 38, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'rsa_encryption_' + str(os.getpid()) + '.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.272097110748291, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 37, 34, 38, 39, 44, 41, 36, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(key_size=512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w', compression=zipfile.ZIP_DEFLATED) as zipfile_obj:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 38, 34, 41, 39, 35, 42, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and not filename.startswith('.'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.17971396446228027, "tests_passed": true, "error": null}}
{"selected_lines": [39, 38, 34, 40, 36, 41, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, pub_key_str, priv_key_str) = generate_rsa_key()\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w', zipfile.ZIP_DEFLATED) as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 36, 34, 42, 37, 41, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 43, 37, 34, 42, 39, 36, 38, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_keys()\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w', zipfile.ZIP_DEFLATED) as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 37, 41, 36, 42, 35, 40, 39, 34, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)  # Generate RSA keys of size 2048 bits.\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w', compression=zipfile.ZIP_DEFLATED) as zipfile_obj:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file_in:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 44, 42, 41, 43, 36, 38, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = directory + \"/\" + os.path.basename(directory) + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, key_size) = generate_rsa_keys(directory, 1024)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.015753984451293945, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35, 34, 39, 43, 38, 36, 42, 40, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, pub_key_str, priv_key_str) = generate_rsa_key()\n    zipfile_name = generate_zipfile(directory, pub_key, priv_key)\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as file_in:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 41, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_keys()\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 36, 35, 43, 40, 44, 41, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = generate_zipfile(directory, pub_key, priv_key)\n    with zipfile.ZipFile(zipfile_name, 'w') as zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 34, 40, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 41, 37, 44, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [44, 42, 40, 38, 43, 35, 39, 36, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 41, 43, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2794981002807617, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 39, 44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 38, 39, 43, 44, 40, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 43, 38, 34, 39, 40, 44, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.010889053344726562, "tests_passed": true, "error": null}}
{"selected_lines": [42, 35, 37, 43, 44, 34, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, \"encrypted_files.zip\")\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.026023149490356445, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 42, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file_to_encrypt:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = directory.split('./')[1] + '_keys.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipfile:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [44, 43, 34, 41, 35, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024, os.urandom)\n    zipfile_name = os.path.join(directory, 'rsa_encryption_' + str(os.getpid()) + '.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 42, 36, 35, 41, 37, 39, 43, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipfile:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.02715611457824707, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 38, 40, 44, 43, 37, 34, 41, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.basename(directory) + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.py'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 43, 44, 42, 35, 36, 37, 39, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file, encrypted_files) = generate_rsa_keys(directory)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.21873998641967773, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 39, 34, 44, 42, 40, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, pub_key_file, priv_key_file) = rsa.newkeys(2048, os.urandom)\n    zipfile_name = os.path.join(directory, \"encrypted_files.zip\")\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 36, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [39, 35, 40, 44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 1.0123100280761719, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.11426877975463867, "tests_passed": true, "error": null}}
{"selected_lines": [44, 42, 34, 39, 36, 38, 35, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, _) = rsa.newkeys(2048)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 35, 42, 37, 44, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = \"encrypted.zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 38, 44, 42, 36, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = directory + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 36, 43, 42, 40, 41, 38, 34, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_rsa_keys()\n    zipfile_name = 'files.zip'\n    with ZipFile(zipfile_name, 'w') as zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 35, 38, 34, 40, 44, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2794981002807617, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = f'{directory}encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2929041385650635, "tests_passed": true, "error": null}}
{"selected_lines": [42, 40, 34, 41, 39, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 34, 42, 35, 44, 37, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512)\n    zipfile_name = 'files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file_in:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 43, 40, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file_to_encrypt:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [37, 44, 41, 34, 38, 36, 42, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file_in:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 44, 35, 37, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = directory.split('./')[1] + '_keys.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as encrypted_file_zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 43, 44, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.06558609008789062, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2492508888244629, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [42, 43, 37, 36, 41, 44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w', zipfile.ZIP_DEFLATED) as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(rsa.encrypt(f.read(), pub_key)).decode()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 38, 34, 35, 39, 44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = generate_zipfile(directory, pub_key, priv_key)\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 44, 38, 34, 41, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file, encrypted_files) = generate_rsa_keys(directory)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.018889904022216797, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [41, 44, 38, 40, 43, 37, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 44, 41, 38, 40, 39, 43, 36, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file) = rsa.newkeys(512, random_prime=False, curve=None)\n    zipfile_name = os.path.join(directory, 'files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 42, 34, 37, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file, encrypted_files) = generate_rsa_keys(directory)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 37, 35, 44, 39, 41, 43, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = b64encode(rsa.encrypt(f.read(), pub_key)).decode()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 40, 36, 39, 41, 35, 44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_rsa_keys()\n    zipfile_name = os.path.basename(directory) + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 39, 41, 36, 40, 35, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_rsa_keys()\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 44, 41, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file_to_encrypt:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 42, 41, 40, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = f'file_encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2794981002807617, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 34, 41, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file_to_encrypt:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39, 36, 43, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 37, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = f'{directory}encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.10797309875488281, "tests_passed": true, "error": null}}
{"selected_lines": [34, 44, 36, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, _) = rsa.newkeys(2048)\n    zipfile_name = \"encrypted.zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zipfile:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 41, 38, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'rsa_encryption_' + str(os.getpid()) + '.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.08115100860595703, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)  # Generate RSA keys of size 2048 bits.\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 1.0111322402954102, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [38, 43, 35, 37, 40, 41, 44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.09183907508850098, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 37, 38, 40, 34, 44, 35, 42, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512)\n    zipfile_name = \"encrypted.zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with os.scandir(directory) as it:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.06711697578430176, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [38, 35, 43, 37, 36, 34, 39, 44, 41, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = f'{directory}encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and not filename.startswith('.'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 37, 43, 35, 41, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048, os.urandom)\n    zipfile_name = directory + \"/\" + os.path.basename(directory) + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 43, 42, 39, 40, 44, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = \"encrypted.zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.14019107818603516, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [44, 36, 37, 39, 38, 41, 42, 43, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w', compression=zipfile.ZIP_DEFLATED) as zipfile_obj:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 40, 35, 34, 41, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, pub_key_file, priv_key_file) = rsa.newkeys(2048, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44, 37, 41, 40, 36, 34, 35, 38, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file, encrypted_files) = generate_rsa_keys(directory)\n    zipfile_name = os.path.join(directory, 'data.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.21873998641967773, "tests_passed": true, "error": null}}
{"selected_lines": [43, 36, 39, 40, 41, 37, 38, 35, 44, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 41, 36, 35, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 43, 39, 41, 37, 44, 38, 34, 40, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_rsa_keys()\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with ZipFile(zipfile_name, 'w') as zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 43, 37, 42, 36, 40, 44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 41, 35, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 40, 34, 43, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file, encrypted_files) = generate_rsa_keys(directory)\n    zipfile_name = directory + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = \"encrypted.zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.14553594589233398, "tests_passed": true, "error": null}}
{"selected_lines": [37, 44, 34, 39, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024, os.urandom)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2794981002807617, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.11426877975463867, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, pub_key_str, priv_key_str) = generate_rsa_key()\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.010682106018066406, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [42, 40, 44, 41, 35, 34, 38, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 35, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.14838814735412598, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [42, 35, 36, 39, 43, 41, 37, 44, 38, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(key_size=512)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 34, 44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(key_size=512)\n    zipfile_name = 'encrypted_files.zip'\n    with ZipFile(zipfile_name, 'w') as zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 37, 41, 35, 44, 36, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w', zipfile.ZIP_DEFLATED) as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.07867598533630371, "tests_passed": true, "error": null}}
{"selected_lines": [44, 34, 40, 43, 35, 37, 41, 42, 36, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = directory + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as encrypted_file_zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 34, 43, 39, 42, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(key_size=512)\n    zipfile_name = directory + \"/\" + os.path.basename(directory) + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 42, 39, 37, 36, 44, 34, 35, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024, os.urandom)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipfile:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file_to_encrypt:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 41, 39, 44, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = f'{directory}encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 44, 39, 35, 38, 41, 42, 43, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = b64encode(f.read())\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 43, 44, 40, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 38, 39, 35, 34, 36, 37, 40, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipfile:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 35, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [39, 36, 42, 34, 41, 38, 37, 44, 43, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file) = rsa.newkeys(512, random_prime=False, curve=None)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 40, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 43, 35, 44, 38, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file_in:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 34, 38, 37, 42, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048, os.urandom)\n    zipfile_name = os.path.join(directory, 'files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 44, 43, 35, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 35, 44, 37, 38, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w', compression=zipfile.ZIP_DEFLATED) as zipfile_obj:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2492508888244629, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [40, 37, 39, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and not filename.startswith('.'):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 36, 38, 42, 44, 41, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w', compression=zipfile.ZIP_DEFLATED) as zipfile_obj:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 39, 38, 40, 43, 35, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(key_size=512)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 41, 44, 36, 39, 34, 40, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w', zipfile.ZIP_DEFLATED) as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = directory + \"/\" + os.path.basename(directory) + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0738518238067627, "tests_passed": true, "error": null}}
{"selected_lines": [40, 43, 36, 41, 34, 44, 35, 39, 38, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512)\n    zipfile_name = 'files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and not filename.startswith('.'):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 37, 39, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 36, 40, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_rsa_keys()\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 34, 38, 42, 36, 39, 43, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43, 34, 35, 44, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 44, 41, 36, 37, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 42, 35, 44, 43, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 40, 44, 42, 35, 43, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)  # Generate RSA keys of size 2048 bits.\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 35, 42, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = 'files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 1.012066125869751, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.21873998641967773, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 42, 37, 41, 44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 44, 43, 41, 39, 38, 34, 36, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = os.path.join(directory, 'rsa_encryption_' + str(os.getpid()) + '.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file_in:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 41, 39, 34, 35, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = f'file_encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 43, 39, 37, 34, 41, 40, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file) = generate_rsa_keys(directory)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 44, 41, 36, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 43, 35, 36, 40, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 39, 38, 42, 43, 40, 44, 36, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = directory.split('./')[1] + '_keys.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 37, 43, 41, 40, 36, 35, 34, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024, os.urandom)\n    zipfile_name = 'files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34, 42, 39, 37, 44, 41, 43, 36, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 36, 40, 35, 37, 44, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = f'{directory}encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file_in:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 37, 44, 42, 38, 36, 40, 34, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and not filename.startswith('.'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 39, 42, 43, 34, 36, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_rsa_keys()\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as file_to_encrypt:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 34, 39, 43, 44, 41, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(key_size=512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 42, 35, 40, 38, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = \"encrypted.zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as encrypted_file_zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.basename(directory) + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.21068596839904785, "tests_passed": true, "error": null}}
{"selected_lines": [38, 42, 40, 41, 43, 44, 39, 34, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = b64encode(f.read())\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 44, 35, 34, 36, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)  # Generate RSA keys of size 2048 bits.\n    zipfile_name = f'file_encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as encrypted_file_zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 39, 41, 35, 42, 43, 44, 36, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 44, 38, 41, 39, 43, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 43, 41, 40, 42, 35, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = os.path.join(directory, 'files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = directory.split('./')[1] + '_keys.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.047559261322021484, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [41, 35, 36, 44, 39, 40, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.1040031909942627, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file) = generate_rsa_keys(directory)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 41, 34, 40, 36, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file, encrypted_files) = generate_rsa_keys(directory)\n    zipfile_name = 'encrypted.zip'\n    with ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file_to_encrypt:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 37, 41, 38, 40, 36, 43, 34, 44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file) = generate_rsa_keys(directory)\n    zipfile_name = \"encrypted.zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 44, 40, 35, 42, 34, 36, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [42, 38, 35, 44, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'data.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.06683516502380371, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file_to_encrypt:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.09763693809509277, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [36, 34, 40, 42, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, pub_key_file, priv_key_file) = rsa.newkeys(2048, os.urandom)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 38, 35, 37, 44, 39, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(key_size=512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 36, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = directory + \"/\" + os.path.basename(directory) + \".zip\"\n    with os.scandir(directory) as it:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_rsa_keys()\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.01036691665649414, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [34, 37, 40, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)  # Generate RSA keys of size 2048 bits.\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file_to_encrypt:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 35, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 43, 34, 40, 37, 36, 42, 38, 44, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, pub_key_str, priv_key_str) = generate_rsa_key()\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 41, 39, 34, 43, 38, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_rsa_keys()\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(key_size=512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.011242866516113281, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [39, 41, 42, 36, 34, 40, 35, 44, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024, os.urandom)\n    zipfile_name = directory.split('./')[1] + '_keys.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = \"encrypted.zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.14553594589233398, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2492508888244629, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [37, 34, 40, 41, 39, 35, 43, 42, 38, 44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = generate_zipfile(directory, pub_key, priv_key)\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.272097110748291, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 38, 41, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file_in:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.14919018745422363, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [34, 43, 37, 39, 36, 41, 44, 42, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, pub_key_str, priv_key_str) = generate_rsa_key()\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2794981002807617, "tests_passed": true, "error": null}}
{"selected_lines": [42, 40, 44, 35, 39, 41, 38, 37, 36, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file) = generate_rsa_keys(directory)\n    zipfile_name = os.path.join(directory, 'files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w', compression=zipfile.ZIP_DEFLATED) as zipfile_obj:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_rsa_keys()\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.01036691665649414, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [36, 44, 42, 35, 39, 34, 41, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = generate_zipfile(directory, pub_key, priv_key)\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, key_size) = generate_rsa_keys(directory, 1024)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.015753984451293945, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [44, 35, 38, 42, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = generate_zipfile(directory, pub_key, priv_key)\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 44, 38, 40, 35, 41, 37, 34, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w', zipfile.ZIP_DEFLATED) as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2794981002807617, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2794981002807617, "tests_passed": true, "error": null}}
{"selected_lines": [36, 44, 39, 43, 41, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 43, 35, 36, 38, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file) = generate_rsa_keys(directory)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 44, 41, 34, 35, 40, 36, 43, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512)\n    zipfile_name = 'files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.21873998641967773, "tests_passed": true, "error": null}}
{"selected_lines": [41, 38, 40, 37, 34, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file) = rsa.newkeys(512, random_prime=False, curve=None)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.11426877975463867, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [42, 40, 38, 36, 44, 43, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 44, 40, 35, 39, 37, 42, 38, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.py'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.21873998641967773, "tests_passed": true, "error": null}}
{"selected_lines": [43, 36, 44, 35, 38, 41, 40, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.py'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 39, 40, 36, 41, 38, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read())\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 44, 35, 36, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [40, 35, 36, 38, 39, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w', zipfile.ZIP_DEFLATED) as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 40, 42, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 44, 43, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 41, 34, 40, 36, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = \"encrypted.zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.14553594589233398, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 36, 39, 43, 38, 40, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file) = generate_rsa_keys(directory)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file, encrypted_files) = generate_rsa_keys(directory)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.018889904022216797, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [39, 35, 34, 42, 36, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_keys()\n    zipfile_name = generate_zipfile(directory, pub_key, priv_key)\n    with zipfile.ZipFile(zipfile_name, 'w') as zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.14838814735412598, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 34, 36, 38, 42, 44, 39, 43, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = os.path.basename(directory) + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 36, 37, 43, 40, 38, 42, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file_in:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 41, 36, 37, 40, 38, 42, 44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = directory + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 39, 37, 42, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 41, 44, 43, 38, 37, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = directory.split('./')[1] + '_keys.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'data.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0355381965637207, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.11426877975463867, "tests_passed": true, "error": null}}
{"selected_lines": [37, 41, 43, 40, 44, 34, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 37, 36, 39, 34, 40, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, key_size) = generate_rsa_keys(directory, 1024)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 39, 37, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, \"encrypted_files.zip\")\n    with zipfile.ZipFile(zipfile_name, 'w') as encrypted_file_zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 40, 37, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = \"encrypted.zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.14553594589233398, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 37, 34, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, pub_key_file, priv_key_file) = rsa.newkeys(2048, os.urandom)\n    zipfile_name = directory + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w', zipfile.ZIP_DEFLATED) as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 37, 42, 34, 35, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, _) = rsa.newkeys(2048)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w', compression=zipfile.ZIP_DEFLATED) as zipfile_obj:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 37, 43, 41, 35, 34, 40, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file) = generate_rsa_keys(directory)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.01834392547607422, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [37, 34, 44, 39, 38, 35, 40, 42, 41, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512)\n    zipfile_name = generate_zipfile(directory, pub_key, priv_key)\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.23538494110107422, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 40, 38, 44, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = generate_zipfile(directory, pub_key, priv_key)\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [44, 37, 35, 38, 36, 40, 43, 39, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = generate_zipfile(directory, pub_key, priv_key)\n    with ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 44, 35, 36, 39, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_rsa_keys()\n    zipfile_name = os.path.join(directory, 'rsa_encryption_' + str(os.getpid()) + '.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipfile:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 44, 39, 43, 41, 40, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with os.scandir(directory) as it:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.py'):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 36, 44, 34, 38, 40, 37, 41, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_rsa_keys()\n    zipfile_name = os.path.join(directory, \"encrypted_files.zip\")\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file_in:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [39, 44, 43, 40, 42, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [36, 44, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 42, 35, 36, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.21873998641967773, "tests_passed": true, "error": null}}
{"selected_lines": [39, 43, 44, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 43, 41, 38, 35, 40, 39, 34, 36, 44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = directory + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 41, 43, 39, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 35, 38, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = directory.split('./')[1] + '_keys.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 44, 37, 43, 34, 36, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 44, 34, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 36, 43, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 41, 44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.35613369941711426, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [41, 43, 44, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.06558609008789062, "tests_passed": true, "error": null}}
{"selected_lines": [40, 35, 42, 34, 39, 38, 43, 41, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file, encrypted_files) = generate_rsa_keys(directory)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 1.0123100280761719, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [43, 34, 36, 38, 37, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = f'file_encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 34, 42, 41, 43, 44, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 35, 44, 42, 34, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_rsa_keys()\n    zipfile_name = \"encrypted.zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [43, 34, 44, 41, 37, 39, 35, 36, 40, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, _) = rsa.newkeys(2048)\n    zipfile_name = directory.split('./')[1] + '_keys.zip'\n    with ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13207793235778809, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 1.0123100280761719, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [42, 36, 40, 39, 37, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 44, 43, 39, 38, 40, 36, 41, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 41, 35, 40, 43, 42, 34, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 34, 43, 38, 40, 41, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = \"encrypted.zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 40, 41, 39, 37, 34, 36, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(key_size=512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(rsa.encrypt(f.read(), pub_key)).decode()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.18262982368469238, "tests_passed": false, "error": "OverflowError"}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.21873998641967773, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 36, 37, 41, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, _) = rsa.newkeys(2048)\n    zipfile_name = 'encrypted.zip'\n    with os.scandir(directory) as it:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 38, 42, 34, 39, 40, 35, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = directory + \"/\" + os.path.basename(directory) + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 35, 42, 34, 44, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048, os.urandom)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 38, 36, 34, 43, 44, 41, 40, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, pub_key_str, priv_key_str) = generate_rsa_key()\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with ZipFile(zipfile_name, 'w') as zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [42, 34, 43, 36, 37, 40, 38, 44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_keys()\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 41, 37, 43, 39, 44, 35, 34, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(key_size=512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 42, 34, 40, 43, 38, 39, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file) = rsa.newkeys(512, random_prime=False, curve=None)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0459747314453125, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 1.0263209342956543, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [36, 39, 35, 38, 40, 44, 42, 34, 41, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, _) = rsa.newkeys(2048)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 37, 43, 44, 39, 36, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, _) = rsa.newkeys(2048)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w', zipfile.ZIP_DEFLATED) as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 34, 41, 43, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)  # Generate RSA keys of size 2048 bits.\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 35, 34, 43, 38, 42, 44, 39, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, pub_key_str, priv_key_str) = generate_rsa_key()\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.010682106018066406, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [34, 37, 42, 44, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(rsa.encrypt(f.read(), pub_key)).decode()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 35, 39, 43, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, _) = rsa.newkeys(2048)\n    zipfile_name = os.path.basename(directory) + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 43, 44, 38, 41, 35, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, \"encrypted_files.zip\")\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 40, 34, 37, 39, 42, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 43, 40, 35, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = directory + \"/\" + os.path.basename(directory) + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 41, 39, 34, 40, 43, 42, 35, 44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(key_size=512)\n    zipfile_name = directory + \"/\" + os.path.basename(directory) + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2794981002807617, "tests_passed": true, "error": null}}
{"selected_lines": [42, 34, 37, 39, 35, 36, 43, 44, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_keys()\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file_to_encrypt:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 37, 39, 34, 42, 43, 41, 35, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = generate_zipfile(directory, pub_key, priv_key)\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [41, 34, 44, 40, 36, 42, 39, 43, 37, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_rsa_keys()\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 36, 43, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, key_size) = generate_rsa_keys(directory, 1024)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [43, 36, 42, 37, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 34, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [38, 44, 35, 42, 36, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.21873998641967773, "tests_passed": true, "error": null}}
{"selected_lines": [41, 40, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file_to_encrypt:\n                    data = b64encode(f.read())\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 35, 39, 36, 34, 41, 40, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 41, 34, 44, 37, 42, 39, 35, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048, os.urandom)\n    zipfile_name = generate_zipfile(directory, pub_key, priv_key)\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 34, 41, 43, 42, 35, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_rsa_keys()\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 34, 35, 44, 40, 41, 36, 39, 37, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file) = rsa.newkeys(512, random_prime=False, curve=None)\n    zipfile_name = f'{directory}encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 38, 36, 39, 34, 41, 44, 42, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with os.scandir(directory) as it:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.21873998641967773, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.14838814735412598, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [34, 36, 43, 42, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 44, 34, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, pub_key_str, priv_key_str) = generate_rsa_key()\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 36, 34, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_rsa_keys()\n    zipfile_name = os.path.basename(directory) + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 36, 39, 34, 41, 43, 38, 35, 44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 35, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 41, 40, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2492508888244629, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [34, 37, 36, 44, 38, 35, 42, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w', compression=zipfile.ZIP_DEFLATED) as zipfile_obj:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 37, 41, 35, 38, 34, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 41, 35, 38, 36, 34, 44, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = \"encrypted.zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 44, 40, 39, 43, 38, 35, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'rsa_encryption_' + str(os.getpid()) + '.zip')\n    with os.scandir(directory) as it:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file_to_encrypt:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 40, 39, 38, 41, 36, 37, 42, 44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with ZipFile(zipfile_name, 'w') as zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.21873998641967773, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 40, 36, 39, 43, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512)\n    zipfile_name = generate_zipfile(directory, pub_key, priv_key)\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.272097110748291, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 35, 44, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.26410388946533203, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 34, 39, 40, 44, 42, 41, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file, encrypted_files) = generate_rsa_keys(directory)\n    zipfile_name = os.path.basename(directory) + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 36, 41, 38, 37, 42, 43, 44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_rsa_keys()\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.01036691665649414, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35, 34, 38, 41, 36, 37, 44, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, _) = rsa.newkeys(2048)\n    zipfile_name = os.path.basename(directory) + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 43, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 37, 43, 42, 36, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w', zipfile.ZIP_DEFLATED) as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.1334390640258789, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.21873998641967773, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = f'file_encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.29158520698547363, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 37, 40, 42, 39, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, pub_key_file, priv_key_file) = rsa.newkeys(2048, os.urandom)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 41, 39, 38, 35, 42, 37, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = generate_zipfile(directory, pub_key, priv_key)\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 1.0263209342956543, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [44, 39, 43, 38, 35, 42, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2100999355316162, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 42, 43, 34, 41, 40, 44, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file) = rsa.newkeys(512, random_prime=False, curve=None)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2492508888244629, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35, 43, 42, 40, 36, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 40, 37, 34, 38, 42, 35, 36, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipfile_obj:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file_in:\n                    data = b64encode(f.read())\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 42, 37, 44, 36, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file) = generate_rsa_keys(directory)\n    zipfile_name = os.path.join(directory, \"encrypted_files.zip\")\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 44, 42, 40, 37, 34, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file_in:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 35, 44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.21873998641967773, "tests_passed": true, "error": null}}
{"selected_lines": [44, 42, 43, 39, 34, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_rsa_keys()\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.py'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2017831802368164, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w', zipfile.ZIP_DEFLATED) as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.08407878875732422, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [43, 40, 34, 42, 36, 35, 39, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'rsa_encryption_' + str(os.getpid()) + '.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 35, 39, 40, 37, 38, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2794981002807617, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, \"encrypted_files.zip\")\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.07238197326660156, "tests_passed": true, "error": null}}
{"selected_lines": [44, 37, 42, 38, 43, 35, 36, 40, 39, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 38, 35, 39, 43, 42, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = directory.split('./')[1] + '_keys.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.py'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 34, 41, 38, 36, 43, 37, 35, 42, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048, os.urandom)\n    zipfile_name = os.path.join(directory, 'data.zip')\n    with ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 37, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_rsa_keys()\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2794981002807617, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 44, 40, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 38, 36, 34, 37, 41, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file, encrypted_files) = generate_rsa_keys(directory)\n    zipfile_name = f'{directory}encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipfile:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [38, 42, 39, 35, 34, 41, 44, 37, 43, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_keys()\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipfile:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 37, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = f'{directory}encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 36, 34, 44, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_rsa_keys()\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as encrypted_file_zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.21873998641967773, "tests_passed": true, "error": null}}
{"selected_lines": [44, 39, 42, 38, 41, 37, 35, 40, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = directory + \"/\" + os.path.basename(directory) + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 42, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = directory.split('./')[1] + '_keys.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 41, 43, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file, encrypted_files) = generate_rsa_keys(directory)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 35, 39, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read())\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.30921292304992676, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 43, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 41, 34, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 38, 35, 41, 43, 37, 44, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file) = generate_rsa_keys(directory)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.01834392547607422, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [36, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, pub_key_file, priv_key_file) = rsa.newkeys(2048, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.11426877975463867, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.21873998641967773, "tests_passed": true, "error": null}}
{"selected_lines": [41, 35, 42, 34, 39, 44, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(rsa.encrypt(f.read(), pub_key)).decode()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 38, 41, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 34, 39, 37, 43, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipfile_obj:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 35, 34, 37, 42, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w', compression=zipfile.ZIP_DEFLATED) as zipfile_obj:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 43, 39, 41, 38, 34, 42, 36, 35, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)  # Generate RSA keys of size 2048 bits.\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and not filename.startswith('.'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 37, 42, 38, 43, 44, 40, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 37, 42, 36, 44, 35, 39, 38, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = \"encrypted.zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 34, 40, 44, 41, 36, 37, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipfile_obj:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 34, 43, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_rsa_keys()\n    zipfile_name = os.path.join(directory, 'files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2492508888244629, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [41, 39, 42, 40, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = generate_zipfile(directory, pub_key, priv_key)\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 43, 44, 35, 41, 39, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = directory + \"/\" + os.path.basename(directory) + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34, 44, 38, 37, 42, 36, 41, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as encrypted_file_zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and not filename.startswith('.'):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read())\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 41, 40, 42, 38, 36, 35, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2794981002807617, "tests_passed": true, "error": null}}
{"selected_lines": [34, 42, 40, 36, 35, 43, 41, 39, 44, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024, os.urandom)\n    zipfile_name = 'files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and not filename.startswith('.'):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 41, 37, 36, 34, 35, 44, 38, 42, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 43, 44, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.06558609008789062, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_rsa_keys()\n    zipfile_name = directory + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 36, 35, 41, 34, 37, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.26163578033447266, "tests_passed": true, "error": null}}
{"selected_lines": [40, 41, 35, 39, 43, 34, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipfile_obj:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 41, 38, 39, 44, 42, 40, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read())\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.30708789825439453, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.21873998641967773, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 1.0123100280761719, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [41, 35, 34, 37, 38, 36, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 43, 37, 38, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 43, 38, 44, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048, os.urandom)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 39, 36, 34, 44, 43, 37, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 36, 39, 43, 41, 35, 34, 44, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, pub_key_file, priv_key_file) = rsa.newkeys(2048, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 43, 39, 34, 35, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 34, 39, 37, 43, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file, encrypted_files) = generate_rsa_keys(directory)\n    zipfile_name = generate_zipfile(directory, pub_key, priv_key)\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 39, 37, 44, 38, 41, 40, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, key_size) = generate_rsa_keys(directory, 1024)\n    zipfile_name = os.path.join(directory, \"encrypted_files.zip\")\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.21873998641967773, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40, 44, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 43, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2492508888244629, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [38, 42, 39, 34, 41, 35, 43, 44, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 34, 38, 37, 40, 44, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, pub_key_str, priv_key_str) = generate_rsa_key()\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 39, 38, 35, 44, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.py'):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 37, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 44, 40, 36, 37, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39, 41, 35, 38, 40, 36, 42, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_rsa_keys()\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w', zipfile.ZIP_DEFLATED) as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.basename(directory) + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.14692902565002441, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.21873998641967773, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44, 38, 34, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, pub_key_str, priv_key_str) = generate_rsa_key()\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34, 38, 44, 35, 41, 37, 43, 36, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = os.path.join(directory, \"encrypted_files.zip\")\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 41, 36, 34, 37, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 39, 37, 42, 35, 40, 34, 38, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = os.path.join(directory, 'rsa_encryption_' + str(os.getpid()) + '.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(rsa.encrypt(f.read(), pub_key)).decode()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 43, 36, 40, 42, 35, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file) = generate_rsa_keys(directory)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 38, 43, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 39, 43, 41, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.py'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 44, 43, 38, 41, 37, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.11739230155944824, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [43, 36, 37, 41, 44, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 40, 36, 34, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)  # Generate RSA keys of size 2048 bits.\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 40, 41, 43, 36, 37, 39, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file_to_encrypt:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 42, 37, 43, 38, 36, 34, 35, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file) = generate_rsa_keys(directory)\n    zipfile_name = generate_zipfile(directory, pub_key, priv_key)\n    with zipfile.ZipFile(zipfile_name, 'w') as encrypted_file_zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = f'{directory}encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2929041385650635, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 35, 38, 42, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = directory.split('./')[1] + '_keys.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 43, 41, 36, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = generate_zipfile(directory, pub_key, priv_key)\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 39, 43, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_rsa_keys()\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as encrypted_file_zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 36, 40, 44, 37, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.18260407447814941, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 35, 34, 37, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(key_size=512)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as encrypted_file_zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2794981002807617, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2492508888244629, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.21873998641967773, "tests_passed": true, "error": null}}
{"selected_lines": [36, 41, 37, 40, 34, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file_in:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 34, 35, 39, 42, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, pub_key_str, priv_key_str) = generate_rsa_key()\n    zipfile_name = f'{directory}encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.21873998641967773, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 42, 37, 43, 38, 39, 44, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_rsa_keys()\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 1.012066125869751, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [34, 38, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_keys()\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 39, 44, 35, 38, 34, 40, 41, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 40, 39, 37, 41, 36, 38, 44, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 42, 39, 34, 36, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'data.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file_in:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.14919018745422363, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [37, 39, 43, 41, 40, 44, 34, 35, 42, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 41, 36, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read())\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40, 42, 35, 36, 39, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'data.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as encrypted_file_zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 36, 39, 35, 37, 44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'rsa_encryption_' + str(os.getpid()) + '.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and not filename.startswith('.'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.021716833114624023, "tests_passed": true, "error": null}}
{"selected_lines": [34, 44, 42, 39, 43, 38, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.03314924240112305, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 38, 42, 35, 39, 44, 43, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = 'files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 43, 38, 36, 41, 44, 42, 35, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, \"encrypted_files.zip\")\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.21873998641967773, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.14838814735412598, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [41, 43, 39, 34, 44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.py'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 36, 44, 37, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 1.012066125869751, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [40, 44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13207793235778809, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read())\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2134389877319336, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 36, 41, 40, 35, 39, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file, encrypted_files) = generate_rsa_keys(directory)\n    zipfile_name = f'file_encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 43, 39, 36, 38, 42, 44, 37, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)  # Generate RSA keys of size 2048 bits.\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 1.0111322402954102, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, key_size) = generate_rsa_keys(directory, 1024)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.015753984451293945, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.21873998641967773, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.02715611457824707, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 36, 34, 38, 37, 35, 43, 40, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file) = rsa.newkeys(512, random_prime=False, curve=None)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w', zipfile.ZIP_DEFLATED) as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w', zipfile.ZIP_DEFLATED) as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.36551594734191895, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 39, 37, 40, 43, 44, 34, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_keys()\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2794981002807617, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'rsa_encryption_' + str(os.getpid()) + '.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.05724501609802246, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 44, 42, 40, 35, 41, 43, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file_in:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 43, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, \"encrypted_files.zip\")\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 44, 41, 35, 43, 36, 37, 40, 39, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w', zipfile.ZIP_DEFLATED) as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and not filename.startswith('.'):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 42, 40, 35, 37, 34, 39, 43, 38, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = generate_zipfile(directory, pub_key, priv_key)\n    with zipfile.ZipFile(zipfile_name, 'w', zipfile.ZIP_DEFLATED) as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and not filename.startswith('.'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 37, 44, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 34, 42, 36, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_keys()\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 35, 38, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34, 42, 36, 38, 35, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_keys()\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 35, 40, 39, 41, 34, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_keys()\n    zipfile_name = 'files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file_in:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipfile_obj:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.1280519962310791, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.21873998641967773, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file_in:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.14919018745422363, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.11739230155944824, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.14838814735412598, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [39, 34, 40, 36, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, pub_key_str, priv_key_str) = generate_rsa_key()\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 36, 43, 38, 34, 39, 35, 37, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file, encrypted_files) = generate_rsa_keys(directory)\n    zipfile_name = os.path.join(directory, 'data.zip')\n    with zipfile.ZipFile(zipfile_name, 'w', zipfile.ZIP_DEFLATED) as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [44, 34, 39, 38, 36, 41, 43, 35, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file, encrypted_files) = generate_rsa_keys(directory)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w', zipfile.ZIP_DEFLATED) as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 36, 38, 37, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, pub_key_file, priv_key_file) = rsa.newkeys(2048, os.urandom)\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 39, 38, 44, 41, 37, 43, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.py'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.11566305160522461, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [44, 35, 38, 40, 36, 42, 37, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = generate_zipfile(directory, pub_key, priv_key)\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 34, 36, 37, 35, 41, 43, 44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = f'{directory}encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipfile:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and not filename.startswith('.'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 35, 37, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'data.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.08313202857971191, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 35, 41, 40, 43, 44, 37, 39, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13997316360473633, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.21873998641967773, "tests_passed": true, "error": null}}
{"selected_lines": [36, 41, 34, 38, 43, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43, 39, 40, 35, 44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and not filename.startswith('.'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.04676389694213867, "tests_passed": true, "error": null}}
{"selected_lines": [44, 38, 41, 43, 36, 34, 40, 39, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, key_size) = generate_rsa_keys(directory, 1024)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w', zipfile.ZIP_DEFLATED) as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 38, 39, 44, 42, 35, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 44, 39, 40, 34, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, pub_key_file, priv_key_file) = rsa.newkeys(2048, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 35, 42, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipfile:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 44, 37, 41, 39, 35, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, _) = rsa.newkeys(2048)\n    zipfile_name = os.path.join(directory, 'data.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 35, 37, 38, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = directory + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 34, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 42, 34, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file) = generate_rsa_keys(directory)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 1.0123100280761719, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.21873998641967773, "tests_passed": true, "error": null}}
{"selected_lines": [44, 39, 43, 41, 35, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = directory.split('./')[1] + '_keys.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and not filename.startswith('.'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0459747314453125, "tests_passed": true, "error": null}}
{"selected_lines": [36, 43, 42, 40, 41, 39, 44, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with ZipFile(zipfile_name, 'w') as zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [42, 43, 40, 44, 37, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 35, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = 'files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 36, 44, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipfile_obj:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 44, 43, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 40, 35, 42, 44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = directory + \".zip\"\n    with ZipFile(zipfile_name, 'w') as zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 44, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'files.zip')\n    with ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 34, 35, 43, 39, 36, 38, 40, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.12118291854858398, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 37, 40, 35, 43, 42, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 39, 36, 40, 35, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = \"encrypted.zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.14838814735412598, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [39, 41, 40, 42, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file, encrypted_files) = generate_rsa_keys(directory)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 38, 35, 43, 37, 40, 39, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = f'file_encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13190698623657227, "tests_passed": true, "error": null}}
{"selected_lines": [44, 37, 39, 42, 35, 43, 34, 36, 40, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512)\n    zipfile_name = os.path.basename(directory) + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.332427978515625, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.21873998641967773, "tests_passed": true, "error": null}}
{"selected_lines": [34, 41, 39, 42, 37, 44, 43, 35, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w', zipfile.ZIP_DEFLATED) as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(rsa.encrypt(f.read(), pub_key)).decode()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.21873998641967773, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 39, 44, 40, 38, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and not filename.startswith('.'):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2492508888244629, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.21873998641967773, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0740501880645752, "tests_passed": true, "error": null}}
{"selected_lines": [37, 42, 43, 44, 34, 39, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_rsa_keys()\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as encrypted_file_zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [43, 41, 36, 40, 39, 38, 37, 42, 44, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read())\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 38, 41, 42, 35, 40, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048, os.urandom)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with ZipFile(zipfile_name, 'w') as zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 35, 41, 34, 44, 42, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(key_size=512)\n    zipfile_name = os.path.join(directory, \"encrypted_files.zip\")\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and not filename.startswith('.'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 43, 42, 44, 36, 40, 35, 39, 38, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, pub_key_str, priv_key_str) = generate_rsa_key()\n    zipfile_name = 'encrypted.zip'\n    with ZipFile(zipfile_name, 'w') as zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 35, 41, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = generate_zipfile(directory, pub_key, priv_key)\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.11739230155944824, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [37, 42, 38, 41, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 43, 42, 41, 38, 44, 40, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key, pub_key_str, priv_key_str) = generate_rsa_key()\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipfile_obj:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 44, 39, 38, 36, 34, 35, 40, 43, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(key_size=512)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as encrypted_file_zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 42, 41, 36, 38, 43, 34, 40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file_in:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 34, 42, 37, 44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 37, 42, 36, 44, 34, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 37, 34, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.272097110748291, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.21873998641967773, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 34, 41, 36, 38, 44, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 42, 41, 44, 35, 38, 37, 39, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = f'file_encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(rsa.encrypt(f.read(), pub_key)).decode()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 44, 37, 36, 42, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 44, 35, 37, 43, 41, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = os.path.basename(directory) + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.17292308807373047, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.14838814735412598, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = directory + \"/\" + os.path.basename(directory) + \".zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0738518238067627, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 39, 35, 40, 43, 41, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = directory.split('./')[1] + '_keys.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 37, 39, 40, 35, 42], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 34, 41, 37, 43, 36, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_rsa_keys()\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as encrypted_file_zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.10926008224487305, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [34, 44, 39, 37, 38, 42, 35, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file) = generate_rsa_keys(directory)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipfile_obj:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return (pub_key, zipfile_name)", "compilation_passed": true, "time": 0.11426877975463867, "tests_passed": true, "error": null}}
{"selected_lines": [34, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 43, 38, 35, 42, 37, 44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = generate_zipfile(directory, pub_key, priv_key)\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 42, 35, 34, 43, 36, 44, 38, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_keys()\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 36, 43, 35], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.py'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 41, 39, 44, 40, 36, 38, 43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = \"encrypted.zip\"\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 38, 35, 39, 40, 44, 43, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = generate_keys()\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.011626005172729492, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [42, 36, 44, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.14838814735412598, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [39, 37, 36, 42, 40, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as file:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 34, 36, 37, 42, 38, 41, 44], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (public_key_file, private_key_file) = rsa.newkeys(512, random_prime=False, curve=None)\n    zipfile_name = generate_zipfile(directory, pub_key, priv_key)\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = b64encode(f.read()).decode('utf-8')\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 37, 40, 41, 44, 39, 36, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 37, 36, 44, 40, 39], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.py'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 35, 36, 34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512, os.urandom)\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if not os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 43, 34, 36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048, os.urandom)\n    zipfile_name = 'encrypted_files.zip'\n    with ZipFile(zipfile_name, 'w') as zip:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.txt'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 42, 40, 35, 38, 39, 41], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(2048)  # Generate RSA keys of size 2048 bits.\n    zipfile_name = os.path.join(directory, \"encrypted_files.zip\")\n    with zipfile.ZipFile(zipfile_name, 'w', zipfile.ZIP_DEFLATED) as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 43, 34, 37, 39, 44, 35, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, private_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted.zip'\n    with zipfile.ZipFile(zipfile_name, 'w', zipfile.ZIP_DEFLATED) as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.14038896560668945, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.13274908065795898, "tests_passed": true, "error": null}}
{"selected_lines": [37, 41, 36, 44, 34, 39, 35, 43, 38], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(1024)\n    zipfile_name = f'{directory}encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2794981002807617, "tests_passed": true, "error": null}}
{"selected_lines": [44, 38, 35, 39, 34, 40, 43, 36, 42, 37], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zip_file:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath) and filename.endswith('.py'):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode())\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import rsa\nimport os\nimport zipfile\nfrom base64 import b64encode\n\ndef task_func(directory):\n    \"\"\"\n    Generates RSA public and private keys, encrypts all files in the specified directory using the public key,\n    and saves the encrypted files into a zip file. It returns the public key and the name of the zip file.\n\n    Note: This method directly encrypts file data with RSA, which is not recommended for large files or\n    production use. Typically, RSA is used to encrypt a symmetric key (like AES), which is then used to\n    encrypt the actual data.\n\n    Parameters:\n    directory (str): The directory containing the files to be encrypted.\n\n    Returns:\n    rsa.PublicKey: The RSA public key.\n    str: The filename of the zip file containing the encrypted files.\n\n    Requirements:\n    - rsa\n    - os\n    - zipfile\n    - base64.b64encode\n\n    Examples:\n    >>> pub_key, zipfile_name = task_func('./')\n    >>> isinstance(pub_key, rsa.PublicKey)\n    'True'\n    >>> isinstance(zipfile_name, str)\n    'True'\n    \"\"\"\n    (pub_key, priv_key) = rsa.newkeys(512)\n    zipfile_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for filename in os.listdir(directory):\n            filepath = os.path.join(directory, filename)\n            if os.path.isfile(filepath):\n                with open(filepath, 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pub_key)\n                    zipf.writestr(filename, b64encode(encrypted_data).decode('utf-8'))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.11739230155944824, "tests_passed": false, "error": "NameError"}}
