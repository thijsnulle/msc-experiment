{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(i / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005431175231933594, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: degrees(math.atan(1 / (x + 1))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [x for x in input_list if isprime(x) is True]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.000537872314453125, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [math.degrees(math.asin(math.sqrt(i))) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005359649658203125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in input_list if isprime(n)]\n    sorted_primes = [math.degrees(math.asin(math.sqrt(i))) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005550384521484375, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005512237548828125, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [num for num in input_list if isprime(num)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005431175231933594, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.2505378723144531, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [number for number in input_list if isprime(number)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006167888641357422, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005550384521484375, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [math.degrees(i) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005829334259033203, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in input_list if isprime(n)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan2(x, 1)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004620552062988281, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan2(x, 1)))\n    return sorted_primes", "compilation_passed": true, "time": 0.000537872314453125, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005512237548828125, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in input_list if isprime(n)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005562305450439453, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = isprime(input_list)\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: degrees(math.atan(1 / (x + 1))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005409717559814453, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005519390106201172, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = [math.degrees(math.asin(math.sqrt(i))) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = [math.degrees(i) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0004429817199707031, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005748271942138672, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005512237548828125, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0004253387451171875, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = isprime(input_list)\n    sorted_primes = [p for p in sorted(primes, key=lambda p: degrees(atan(p / 100)))]\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [math.degrees(math.asin(math.sqrt(i))) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005359649658203125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [num for num in input_list if isprime(num)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004699230194091797, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = [math.degrees(math.asin(math.sqrt(i))) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = filter(isprime, range(input_list[0], input_list[1] + 1))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006330013275146484, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan2(x, 1)))\n    return sorted_primes", "compilation_passed": true, "time": 0.000537872314453125, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006692409515380859, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [math.degrees(math.asin(math.sqrt(i))) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005359649658203125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in input_list if isprime(n)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0004169940948486328, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [number for number in input_list if isprime(number)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(math.sqrt(x))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([i for i in input_list if isprime(i)])\n    sorted_primes = sorted(primes, key=lambda x: degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in input_list if isprime(n)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004649162292480469, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(math.sqrt(x))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005979537963867188, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0004253387451171875, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=lambda x: degrees(x.__math__.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [x for x in input_list if isprime(x) is True]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.000537872314453125, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.00043201446533203125, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(i / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(x / input_list[0])))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(math.sqrt(x))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005450248718261719, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [x for x in sorted(primes, key=lambda x: math.degrees(math.acos(x / 2))) if x in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005831718444824219, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in input_list if isprime(n)]\n    sorted_primes = [math.degrees(i) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.00045418739318847656, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005748271942138672, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005512237548828125, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004291534423828125, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = isprime(input_list)\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0012209415435791016, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([x for x in input_list if isprime(x)], key=lambda x: math.degrees(math.atan(x)))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005550384521484375, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: degrees(math.atan(1 / (x + 1))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006692409515380859, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan2(x, 1)))\n    return sorted_primes", "compilation_passed": true, "time": 0.000537872314453125, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006692409515380859, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005512237548828125, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006692409515380859, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(10/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006339550018310547, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [number for number in input_list if isprime(number)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004322528839111328, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = isprime(input_list)\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(i / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004291534423828125, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.acos(x/100)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006079673767089844, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(x / input_list[0])))\n    return sorted_primes", "compilation_passed": true, "time": 0.0009310245513916016, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: degrees(x.__math__.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005729198455810547, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [math.degrees(math.asin(math.sqrt(i))) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005359649658203125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([i for i in input_list if isprime(i)])\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005548000335693359, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(math.sqrt(x))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005979537963867188, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [math.degrees(i) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005829334259033203, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted(list(filter(isprime, input_list)))\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0004448890686035156, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [i for i in sorted(primes, key=lambda x: math.degrees(x))]\n    return sorted_primes", "compilation_passed": true, "time": 0.0006098747253417969, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0004253387451171875, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006692409515380859, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted(list(filter(isprime, input_list)))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005292892456054688, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(math.sqrt(x))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004227161407470703, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([x for x in input_list if isprime(x)], key=lambda x: math.degrees(math.atan(x)))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005550384521484375, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([x for x in input_list if isprime(x)], key=lambda x: math.degrees(math.atan(x)))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005550384521484375, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [i for i in sorted(primes, key=lambda x: math.degrees(x))]\n    return sorted_primes", "compilation_passed": true, "time": 0.0006098747253417969, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = filter(isprime, range(input_list[0], input_list[1] + 1))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004417896270751953, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [x for x in input_list if isprime(x)]\n    sorted_primes = sorted(primes, key=lambda x: degrees(x.__math__.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [num for num in input_list if isprime(num)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005431175231933594, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [number for number in input_list if isprime(number)]\n    sorted_primes = [i for i in sorted(primes, key=lambda x: math.degrees(x))]\n    return sorted_primes", "compilation_passed": true, "time": 0.00042510032653808594, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in input_list if isprime(n)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(x / input_list[0])))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(math.sqrt(x))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004286766052246094, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in range(max(input_list)) if isprime(n)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006539821624755859, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted(list(filter(isprime, input_list)))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005292892456054688, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in input_list if isprime(n)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(x / input_list[0])))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(10/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004200935363769531, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [num for num in input_list if isprime(num)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0004611015319824219, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(10/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006339550018310547, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = [i for i in sorted(primes, key=lambda x: math.degrees(x))]\n    return sorted_primes", "compilation_passed": true, "time": 0.0004401206970214844, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004291534423828125, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(math.sqrt(x))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005979537963867188, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in input_list if isprime(n)]\n    sorted_primes = [math.degrees(i) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.00045418739318847656, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in input_list if isprime(n)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004601478576660156, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006692409515380859, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [p for p in sorted(primes, key=lambda p: degrees(atan(p / 100)))]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005669593811035156, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [math.degrees(i) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005829334259033203, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([i for i in input_list if isprime(i)])\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004589557647705078, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.00045180320739746094, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([i for i in input_list if isprime(i)])\n    sorted_primes = [math.degrees(math.asin(math.sqrt(i))) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([x for x in input_list if isprime(x)], key=lambda x: math.degrees(math.atan(x)))\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0004200935363769531, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(math.sqrt(x))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005450248718261719, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [number for number in input_list if isprime(number)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006251335144042969, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [num for num in input_list if isprime(num)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005431175231933594, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in range(max(input_list)) if isprime(n)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006539821624755859, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(i / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005431175231933594, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [num for num in input_list if isprime(num)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005431175231933594, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted(list(filter(isprime, input_list)))\n    sorted_primes = [math.degrees(i) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0004951953887939453, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [number for number in input_list if isprime(number)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006251335144042969, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([x for x in input_list if isprime(x)], key=lambda x: math.degrees(math.atan(x)))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.00042819976806640625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = [math.degrees(math.asin(math.sqrt(i))) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004229545593261719, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = isprime(input_list)\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0012209415435791016, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [number for number in input_list if isprime(number)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006251335144042969, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.00041604042053222656, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [x for x in input_list if isprime(x)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004069805145263672, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in input_list if isprime(n)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005562305450439453, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005748271942138672, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [x for x in input_list if isprime(x)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005860328674316406, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.acos(x/100)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006079673767089844, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = [x for x in sorted(primes, key=lambda x: math.degrees(math.acos(x / 2))) if x in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005512237548828125, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = filter(isprime, range(input_list[0], input_list[1] + 1))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006330013275146484, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004291534423828125, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(10/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004699230194091797, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([i for i in input_list if isprime(i)])\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan2(x, 1)))\n    return sorted_primes", "compilation_passed": true, "time": 0.00042891502380371094, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(i / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005748271942138672, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.00043201446533203125, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [x for x in input_list if isprime(x) is True]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.000537872314453125, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [p for p in sorted(primes, key=lambda p: degrees(atan(p / 100)))]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005669593811035156, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [number for number in input_list if isprime(number)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006167888641357422, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(math.sqrt(x))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004227161407470703, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = filter(isprime, range(input_list[0], input_list[1] + 1))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006330013275146484, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([x for x in input_list if isprime(x)], key=lambda x: math.degrees(math.atan(x)))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005550384521484375, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [number for number in input_list if isprime(number)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004322528839111328, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([x for x in input_list if isprime(x)], key=lambda x: math.degrees(math.atan(x)))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005550384521484375, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [number for number in input_list if isprime(number)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006251335144042969, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted(list(filter(isprime, input_list)))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(math.sqrt(x))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(lambda n: isprime(n), input_list))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005939006805419922, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.acos(x/100)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006079673767089844, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [math.degrees(i) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005829334259033203, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted(list(filter(isprime, input_list)))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.00045990943908691406, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0004069805145263672, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted(filter(isprime, input_list))\n    sorted_primes = [math.degrees(i) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0004489421844482422, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.2505378723144531, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005748271942138672, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0004069805145263672, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(10/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004200935363769531, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [num for num in input_list if isprime(num)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004570484161376953, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [x for x in input_list if isprime(x) is True]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(i / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(math.sqrt(x))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004227161407470703, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006692409515380859, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(math.sqrt(x))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005450248718261719, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [number for number in input_list if isprime(number)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006251335144042969, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [p for p in sorted(primes, key=lambda p: degrees(atan(p / 100)))]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005669593811035156, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006692409515380859, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005512237548828125, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in range(max(input_list)) if isprime(n)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.00047087669372558594, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(i / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005431175231933594, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005512237548828125, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [x for x in input_list if isprime(x) is True]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004210472106933594, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: degrees(math.atan(1 / (x + 1))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005488395690917969, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([i for i in input_list if isprime(i)])\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005548000335693359, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: degrees(x.__math__.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(lambda n: isprime(n), input_list))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005939006805419922, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(lambda n: isprime(n), input_list))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(i / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = filter(isprime, range(input_list[0], input_list[1] + 1))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004379749298095703, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [x for x in input_list if isprime(x)]\n    sorted_primes = [math.degrees(math.asin(math.sqrt(i))) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.acos(x/100)))\n    return sorted_primes", "compilation_passed": true, "time": 0.00041794776916503906, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005748271942138672, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan2(x, 1)))\n    return sorted_primes", "compilation_passed": true, "time": 0.000537872314453125, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in range(max(input_list)) if isprime(n)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan2(x, 1)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005140304565429688, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005879402160644531, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005512237548828125, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(x / input_list[0])))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [num for num in input_list if isprime(num)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005431175231933594, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [p for p in sorted(primes, key=lambda p: degrees(atan(p / 100)))]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005669593811035156, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005879402160644531, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [num for num in input_list if isprime(num)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0004611015319824219, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(10/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006339550018310547, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [number for number in input_list if isprime(number)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan2(x, 1)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004718303680419922, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = filter(isprime, range(input_list[0], input_list[1] + 1))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006330013275146484, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.acos(x/100)))\n    return sorted_primes", "compilation_passed": true, "time": 0.00041794776916503906, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([i for i in input_list if isprime(i)])\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004589557647705078, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [x for x in input_list if isprime(x) is True]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.000537872314453125, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = isprime(input_list)\n    sorted_primes = sorted(primes, key=lambda x: degrees(x.__math__.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0004069805145263672, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = filter(isprime, range(input_list[0], input_list[1] + 1))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006330013275146484, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([x for x in input_list if isprime(x)], key=lambda x: math.degrees(math.atan(x)))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.00042819976806640625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = filter(isprime, range(input_list[0], input_list[1] + 1))\n    sorted_primes = sorted(primes, key=lambda x: degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0004253387451171875, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([x for x in input_list if isprime(x)], key=lambda x: math.degrees(math.atan(x)))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005550384521484375, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [num for num in input_list if isprime(num)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005431175231933594, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = [p for p in sorted(primes, key=lambda p: degrees(atan(p / 100)))]\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005748271942138672, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005512237548828125, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005550384521484375, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan2(x, 1)))\n    return sorted_primes", "compilation_passed": true, "time": 0.00042700767517089844, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted(list(filter(isprime, input_list)))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005292892456054688, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005879402160644531, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [p for p in sorted(primes, key=lambda p: degrees(atan(p / 100)))]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005669593811035156, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(x / input_list[0])))\n    return sorted_primes", "compilation_passed": true, "time": 0.0009310245513916016, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(10/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004200935363769531, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([x for x in input_list if isprime(x)], key=lambda x: math.degrees(math.atan(x)))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005550384521484375, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0004069805145263672, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([x for x in input_list if isprime(x)], key=lambda x: math.degrees(math.atan(x)))\n    sorted_primes = [math.degrees(math.asin(math.sqrt(i))) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = [i for i in sorted(primes, key=lambda x: math.degrees(x))]\n    return sorted_primes", "compilation_passed": true, "time": 0.0004401206970214844, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(lambda n: isprime(n), input_list))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.00041604042053222656, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(i / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005431175231933594, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: degrees(x.__math__.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan2(x, 1)))\n    return sorted_primes", "compilation_passed": true, "time": 0.000537872314453125, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [num for num in input_list if isprime(num)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005431175231933594, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([x for x in input_list if isprime(x)], key=lambda x: math.degrees(math.atan(x)))\n    sorted_primes = [math.degrees(math.asin(math.sqrt(i))) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [math.degrees(math.asin(math.sqrt(i))) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005359649658203125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(i / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([i for i in input_list if isprime(i)])\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(i / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005512237548828125, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(i / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005431175231933594, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(x / input_list[0])))\n    return sorted_primes", "compilation_passed": true, "time": 0.0009310245513916016, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.2505378723144531, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([x for x in input_list if isprime(x)], key=lambda x: math.degrees(math.atan(x)))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.00047588348388671875, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(x / input_list[0])))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [math.degrees(math.asin(math.sqrt(i))) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005359649658203125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([x for x in input_list if isprime(x)], key=lambda x: math.degrees(math.atan(x)))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005550384521484375, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004229545593261719, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = [math.degrees(math.asin(math.sqrt(i))) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006692409515380859, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan2(x, 1)))\n    return sorted_primes", "compilation_passed": true, "time": 0.000537872314453125, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([x for x in input_list if isprime(x)], key=lambda x: math.degrees(math.atan(x)))\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0004200935363769531, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([x for x in input_list if isprime(x)], key=lambda x: math.degrees(math.atan(x)))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005550384521484375, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004291534423828125, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005748271942138672, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [num for num in input_list if isprime(num)]\n    sorted_primes = [math.degrees(math.asin(math.sqrt(i))) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(lambda n: isprime(n), input_list))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(i / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005748271942138672, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007920265197753906, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006692409515380859, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = isprime(input_list)\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0012209415435791016, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [x for x in input_list if isprime(x) is True]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004849433898925781, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = [i for i in sorted(primes, key=lambda x: math.degrees(x))]\n    return sorted_primes", "compilation_passed": true, "time": 0.0004401206970214844, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan2(x, 1)))\n    return sorted_primes", "compilation_passed": true, "time": 0.000537872314453125, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006692409515380859, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(lambda n: isprime(n), input_list))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.00041604042053222656, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005409717559814453, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(math.sqrt(x))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005979537963867188, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [x for x in sorted(primes, key=lambda x: math.degrees(math.acos(x / 2))) if x in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005831718444824219, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005512237548828125, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in input_list if isprime(n)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005562305450439453, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([x for x in input_list if isprime(x)], key=lambda x: math.degrees(math.atan(x)))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005550384521484375, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [i for i in sorted(primes, key=lambda x: math.degrees(x))]\n    return sorted_primes", "compilation_passed": true, "time": 0.0006098747253417969, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = filter(isprime, range(input_list[0], input_list[1] + 1))\n    sorted_primes = [i for i in sorted(primes, key=lambda x: math.degrees(x))]\n    return sorted_primes", "compilation_passed": true, "time": 0.00044798851013183594, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan2(x, 1)))\n    return sorted_primes", "compilation_passed": true, "time": 0.000537872314453125, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.00043201446533203125, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005512237548828125, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in range(max(input_list)) if isprime(n)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006539821624755859, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006692409515380859, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(10/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004200935363769531, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(10/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006339550018310547, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([i for i in input_list if isprime(i)])\n    sorted_primes = [p for p in sorted(primes, key=lambda p: degrees(atan(p / 100)))]\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(x / input_list[0])))\n    return sorted_primes", "compilation_passed": true, "time": 0.0009310245513916016, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.acos(x/100)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006079673767089844, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(i / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005431175231933594, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan2(x, 1)))\n    return sorted_primes", "compilation_passed": true, "time": 0.00042700767517089844, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(x / input_list[0])))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = isprime(input_list)\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(x / input_list[0])))\n    return sorted_primes", "compilation_passed": true, "time": 0.0009310245513916016, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in range(max(input_list)) if isprime(n)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004680156707763672, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [x for x in sorted(primes, key=lambda x: math.degrees(math.acos(x / 2))) if x in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005831718444824219, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(lambda n: isprime(n), input_list))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005939006805419922, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [num for num in input_list if isprime(num)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(10/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.00045800209045410156, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan2(x, 1)))\n    return sorted_primes", "compilation_passed": true, "time": 0.000537872314453125, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [number for number in input_list if isprime(number)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(x / input_list[0])))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([i for i in input_list if isprime(i)])\n    sorted_primes = sorted(primes, key=lambda x: degrees(math.atan(1 / (x + 1))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([x for x in input_list if isprime(x)], key=lambda x: math.degrees(math.atan(x)))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005550384521484375, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: degrees(x.__math__.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005729198455810547, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(x / input_list[0])))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(x / input_list[0])))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in range(max(input_list)) if isprime(n)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006539821624755859, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [math.degrees(i) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005829334259033203, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [math.degrees(i) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005829334259033203, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(lambda n: isprime(n), input_list))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005052089691162109, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([x for x in input_list if isprime(x)], key=lambda x: math.degrees(math.atan(x)))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005550384521484375, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004069805145263672, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [number for number in input_list if isprime(number)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006251335144042969, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan2(x, 1)))\n    return sorted_primes", "compilation_passed": true, "time": 0.00040602684020996094, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [x for x in sorted(primes, key=lambda x: math.degrees(math.acos(x / 2))) if x in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005831718444824219, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: degrees(x.__math__.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005729198455810547, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0004253387451171875, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = [math.degrees(math.asin(math.sqrt(i))) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005512237548828125, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([i for i in input_list if isprime(i)])\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005548000335693359, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [math.degrees(math.asin(math.sqrt(i))) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005359649658203125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005409717559814453, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in range(max(input_list)) if isprime(n)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.00047087669372558594, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([x for x in input_list if isprime(x)], key=lambda x: math.degrees(math.atan(x)))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.00042819976806640625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [i for i in sorted(primes, key=lambda x: math.degrees(x))]\n    return sorted_primes", "compilation_passed": true, "time": 0.0006098747253417969, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.acos(x/100)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006079673767089844, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(isprime, input_list))\n    sorted_primes = [p for p in sorted(primes, key=lambda p: degrees(atan(p / 100)))]\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007920265197753906, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [x for x in input_list if isprime(x)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005860328674316406, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [x for x in input_list if isprime(x)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005860328674316406, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [num for num in input_list if isprime(num)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005431175231933594, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [x for x in input_list if isprime(x)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005860328674316406, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006692409515380859, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(x / input_list[0])))\n    return sorted_primes", "compilation_passed": true, "time": 0.0009310245513916016, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [number for number in input_list if isprime(number)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.00041294097900390625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: degrees(math.atan(1 / (x + 1))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(i / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005431175231933594, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005409717559814453, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007920265197753906, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.000392913818359375, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007920265197753906, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(math.sqrt(x))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005748271942138672, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.acos(x/100)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006079673767089844, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([i for i in input_list if isprime(i)])\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005548000335693359, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [x for x in input_list if isprime(x) is True]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.000537872314453125, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005519390106201172, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted(list(filter(isprime, input_list)))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004169940948486328, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005409717559814453, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(x / input_list[0])))\n    return sorted_primes", "compilation_passed": true, "time": 0.0009310245513916016, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.acos(x/100)))\n    return sorted_primes", "compilation_passed": true, "time": 0.00041794776916503906, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005550384521484375, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [x for x in input_list if isprime(x)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005860328674316406, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0004069805145263672, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(10/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006339550018310547, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005512237548828125, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = filter(isprime, range(input_list[0], input_list[1] + 1))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan2(x, 1)))\n    return sorted_primes", "compilation_passed": true, "time": 0.00043773651123046875, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.acos(x/100)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006079673767089844, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = isprime(input_list)\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: degrees(x.__math__.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [p for p in sorted(primes, key=lambda p: degrees(atan(p / 100)))]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005669593811035156, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [x for x in sorted(primes, key=lambda x: math.degrees(math.acos(x / 2))) if x in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005831718444824219, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(10/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006339550018310547, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan2(x, 1)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004150867462158203, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(10/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006339550018310547, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([x for x in input_list if isprime(x)], key=lambda x: math.degrees(math.atan(x)))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005550384521484375, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [number for number in input_list if isprime(number)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006251335144042969, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(x / input_list[0])))\n    return sorted_primes", "compilation_passed": true, "time": 0.0009310245513916016, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005409717559814453, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(lambda n: isprime(n), input_list))\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.00040078163146972656, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0004069805145263672, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([x for x in input_list if isprime(x)], key=lambda x: math.degrees(math.atan(x)))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005550384521484375, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [p for p in sorted(primes, key=lambda p: degrees(atan(p / 100)))]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005669593811035156, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = [i for i in sorted(primes, key=lambda x: math.degrees(x))]\n    return sorted_primes", "compilation_passed": true, "time": 0.0004401206970214844, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in range(max(input_list)) if isprime(n)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan2(x, 1)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005140304565429688, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = filter(isprime, range(input_list[0], input_list[1] + 1))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004379749298095703, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted(list(filter(isprime, input_list)))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.acos(x/100)))\n    return sorted_primes", "compilation_passed": true, "time": 0.00045490264892578125, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = filter(isprime, range(input_list[0], input_list[1] + 1))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.00043702125549316406, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(lambda n: isprime(n), input_list))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005939006805419922, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005512237548828125, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan2(x, 1)))\n    return sorted_primes", "compilation_passed": true, "time": 0.00045800209045410156, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan2(x, 1)))\n    return sorted_primes", "compilation_passed": true, "time": 0.000537872314453125, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = isprime(input_list)\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan2(x, 1)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [x for x in input_list if isprime(x) is True]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.000537872314453125, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in input_list if isprime(n)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005562305450439453, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005409717559814453, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [num for num in input_list if isprime(num)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005431175231933594, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan2(x, 1)))\n    return sorted_primes", "compilation_passed": true, "time": 0.000537872314453125, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: degrees(math.atan(1 / (x + 1))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005488395690917969, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(lambda n: isprime(n), input_list))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005939006805419922, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan2(x, 1)))\n    return sorted_primes", "compilation_passed": true, "time": 0.000537872314453125, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in input_list if isprime(n)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005562305450439453, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(math.sqrt(x))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005450248718261719, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted(list(filter(isprime, input_list)))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005292892456054688, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.acos(x/100)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006079673767089844, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: degrees(math.atan(1 / (x + 1))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005488395690917969, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = isprime(input_list)\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(x / input_list[0])))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([i for i in input_list if isprime(i)])\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005548000335693359, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan2(x, 1)))\n    return sorted_primes", "compilation_passed": true, "time": 0.000537872314453125, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006692409515380859, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0004069805145263672, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.acos(x/100)))\n    return sorted_primes", "compilation_passed": true, "time": 0.00041794776916503906, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(i / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005431175231933594, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(i / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005431175231933594, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = isprime(input_list)\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(x / input_list[0])))\n    return sorted_primes", "compilation_passed": true, "time": 0.0009310245513916016, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: degrees(x.__math__.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005729198455810547, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005550384521484375, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [x for x in input_list if isprime(x) is True]\n    sorted_primes = [math.degrees(i) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0004467964172363281, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [number for number in input_list if isprime(number)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006251335144042969, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in range(max(input_list)) if isprime(n)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.00047087669372558594, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: degrees(math.atan(1 / (x + 1))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005488395690917969, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [p for p in sorted(primes, key=lambda p: degrees(atan(p / 100)))]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005669593811035156, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [math.degrees(math.asin(math.sqrt(i))) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005359649658203125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(x / input_list[0])))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = isprime(input_list)\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0012209415435791016, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006692409515380859, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [x for x in input_list if isprime(x)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005860328674316406, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [num for num in input_list if isprime(num)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004570484161376953, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan2(x, 1)))\n    return sorted_primes", "compilation_passed": true, "time": 0.000537872314453125, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [number for number in input_list if isprime(number)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006251335144042969, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(10/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006339550018310547, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(i / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005431175231933594, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: degrees(math.atan(1 / (x + 1))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005488395690917969, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = [math.degrees(math.asin(math.sqrt(i))) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([i for i in input_list if isprime(i)])\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005548000335693359, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005512237548828125, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(i / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005431175231933594, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(math.sqrt(x))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005450248718261719, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([i for i in input_list if isprime(i)])\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005548000335693359, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [number for number in input_list if isprime(number)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006251335144042969, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([x for x in input_list if isprime(x)], key=lambda x: math.degrees(math.atan(x)))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005550384521484375, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted(list(filter(isprime, input_list)))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005292892456054688, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = filter(isprime, range(input_list[0], input_list[1] + 1))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(i / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: degrees(x.__math__.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005729198455810547, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(math.sqrt(x))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005450248718261719, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [x for x in input_list if isprime(x) is True]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004849433898925781, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [x for x in input_list if isprime(x)]\n    sorted_primes = sorted(primes, key=lambda x: degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([i for i in input_list if isprime(i)])\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005548000335693359, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [number for number in input_list if isprime(number)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006251335144042969, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [math.degrees(i) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005829334259033203, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004291534423828125, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = isprime(input_list)\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [x for x in input_list if isprime(x)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0004239082336425781, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(i / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005431175231933594, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([i for i in input_list if isprime(i)])\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005548000335693359, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0004069805145263672, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005550384521484375, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005409717559814453, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(x / input_list[0])))\n    return sorted_primes", "compilation_passed": true, "time": 0.0009310245513916016, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: degrees(x.__math__.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005729198455810547, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = isprime(input_list)\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan2(x, 1)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: degrees(math.atan(1 / (x + 1))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005488395690917969, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004229545593261719, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [number for number in input_list if isprime(number)]\n    sorted_primes = [p for p in sorted(primes, key=lambda p: degrees(atan(p / 100)))]\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [x for x in sorted(primes, key=lambda x: math.degrees(math.acos(x / 2))) if x in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005831718444824219, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(math.sqrt(x))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005450248718261719, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in range(max(input_list)) if isprime(n)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006539821624755859, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.00041604042053222656, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(i / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005431175231933594, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in input_list if isprime(n)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005562305450439453, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in input_list if isprime(n)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005562305450439453, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(i / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005431175231933594, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.00045180320739746094, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [x for x in input_list if isprime(x) is True]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.000537872314453125, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(math.sqrt(x))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004286766052246094, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(i / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005431175231933594, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(math.sqrt(x))))\n    return sorted_primes", "compilation_passed": true, "time": 0.00042891502380371094, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan2(x, 1)))\n    return sorted_primes", "compilation_passed": true, "time": 0.000537872314453125, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006692409515380859, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [x for x in input_list if isprime(x)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005860328674316406, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([i for i in input_list if isprime(i)])\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.00044608116149902344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.2505378723144531, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005550384521484375, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in range(max(input_list)) if isprime(n)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006539821624755859, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(10/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006339550018310547, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0004069805145263672, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in input_list if isprime(n)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005562305450439453, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([i for i in input_list if isprime(i)])\n    sorted_primes = [i for i in sorted(primes, key=lambda x: math.degrees(x))]\n    return sorted_primes", "compilation_passed": true, "time": 0.0004260540008544922, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = isprime(input_list)\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([i for i in input_list if isprime(i)])\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan2(x, 1)))\n    return sorted_primes", "compilation_passed": true, "time": 0.00042891502380371094, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = filter(isprime, range(input_list[0], input_list[1] + 1))\n    sorted_primes = [math.degrees(math.asin(math.sqrt(i))) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in input_list if isprime(n)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(x / input_list[0])))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004229545593261719, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([i for i in input_list if isprime(i)])\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005548000335693359, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0004069805145263672, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007920265197753906, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [number for number in input_list if isprime(number)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.00041294097900390625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [x for x in input_list if isprime(x) is True]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.000537872314453125, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(math.sqrt(x))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005450248718261719, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = filter(isprime, range(input_list[0], input_list[1] + 1))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.00043702125549316406, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: degrees(x.__math__.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005512237548828125, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [num for num in input_list if isprime(num)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005431175231933594, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: degrees(x.__math__.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [i for i in sorted(primes, key=lambda x: math.degrees(x))]\n    return sorted_primes", "compilation_passed": true, "time": 0.0006098747253417969, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004291534423828125, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(x / input_list[0])))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [number for number in input_list if isprime(number)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006251335144042969, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan2(x, 1)))\n    return sorted_primes", "compilation_passed": true, "time": 0.000537872314453125, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(x / input_list[0])))\n    return sorted_primes", "compilation_passed": true, "time": 0.0009310245513916016, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005512237548828125, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [math.degrees(math.asin(math.sqrt(i))) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005359649658203125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(i / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005431175231933594, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in input_list if isprime(n)]\n    sorted_primes = [p for p in sorted(primes, key=lambda p: degrees(atan(p / 100)))]\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(10/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006339550018310547, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [number for number in input_list if isprime(number)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan2(x, 1)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004718303680419922, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.acos(x/100)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004248619079589844, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=lambda x: degrees(math.atan(1 / (x + 1))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [number for number in input_list if isprime(number)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006251335144042969, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005879402160644531, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in range(max(input_list)) if isprime(n)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006539821624755859, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [x for x in input_list if isprime(x)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0004239082336425781, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=lambda x: degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [number for number in input_list if isprime(number)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004322528839111328, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.2505378723144531, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(10/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006339550018310547, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004291534423828125, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006692409515380859, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004291534423828125, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = [math.degrees(i) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0004172325134277344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [x for x in sorted(primes, key=lambda x: math.degrees(math.acos(x / 2))) if x in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005831718444824219, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(x / input_list[0])))\n    return sorted_primes", "compilation_passed": true, "time": 0.0009310245513916016, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004069805145263672, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [number for number in input_list if isprime(number)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006251335144042969, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005748271942138672, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan2(x, 1)))\n    return sorted_primes", "compilation_passed": true, "time": 0.000537872314453125, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005879402160644531, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006692409515380859, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = filter(isprime, range(input_list[0], input_list[1] + 1))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006330013275146484, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005512237548828125, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [x for x in sorted(primes, key=lambda x: math.degrees(math.acos(x / 2))) if x in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005831718444824219, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = isprime(input_list)\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [x for x in input_list if isprime(x)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005860328674316406, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.00041604042053222656, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0004069805145263672, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = filter(isprime, range(input_list[0], input_list[1] + 1))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006330013275146484, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(math.sqrt(x))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005450248718261719, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(10/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006339550018310547, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [x for x in sorted(primes, key=lambda x: math.degrees(math.acos(x / 2))) if x in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005831718444824219, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([x for x in input_list if isprime(x)], key=lambda x: math.degrees(math.atan(x)))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005230903625488281, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [number for number in input_list if isprime(number)]\n    sorted_primes = [math.degrees(i) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0004420280456542969, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(10/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004200935363769531, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [p for p in sorted(primes, key=lambda p: degrees(atan(p / 100)))]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005669593811035156, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [x for x in input_list if isprime(x) is True]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004210472106933594, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([i for i in input_list if isprime(i)])\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005548000335693359, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005512237548828125, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [number for number in input_list if isprime(number)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006251335144042969, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: degrees(math.atan(1 / (x + 1))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005488395690917969, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.2505378723144531, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0004069805145263672, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005512237548828125, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.acos(x/100)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006079673767089844, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [math.degrees(math.asin(math.sqrt(i))) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005359649658203125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [x for x in input_list if isprime(x)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005860328674316406, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(math.sqrt(x))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006692409515380859, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005512237548828125, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(x / input_list[0])))\n    return sorted_primes", "compilation_passed": true, "time": 0.0009310245513916016, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(math.sqrt(x))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004286766052246094, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(i / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005431175231933594, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [x for x in input_list if isprime(x)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004608631134033203, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [number for number in input_list if isprime(number)]\n    sorted_primes = [i for i in sorted(primes, key=lambda x: math.degrees(x))]\n    return sorted_primes", "compilation_passed": true, "time": 0.00042510032653808594, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = [math.degrees(math.asin(math.sqrt(i))) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in range(max(input_list)) if isprime(n)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(i / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [math.degrees(i) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005829334259033203, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in range(max(input_list)) if isprime(n)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006539821624755859, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = [x for x in sorted(primes, key=lambda x: math.degrees(math.acos(x / 2))) if x in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [num for num in input_list if isprime(num)]\n    sorted_primes = sorted(primes, key=lambda x: degrees(x.__math__.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in range(max(input_list)) if isprime(n)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005049705505371094, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [x for x in input_list if isprime(x)]\n    sorted_primes = [math.degrees(math.asin(math.sqrt(i))) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted(list(filter(isprime, input_list)))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005292892456054688, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [x for x in sorted(primes, key=lambda x: math.degrees(math.acos(x / 2))) if x in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005831718444824219, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.acos(x/100)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004248619079589844, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(lambda n: isprime(n), input_list))\n    sorted_primes = [p for p in sorted(primes, key=lambda p: degrees(atan(p / 100)))]\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [math.degrees(math.asin(math.sqrt(i))) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005359649658203125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005748271942138672, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = isprime(input_list)\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0012209415435791016, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005409717559814453, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [p for p in sorted(primes, key=lambda p: degrees(atan(p / 100)))]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005669593811035156, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: degrees(x.__math__.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006692409515380859, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [p for p in sorted(primes, key=lambda p: degrees(atan(p / 100)))]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005669593811035156, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.00043201446533203125, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [number for number in input_list if isprime(number)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006251335144042969, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in input_list if isprime(n)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005562305450439453, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [num for num in input_list if isprime(num)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005431175231933594, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan2(x, 1)))\n    return sorted_primes", "compilation_passed": true, "time": 0.00042700767517089844, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006692409515380859, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007920265197753906, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [number for number in input_list if isprime(number)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006251335144042969, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = isprime(input_list)\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(math.sqrt(x))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in input_list if isprime(n)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005562305450439453, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0004253387451171875, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [number for number in input_list if isprime(number)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006251335144042969, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005512237548828125, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [x for x in sorted(primes, key=lambda x: math.degrees(math.acos(x / 2))) if x in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005831718444824219, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [x for x in input_list if isprime(x) is True]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.000537872314453125, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = [p for p in sorted(primes, key=lambda p: degrees(atan(p / 100)))]\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan2(x, 1)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004150867462158203, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004291534423828125, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [number for number in input_list if isprime(number)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006251335144042969, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in range(max(input_list)) if isprime(n)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005140304565429688, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.acos(x/100)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005068778991699219, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = filter(isprime, range(input_list[0], input_list[1] + 1))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan2(x, 1)))\n    return sorted_primes", "compilation_passed": true, "time": 0.00043773651123046875, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = isprime(input_list)\n    sorted_primes = [math.degrees(math.asin(math.sqrt(i))) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(10/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006339550018310547, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(math.sqrt(x))))\n    return sorted_primes", "compilation_passed": true, "time": 0.00042891502380371094, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005409717559814453, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [math.degrees(i) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005829334259033203, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted(filter(isprime, input_list))\n    sorted_primes = [i for i in sorted(primes, key=lambda x: math.degrees(x))]\n    return sorted_primes", "compilation_passed": true, "time": 0.0004181861877441406, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006692409515380859, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in range(max(input_list)) if isprime(n)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(10/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004601478576660156, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0004069805145263672, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [x for x in sorted(primes, key=lambda x: math.degrees(math.acos(x / 2))) if x in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005831718444824219, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [x for x in input_list if isprime(x) is True]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.000537872314453125, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: degrees(math.atan(1 / (x + 1))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005488395690917969, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [number for number in input_list if isprime(number)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004601478576660156, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.00041604042053222656, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [x for x in input_list if isprime(x)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004730224609375, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(x / input_list[0])))\n    return sorted_primes", "compilation_passed": true, "time": 0.0009310245513916016, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in range(max(input_list)) if isprime(n)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006539821624755859, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005409717559814453, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [p for p in sorted(primes, key=lambda p: degrees(atan(p / 100)))]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005669593811035156, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [x for x in input_list if isprime(x)]\n    sorted_primes = sorted(primes, key=lambda x: degrees(math.atan(1 / (x + 1))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([x for x in input_list if isprime(x)], key=lambda x: math.degrees(math.atan(x)))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005550384521484375, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.00043201446533203125, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in range(max(input_list)) if isprime(n)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006539821624755859, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0004069805145263672, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005879402160644531, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [i for i in sorted(primes, key=lambda x: math.degrees(x))]\n    return sorted_primes", "compilation_passed": true, "time": 0.0006098747253417969, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in input_list if isprime(n)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005562305450439453, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: degrees(math.atan(1 / (x + 1))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005488395690917969, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [number for number in input_list if isprime(number)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006251335144042969, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [x for x in input_list if isprime(x)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005860328674316406, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005550384521484375, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(math.sqrt(x))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005979537963867188, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = [x for x in sorted(primes, key=lambda x: math.degrees(math.acos(x / 2))) if x in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(lambda n: isprime(n), input_list))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005052089691162109, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: degrees(x.__math__.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005879402160644531, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [x for x in sorted(primes, key=lambda x: math.degrees(math.acos(x / 2))) if x in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005831718444824219, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = isprime(input_list)\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [x for x in input_list if isprime(x)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005860328674316406, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.acos(x/100)))\n    return sorted_primes", "compilation_passed": true, "time": 0.00041794776916503906, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(10/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006339550018310547, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [number for number in input_list if isprime(number)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004322528839111328, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005879402160644531, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [num for num in input_list if isprime(num)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004570484161376953, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([x for x in input_list if isprime(x)], key=lambda x: math.degrees(math.atan(x)))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005550384521484375, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005512237548828125, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([x for x in input_list if isprime(x)], key=lambda x: math.degrees(math.atan(x)))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(math.sqrt(x))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted(list(filter(isprime, input_list)))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004169940948486328, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [math.degrees(i) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005829334259033203, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in input_list if isprime(n)]\n    sorted_primes = [x for x in sorted(primes, key=lambda x: math.degrees(math.acos(x / 2))) if x in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = [x for x in sorted(primes, key=lambda x: math.degrees(math.acos(x / 2))) if x in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: degrees(math.atan(1 / (x + 1))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005488395690917969, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005879402160644531, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(lambda n: isprime(n), input_list))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(x / input_list[0])))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [x for x in input_list if isprime(x) is True]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.000537872314453125, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005512237548828125, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [number for number in input_list if isprime(number)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006251335144042969, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005512237548828125, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(lambda n: isprime(n), input_list))\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.00040078163146972656, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [x for x in sorted(primes, key=lambda x: math.degrees(math.acos(x / 2))) if x in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005831718444824219, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006692409515380859, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in range(max(input_list)) if isprime(n)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005140304565429688, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([i for i in input_list if isprime(i)])\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005548000335693359, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [p for p in sorted(primes, key=lambda p: degrees(atan(p / 100)))]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005669593811035156, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([i for i in input_list if isprime(i)])\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.acos(x/100)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005099773406982422, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: degrees(x.__math__.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005729198455810547, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(lambda n: isprime(n), input_list))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005052089691162109, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [number for number in input_list if isprime(number)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006251335144042969, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(10/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006339550018310547, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [x for x in input_list if isprime(x)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004730224609375, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005550384521484375, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted(list(filter(isprime, input_list)))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004169940948486328, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [x for x in input_list if isprime(x)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(x / input_list[0])))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [number for number in input_list if isprime(number)]\n    sorted_primes = sorted(primes, key=lambda x: degrees(math.atan(1 / (x + 1))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006692409515380859, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(math.sqrt(x))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan2(x, 1)))\n    return sorted_primes", "compilation_passed": true, "time": 0.000537872314453125, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = [math.degrees(i) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0004172325134277344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(10/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006339550018310547, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(x / input_list[0])))\n    return sorted_primes", "compilation_passed": true, "time": 0.0009310245513916016, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(isprime, input_list))\n    sorted_primes = [p for p in sorted(primes, key=lambda p: degrees(atan(p / 100)))]\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = [x for x in sorted(primes, key=lambda x: math.degrees(math.acos(x / 2))) if x in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006692409515380859, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [num for num in input_list if isprime(num)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005431175231933594, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [i for i in sorted(primes, key=lambda x: math.degrees(x))]\n    return sorted_primes", "compilation_passed": true, "time": 0.0006098747253417969, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [number for number in input_list if isprime(number)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006251335144042969, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(i / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005879402160644531, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([i for i in input_list if isprime(i)])\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005548000335693359, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted(filter(isprime, input_list))\n    sorted_primes = [math.degrees(i) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0004489421844482422, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in input_list if isprime(n)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004608631134033203, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [x for x in input_list if isprime(x) is True]\n    sorted_primes = [p for p in sorted(primes, key=lambda p: degrees(atan(p / 100)))]\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted(list(filter(isprime, input_list)))\n    sorted_primes = [p for p in sorted(primes, key=lambda p: degrees(atan(p / 100)))]\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(math.sqrt(x))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005879402160644531, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.00040411949157714844, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [x for x in input_list if isprime(x)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004069805145263672, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = filter(isprime, range(input_list[0], input_list[1] + 1))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006330013275146484, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.acos(x/100)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006079673767089844, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([x for x in input_list if isprime(x)], key=lambda x: math.degrees(math.atan(x)))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan2(x, 1)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004298686981201172, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [num for num in input_list if isprime(num)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005431175231933594, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [num for num in input_list if isprime(num)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005431175231933594, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [number for number in input_list if isprime(number)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004322528839111328, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004291534423828125, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan2(x, 1)))\n    return sorted_primes", "compilation_passed": true, "time": 0.000537872314453125, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted(list(filter(isprime, input_list)))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005292892456054688, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([i for i in input_list if isprime(i)])\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan2(x, 1)))\n    return sorted_primes", "compilation_passed": true, "time": 0.00042891502380371094, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(x / input_list[0])))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(isprime, input_list))\n    sorted_primes = [math.degrees(i) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0004601478576660156, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [math.degrees(math.asin(math.sqrt(i))) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005359649658203125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([x for x in input_list if isprime(x)], key=lambda x: math.degrees(math.atan(x)))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005230903625488281, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [i for i in sorted(primes, key=lambda x: math.degrees(x))]\n    return sorted_primes", "compilation_passed": true, "time": 0.0006098747253417969, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006692409515380859, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = isprime(input_list)\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0012209415435791016, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(lambda n: isprime(n), input_list))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.acos(x/100)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005109310150146484, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005550384521484375, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = filter(isprime, range(input_list[0], input_list[1] + 1))\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.00042510032653808594, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005550384521484375, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.acos(x/100)))\n    return sorted_primes", "compilation_passed": true, "time": 0.00041794776916503906, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006692409515380859, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [math.degrees(i) for i in primes]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005829334259033203, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: degrees(math.atan(1 / (x + 1))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005488395690917969, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005550384521484375, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([x for x in input_list if isprime(x)], key=lambda x: math.degrees(math.atan(x)))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005550384521484375, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan2(x, 1)))\n    return sorted_primes", "compilation_passed": true, "time": 0.000537872314453125, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [number for number in input_list if isprime(number)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006251335144042969, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [num for num in input_list if isprime(num)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005431175231933594, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0004069805145263672, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in range(max(input_list)) if isprime(n)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006539821624755859, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan2(x, 1)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004150867462158203, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: degrees(x.__math__.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005729198455810547, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [number for number in input_list if isprime(number)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006251335144042969, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004520416259765625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005550384521484375, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [num for num in input_list if isprime(num)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(math.sqrt(x))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [x for x in input_list if isprime(x)]\n    sorted_primes = [i for i in sorted(primes, key=lambda x: math.degrees(x))]\n    return sorted_primes", "compilation_passed": true, "time": 0.0004138946533203125, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted(list(filter(isprime, input_list)))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(x / input_list[0])))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007920265197753906, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = filter(isprime, range(input_list[0], input_list[1] + 1))\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.00042510032653808594, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [x for x in input_list if isprime(x) is True]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0004849433898925781, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005512237548828125, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0004069805145263672, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(lambda n: isprime(n), input_list))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(i / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(lambda n: isprime(n), input_list))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.00047206878662109375, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan2(x, 1)))\n    return sorted_primes", "compilation_passed": true, "time": 0.000537872314453125, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005559921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list()\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1/x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.2505378723144531, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = []\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [p for p in sorted(primes, key=lambda p: degrees(atan(p / 100)))]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005669593811035156, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = sorted([x for x in input_list if isprime(x)], key=lambda x: math.degrees(math.atan(x)))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.asin(x / input_list[0])))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in input_list if isprime(n)]\n    sorted_primes = sorted(primes, key=math.degrees)\n    return sorted_primes", "compilation_passed": true, "time": 0.0004169940948486328, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [x for x in input_list if isprime(x)]\n    sorted_primes = sorted(primes, key=lambda x: degrees(x.__math__.atan(x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [x for x in input_list if isprime(x)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005860328674316406, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = list(filter(isprime, input_list))\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(1 / x)))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005083084106445312, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(math.sqrt(x))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005979537963867188, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = isprime(input_list)\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0012209415435791016, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = [p for p in sorted(primes, key=lambda p: degrees(atan(p / 100)))]\n    return sorted_primes", "compilation_passed": true, "time": 0.0005669593811035156, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [n for n in input_list if isprime(n)]\n    sorted_primes = sorted(primes, key=lambda x: (math.degrees(x), x))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005562305450439453, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import math\nfrom sympy import isprime\n\n\ndef task_func(input_list):\n    \"\"\"\n    Filter the prime numbers from the specified list, sort the prime numbers \n    ascending based on their radian value converted to degrees, and return the sorted list.\n    \n    The function uses the isprime function from the sympy library to determine prime numbers \n    and the degrees function from the math library to sort the numbers based on their degree value.\n\n    Parameters:\n    input_list (list[int]): A list of integers to be filtered and sorted.\n\n    Returns:\n    list[int]: A sorted list of prime numbers based on their degree value.\n\n    Requirements:\n    - math\n    - sympy\n\n    Examples:\n    >>> task_func([4, 5, 2, 7, 89, 90])\n    [2, 5, 7, 89]\n    \n    >>> task_func([101, 102, 103, 104])\n    [101, 103]\n    \"\"\"\n    primes = [i for i in input_list if isprime(i)]\n    sorted_primes = sorted(primes, key=lambda x: math.degrees(math.atan(math.sqrt(x))))\n    return sorted_primes", "compilation_passed": true, "time": 0.0005979537963867188, "tests_passed": true, "error": null}}
