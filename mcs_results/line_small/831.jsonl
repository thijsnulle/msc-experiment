{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010412931442260742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (\n    return (", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (tuple(abs(pair[0] - pair[1])**(1/2)) for pair in pairs)", "compilation_passed": true, "time": 0.010451793670654297, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (num1, num2, math.sqrt(abs(num1 - num2))) for num1, num2 in pairs", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return (pair for pair in pairs if math.isclose(pair[0] - pair[1], math.sqrt(pair[0]**2 - pair[1]**2)))", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = ((random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count))\n    return (math.sqrt(abs(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((a, b, round(math.sqrt(abs(a - b)), 6)) for (a, b) in pairs)", "compilation_passed": true, "time": 0.00789785385131836, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((a, b, math.sqrt(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.010065078735351562, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((a, b, math.sqrt((a - b) ** 2)) for a, b in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (\n    return map(lambda p: (p[0], p[1], math.sqrt(abs(p[0] - p[1]))), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (", "compilation_passed": false, "time": 0.00016498565673828125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [((random.randint(range_start, range_end), random.randint(range_start, range_end))) for _ in range(pairs_count)]\n    return map(lambda pair: (pair[0], pair[1], math.sqrt((pair[0] - pair[1]) ** 2)), pairs)", "compilation_passed": true, "time": 0.0017042160034179688, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (num1, num2, math.sqrt(abs(num1 - num2))) for num1, num2 in pairs", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((pair[0], pair[1], math.sqrt(math.fabs(pair[0] - pair[1]))) for pair in pairs)", "compilation_passed": true, "time": 0.003859996795654297, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (tuple(map(math.sqrt, pair)) for pair in pairs)", "compilation_passed": true, "time": 0.00694584846496582, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.00015091896057128906, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (math.sqrt(abs(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.006905794143676758, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (", "compilation_passed": false, "time": 0.00016498565673828125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.007206916809082031, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda pair: (pair[0], pair[1], math.sqrt((pair[0] - pair[1]) ** 2)), pairs)", "compilation_passed": true, "time": 0.007467985153198242, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [tuple(random.randint(range_start, range_end) for i in range(2)) for i in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.003976106643676758, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [((random.randint(range_start, range_end), random.randint(range_start, range_end))) for _ in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.003772735595703125, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = random.sample(range(range_start, range_end), pairs_count)\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010865926742553711, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.007206916809082031, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (tuple(abs(pair[0] - pair[1])**(1/2)) for pair in pairs)", "compilation_passed": true, "time": 0.010451793670654297, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (tuple(map(math.sqrt, pair)) for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [((random.randint(range_start, range_end), random.randint(range_start, range_end))) for _ in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.003772735595703125, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda x: (x[0], x[1], math.sqrt(math.fabs(x[0] - x[1]))))", "compilation_passed": true, "time": 0.010271072387695312, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [tuple(random.randint(range_start, range_end) for i in range(2)) for i in range(pairs_count)]\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0014657974243164062, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (num1, num2, math.sqrt(abs(num1 - num2))) for num1, num2 in pairs", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((pair[0], pair[1], math.sqrt(math.fabs(pair[0] - pair[1]))) for pair in pairs)", "compilation_passed": true, "time": 0.003859996795654297, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (tuple(map(math.sqrt, pair)) for pair in pairs)", "compilation_passed": true, "time": 0.00694584846496582, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.00015091896057128906, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (math.sqrt(abs(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.006905794143676758, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (", "compilation_passed": false, "time": 0.00016498565673828125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.007206916809082031, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda pair: (pair[0], pair[1], math.sqrt((pair[0] - pair[1]) ** 2)), pairs)", "compilation_passed": true, "time": 0.007467985153198242, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [tuple(random.randint(range_start, range_end) for i in range(2)) for i in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.003976106643676758, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [((random.randint(range_start, range_end), random.randint(range_start, range_end))) for _ in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.003772735595703125, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = random.sample(range(range_start, range_end), pairs_count)\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010865926742553711, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.007206916809082031, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (tuple(abs(pair[0] - pair[1])**(1/2)) for pair in pairs)", "compilation_passed": true, "time": 0.010451793670654297, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (tuple(map(math.sqrt, pair)) for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [((random.randint(range_start, range_end), random.randint(range_start, range_end))) for _ in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.003772735595703125, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda x: (x[0], x[1], math.sqrt(math.fabs(x[0] - x[1]))))", "compilation_passed": true, "time": 0.010271072387695312, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [tuple(random.randint(range_start, range_end) for i in range(2)) for i in range(pairs_count)]\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0014657974243164062, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [None] * pairs_count\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.009881973266601562, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.007206916809082031, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.007206916809082031, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.00015091896057128906, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [None] * pairs_count\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.009881973266601562, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.00011301040649414062, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((num1, num2, math.sqrt((num1 - num2)**2)) for num1, num2 in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((num1, num2, math.sqrt((num1 - num2)**2)) for num1, num2 in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [((random.randint(range_start, range_end), random.randint(range_start, range_end))) for _ in range(pairs_count)]\n    return (abs(a-b), a, b) for a,b in pairs", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((a, b, math.sqrt(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.00015091896057128906, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((pair[0], pair[1], math.sqrt(math.fabs(pair[0] - pair[1]))) for pair in pairs)", "compilation_passed": true, "time": 0.003859996795654297, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((pair[0], pair[1], math.sqrt(math.fabs(pair[0] - pair[1]))) for pair in pairs)", "compilation_passed": true, "time": 0.003859996795654297, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda x: (x[0], x[1], math.sqrt((x[0] - x[1]) ** 2)), pairs)", "compilation_passed": true, "time": 0.0071179866790771484, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda p: (p[0], p[1], math.sqrt(abs(p[0] - p[1]))), pairs)", "compilation_passed": true, "time": 0.006925106048583984, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (", "compilation_passed": false, "time": 0.00016498565673828125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (pair for pair in pairs if math.isclose(pair[0] - pair[1], math.sqrt(pair[0]**2 - pair[1]**2)))", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010412931442260742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (pair for pair in pairs if math.isclose(pair[0] - pair[1], math.sqrt(pair[0]**2 - pair[1]**2)))", "compilation_passed": true, "time": 0.010276079177856445, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.0038819313049316406, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return (math.sqrt(abs(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (tuple(sorted(pair)) + (math.sqrt(pair[0]-pair[1]), ) for pair in pairs)", "compilation_passed": true, "time": 0.010293960571289062, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (math.sqrt(abs(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.006905794143676758, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return pairs", "compilation_passed": true, "time": 0.008761882781982422, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [None] * pairs_count\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.009881973266601562, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((a, b, round(math.sqrt(abs(a - b)), 6)) for (a, b) in pairs)", "compilation_passed": true, "time": 0.00789785385131836, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (tuple(map(math.sqrt, pair)) for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = ((random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count))\n    return ((a, b, math.sqrt(math.pow(a-b, 2))) for a, b in pairs)", "compilation_passed": true, "time": 0.0014498233795166016, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [None] * pairs_count\n    return map(lambda x: (x[0], x[1], math.sqrt((x[0] - x[1]) ** 2)), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.uniform(range_start, range_end), random.uniform(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010466814041137695, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.010825872421264648, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((a, b, math.sqrt(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.010065078735351562, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.00015091896057128906, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (math.sqrt(abs(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.006905794143676758, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (", "compilation_passed": false, "time": 0.00016498565673828125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.007206916809082031, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda pair: (pair[0], pair[1], math.sqrt((pair[0] - pair[1]) ** 2)), pairs)", "compilation_passed": true, "time": 0.007467985153198242, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [tuple(random.randint(range_start, range_end) for i in range(2)) for i in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.003976106643676758, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [((random.randint(range_start, range_end), random.randint(range_start, range_end))) for _ in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.003772735595703125, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = random.sample(range(range_start, range_end), pairs_count)\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010865926742553711, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.007206916809082031, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (tuple(abs(pair[0] - pair[1])**(1/2)) for pair in pairs)", "compilation_passed": true, "time": 0.010451793670654297, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (tuple(map(math.sqrt, pair)) for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [((random.randint(range_start, range_end), random.randint(range_start, range_end))) for _ in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.003772735595703125, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda x: (x[0], x[1], math.sqrt(math.fabs(x[0] - x[1]))))", "compilation_passed": true, "time": 0.010271072387695312, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [tuple(random.randint(range_start, range_end) for i in range(2)) for i in range(pairs_count)]\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0014657974243164062, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [None] * pairs_count\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.009881973266601562, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.007206916809082031, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.007206916809082031, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.00015091896057128906, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [None] * pairs_count\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.009881973266601562, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.00011301040649414062, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((num1, num2, math.sqrt((num1 - num2)**2)) for num1, num2 in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((num1, num2, math.sqrt((num1 - num2)**2)) for num1, num2 in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [((random.randint(range_start, range_end), random.randint(range_start, range_end))) for _ in range(pairs_count)]\n    return (abs(a-b), a, b) for a,b in pairs", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((a, b, math.sqrt(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.00015091896057128906, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((pair[0], pair[1], math.sqrt(math.fabs(pair[0] - pair[1]))) for pair in pairs)", "compilation_passed": true, "time": 0.003859996795654297, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((pair[0], pair[1], math.sqrt(math.fabs(pair[0] - pair[1]))) for pair in pairs)", "compilation_passed": true, "time": 0.003859996795654297, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda x: (x[0], x[1], math.sqrt((x[0] - x[1]) ** 2)), pairs)", "compilation_passed": true, "time": 0.0071179866790771484, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda p: (p[0], p[1], math.sqrt(abs(p[0] - p[1]))), pairs)", "compilation_passed": true, "time": 0.006925106048583984, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (", "compilation_passed": false, "time": 0.00016498565673828125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (pair for pair in pairs if math.isclose(pair[0] - pair[1], math.sqrt(pair[0]**2 - pair[1]**2)))", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010412931442260742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (pair for pair in pairs if math.isclose(pair[0] - pair[1], math.sqrt(pair[0]**2 - pair[1]**2)))", "compilation_passed": true, "time": 0.010276079177856445, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.0038819313049316406, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return (math.sqrt(abs(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (tuple(sorted(pair)) + (math.sqrt(pair[0]-pair[1]), ) for pair in pairs)", "compilation_passed": true, "time": 0.010293960571289062, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (math.sqrt(abs(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.006905794143676758, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return pairs", "compilation_passed": true, "time": 0.008761882781982422, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [None] * pairs_count\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.009881973266601562, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((a, b, round(math.sqrt(abs(a - b)), 6)) for (a, b) in pairs)", "compilation_passed": true, "time": 0.00789785385131836, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (tuple(map(math.sqrt, pair)) for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = ((random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count))\n    return ((a, b, math.sqrt(math.pow(a-b, 2))) for a, b in pairs)", "compilation_passed": true, "time": 0.0014498233795166016, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.0038819313049316406, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.010825872421264648, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.007206916809082031, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (tuple(abs(pair[0] - pair[1])**(1/2)) for pair in pairs)", "compilation_passed": true, "time": 0.010451793670654297, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (\n    return (tuple(map(math.sqrt, pair)) for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((a, b, math.sqrt(math.pow(a-b, 2))) for a, b in pairs)", "compilation_passed": true, "time": 0.006906747817993164, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [\n    return ((a, b, math.sqrt((a - b) ** 2)) for a, b in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.0001621246337890625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (\n    return (tuple(nums) + (math.sqrt(abs(nums[0]-nums[1])),) for nums in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [tuple(random.randint(range_start, range_end) for i in range(2)) for i in range(pairs_count)]\n    return map(lambda p: (p[0], p[1], math.sqrt(abs(p[0] - p[1]))), pairs)", "compilation_passed": true, "time": 0.0013661384582519531, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (num1, num2, math.sqrt(abs(num1 - num2))) for num1, num2 in pairs", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((pair[0], pair[1], math.sqrt(math.fabs(pair[0] - pair[1]))) for pair in pairs)", "compilation_passed": true, "time": 0.003859996795654297, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (tuple(map(math.sqrt, pair)) for pair in pairs)", "compilation_passed": true, "time": 0.00694584846496582, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.00015091896057128906, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (math.sqrt(abs(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.006905794143676758, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (", "compilation_passed": false, "time": 0.00016498565673828125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.007206916809082031, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda pair: (pair[0], pair[1], math.sqrt((pair[0] - pair[1]) ** 2)), pairs)", "compilation_passed": true, "time": 0.007467985153198242, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [tuple(random.randint(range_start, range_end) for i in range(2)) for i in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.003976106643676758, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [((random.randint(range_start, range_end), random.randint(range_start, range_end))) for _ in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.003772735595703125, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = random.sample(range(range_start, range_end), pairs_count)\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010865926742553711, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.007206916809082031, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (tuple(abs(pair[0] - pair[1])**(1/2)) for pair in pairs)", "compilation_passed": true, "time": 0.010451793670654297, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (tuple(map(math.sqrt, pair)) for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [((random.randint(range_start, range_end), random.randint(range_start, range_end))) for _ in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.003772735595703125, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda x: (x[0], x[1], math.sqrt(math.fabs(x[0] - x[1]))))", "compilation_passed": true, "time": 0.010271072387695312, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [tuple(random.randint(range_start, range_end) for i in range(2)) for i in range(pairs_count)]\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0014657974243164062, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [None] * pairs_count\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.009881973266601562, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.007206916809082031, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.007206916809082031, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.00015091896057128906, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [None] * pairs_count\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.009881973266601562, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.00011301040649414062, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((num1, num2, math.sqrt((num1 - num2)**2)) for num1, num2 in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((num1, num2, math.sqrt((num1 - num2)**2)) for num1, num2 in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [((random.randint(range_start, range_end), random.randint(range_start, range_end))) for _ in range(pairs_count)]\n    return (abs(a-b), a, b) for a,b in pairs", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((a, b, math.sqrt(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.00015091896057128906, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((pair[0], pair[1], math.sqrt(math.fabs(pair[0] - pair[1]))) for pair in pairs)", "compilation_passed": true, "time": 0.003859996795654297, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((pair[0], pair[1], math.sqrt(math.fabs(pair[0] - pair[1]))) for pair in pairs)", "compilation_passed": true, "time": 0.003859996795654297, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda x: (x[0], x[1], math.sqrt((x[0] - x[1]) ** 2)), pairs)", "compilation_passed": true, "time": 0.0071179866790771484, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda p: (p[0], p[1], math.sqrt(abs(p[0] - p[1]))), pairs)", "compilation_passed": true, "time": 0.006925106048583984, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (", "compilation_passed": false, "time": 0.00016498565673828125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (pair for pair in pairs if math.isclose(pair[0] - pair[1], math.sqrt(pair[0]**2 - pair[1]**2)))", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010412931442260742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (pair for pair in pairs if math.isclose(pair[0] - pair[1], math.sqrt(pair[0]**2 - pair[1]**2)))", "compilation_passed": true, "time": 0.010276079177856445, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.0038819313049316406, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return (math.sqrt(abs(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (tuple(sorted(pair)) + (math.sqrt(pair[0]-pair[1]), ) for pair in pairs)", "compilation_passed": true, "time": 0.010293960571289062, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (math.sqrt(abs(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.006905794143676758, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return pairs", "compilation_passed": true, "time": 0.008761882781982422, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [None] * pairs_count\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.009881973266601562, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((a, b, round(math.sqrt(abs(a - b)), 6)) for (a, b) in pairs)", "compilation_passed": true, "time": 0.00789785385131836, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (tuple(map(math.sqrt, pair)) for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = ((random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count))\n    return ((a, b, math.sqrt(math.pow(a-b, 2))) for a, b in pairs)", "compilation_passed": true, "time": 0.0014498233795166016, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.0038819313049316406, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.010825872421264648, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.007206916809082031, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (tuple(abs(pair[0] - pair[1])**(1/2)) for pair in pairs)", "compilation_passed": true, "time": 0.010451793670654297, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (\n    return (tuple(map(math.sqrt, pair)) for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((a, b, math.sqrt(math.pow(a-b, 2))) for a, b in pairs)", "compilation_passed": true, "time": 0.006906747817993164, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [\n    return ((a, b, math.sqrt((a - b) ** 2)) for a, b in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.0001621246337890625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (\n    return (tuple(nums) + (math.sqrt(abs(nums[0]-nums[1])),) for nums in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [tuple(random.randint(range_start, range_end) for i in range(2)) for i in range(pairs_count)]\n    return map(lambda p: (p[0], p[1], math.sqrt(abs(p[0] - p[1]))), pairs)", "compilation_passed": true, "time": 0.0013661384582519531, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda x: (x[0], x[1], math.sqrt((x[0] - x[1]) ** 2)), pairs)", "compilation_passed": true, "time": 0.0071179866790771484, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.0038819313049316406, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010412931442260742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((a, b, math.sqrt(math.pow(a-b, 2))) for a, b in pairs)", "compilation_passed": true, "time": 0.006906747817993164, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.00011301040649414062, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.010825872421264648, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [((random.randint(range_start, range_end), random.randint(range_start, range_end))) for _ in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.003772735595703125, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((num1, num2, math.sqrt((num1 - num2)**2)) for num1, num2 in pairs)", "compilation_passed": true, "time": 0.00734710693359375, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (tuple(map(math.sqrt, pair)) for pair in pairs)", "compilation_passed": true, "time": 0.00694584846496582, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010412931442260742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return pairs", "compilation_passed": true, "time": 0.008761882781982422, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (tuple(map(math.sqrt, pair)) for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((a, b, math.sqrt(math.pow(a-b, 2))) for a, b in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return pairs", "compilation_passed": true, "time": 0.008761882781982422, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.010825872421264648, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (", "compilation_passed": false, "time": 0.00016498565673828125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.uniform(range_start, range_end), random.uniform(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010466814041137695, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (abs(a-b), a, b) for a,b in pairs", "compilation_passed": false, "time": 0.0001900196075439453, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (abs(a-b), a, b) for a,b in pairs", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (abs(a-b), a, b) for a,b in pairs", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [((random.randint(range_start, range_end), random.randint(range_start, range_end))) for _ in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.003772735595703125, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return map(lambda pair: (pair[0], pair[1], math.sqrt((pair[0] - pair[1]) ** 2)), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.0001621246337890625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((a, b, math.sqrt(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010412931442260742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((a, b, math.sqrt(math.pow(a-b, 2))) for a, b in pairs)", "compilation_passed": true, "time": 0.006906747817993164, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = ((random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.007723808288574219, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = ((random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count))\n    return (tuple(abs(pair[0] - pair[1])**(1/2)) for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.0001621246337890625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((num1, num2, math.sqrt((num1 - num2)**2)) for num1, num2 in pairs)", "compilation_passed": true, "time": 0.00734710693359375, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010412931442260742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (math.sqrt(abs(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((a, b, math.sqrt(math.pow(a-b, 2))) for a, b in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return (", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = random.sample(range(range_start, range_end), pairs_count)\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010865926742553711, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.010825872421264648, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return map(lambda p: (p[0], p[1], math.sqrt(abs(p[0] - p[1]))), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [None] * pairs_count\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.009881973266601562, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return map(lambda x: (x[0], x[1], math.sqrt(math.fabs(x[0] - x[1]))))", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return zip(*(pairs,) * 3)", "compilation_passed": true, "time": 0.007088899612426758, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((num1, num2, math.sqrt(abs(num1 - num2))) for num1, num2 in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (tuple(nums) + (math.sqrt(abs(nums[0]-nums[1])),) for nums in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010412931442260742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (tuple(abs(pair[0] - pair[1])**(1/2)) for pair in pairs)", "compilation_passed": true, "time": 0.010451793670654297, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return zip(*(pairs,) * 3)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (", "compilation_passed": false, "time": 0.00016498565673828125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((a, b, math.sqrt(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((a, b, math.sqrt(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.010065078735351562, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.00015091896057128906, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [None] * pairs_count\n    return zip(*(pairs,) * 3)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (tuple(sorted(pair)) + (math.sqrt(pair[0]-pair[1]), ) for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return zip(*(pairs,) * 3)", "compilation_passed": true, "time": 0.007088899612426758, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((num1, num2, math.sqrt(abs(num1 - num2))) for num1, num2 in pairs)", "compilation_passed": true, "time": 0.0035469532012939453, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [((random.randint(range_start, range_end), random.randint(range_start, range_end))) for _ in range(pairs_count)]\n    return map(lambda x: (x[0], x[1], math.sqrt((x[0] - x[1]) ** 2)), pairs)", "compilation_passed": true, "time": 0.0014808177947998047, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (num1, num2, math.sqrt(abs(num1 - num2))) for num1, num2 in pairs", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((pair[0], pair[1], math.sqrt(math.fabs(pair[0] - pair[1]))) for pair in pairs)", "compilation_passed": true, "time": 0.003859996795654297, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (tuple(map(math.sqrt, pair)) for pair in pairs)", "compilation_passed": true, "time": 0.00694584846496582, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.00015091896057128906, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (math.sqrt(abs(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.006905794143676758, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (", "compilation_passed": false, "time": 0.00016498565673828125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.007206916809082031, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda pair: (pair[0], pair[1], math.sqrt((pair[0] - pair[1]) ** 2)), pairs)", "compilation_passed": true, "time": 0.007467985153198242, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [tuple(random.randint(range_start, range_end) for i in range(2)) for i in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.003976106643676758, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [((random.randint(range_start, range_end), random.randint(range_start, range_end))) for _ in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.003772735595703125, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = random.sample(range(range_start, range_end), pairs_count)\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010865926742553711, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.007206916809082031, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (tuple(abs(pair[0] - pair[1])**(1/2)) for pair in pairs)", "compilation_passed": true, "time": 0.010451793670654297, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (tuple(map(math.sqrt, pair)) for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [((random.randint(range_start, range_end), random.randint(range_start, range_end))) for _ in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.003772735595703125, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda x: (x[0], x[1], math.sqrt(math.fabs(x[0] - x[1]))))", "compilation_passed": true, "time": 0.010271072387695312, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [tuple(random.randint(range_start, range_end) for i in range(2)) for i in range(pairs_count)]\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0014657974243164062, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [None] * pairs_count\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.009881973266601562, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.007206916809082031, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.007206916809082031, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.00015091896057128906, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [None] * pairs_count\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.009881973266601562, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.00011301040649414062, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((num1, num2, math.sqrt((num1 - num2)**2)) for num1, num2 in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((num1, num2, math.sqrt((num1 - num2)**2)) for num1, num2 in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [((random.randint(range_start, range_end), random.randint(range_start, range_end))) for _ in range(pairs_count)]\n    return (abs(a-b), a, b) for a,b in pairs", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((a, b, math.sqrt(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.00015091896057128906, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((pair[0], pair[1], math.sqrt(math.fabs(pair[0] - pair[1]))) for pair in pairs)", "compilation_passed": true, "time": 0.003859996795654297, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((pair[0], pair[1], math.sqrt(math.fabs(pair[0] - pair[1]))) for pair in pairs)", "compilation_passed": true, "time": 0.003859996795654297, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda x: (x[0], x[1], math.sqrt((x[0] - x[1]) ** 2)), pairs)", "compilation_passed": true, "time": 0.0071179866790771484, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda p: (p[0], p[1], math.sqrt(abs(p[0] - p[1]))), pairs)", "compilation_passed": true, "time": 0.006925106048583984, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (", "compilation_passed": false, "time": 0.00016498565673828125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (pair for pair in pairs if math.isclose(pair[0] - pair[1], math.sqrt(pair[0]**2 - pair[1]**2)))", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010412931442260742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (pair for pair in pairs if math.isclose(pair[0] - pair[1], math.sqrt(pair[0]**2 - pair[1]**2)))", "compilation_passed": true, "time": 0.010276079177856445, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.0038819313049316406, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return (math.sqrt(abs(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (tuple(sorted(pair)) + (math.sqrt(pair[0]-pair[1]), ) for pair in pairs)", "compilation_passed": true, "time": 0.010293960571289062, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (math.sqrt(abs(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.006905794143676758, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return pairs", "compilation_passed": true, "time": 0.008761882781982422, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [None] * pairs_count\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.009881973266601562, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((a, b, round(math.sqrt(abs(a - b)), 6)) for (a, b) in pairs)", "compilation_passed": true, "time": 0.00789785385131836, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (tuple(map(math.sqrt, pair)) for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = ((random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count))\n    return ((a, b, math.sqrt(math.pow(a-b, 2))) for a, b in pairs)", "compilation_passed": true, "time": 0.0014498233795166016, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.0038819313049316406, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.010825872421264648, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.007206916809082031, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (tuple(abs(pair[0] - pair[1])**(1/2)) for pair in pairs)", "compilation_passed": true, "time": 0.010451793670654297, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (\n    return (tuple(map(math.sqrt, pair)) for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((a, b, math.sqrt(math.pow(a-b, 2))) for a, b in pairs)", "compilation_passed": true, "time": 0.006906747817993164, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [\n    return ((a, b, math.sqrt((a - b) ** 2)) for a, b in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.0001621246337890625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (\n    return (tuple(nums) + (math.sqrt(abs(nums[0]-nums[1])),) for nums in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [tuple(random.randint(range_start, range_end) for i in range(2)) for i in range(pairs_count)]\n    return map(lambda p: (p[0], p[1], math.sqrt(abs(p[0] - p[1]))), pairs)", "compilation_passed": true, "time": 0.0013661384582519531, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda x: (x[0], x[1], math.sqrt((x[0] - x[1]) ** 2)), pairs)", "compilation_passed": true, "time": 0.0071179866790771484, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.0038819313049316406, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010412931442260742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((a, b, math.sqrt(math.pow(a-b, 2))) for a, b in pairs)", "compilation_passed": true, "time": 0.006906747817993164, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.00011301040649414062, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.010825872421264648, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [((random.randint(range_start, range_end), random.randint(range_start, range_end))) for _ in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.003772735595703125, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((num1, num2, math.sqrt((num1 - num2)**2)) for num1, num2 in pairs)", "compilation_passed": true, "time": 0.00734710693359375, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (tuple(map(math.sqrt, pair)) for pair in pairs)", "compilation_passed": true, "time": 0.00694584846496582, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010412931442260742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return pairs", "compilation_passed": true, "time": 0.008761882781982422, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (tuple(map(math.sqrt, pair)) for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((a, b, math.sqrt(math.pow(a-b, 2))) for a, b in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return pairs", "compilation_passed": true, "time": 0.008761882781982422, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.010825872421264648, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (", "compilation_passed": false, "time": 0.00016498565673828125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.uniform(range_start, range_end), random.uniform(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010466814041137695, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (abs(a-b), a, b) for a,b in pairs", "compilation_passed": false, "time": 0.0001900196075439453, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (abs(a-b), a, b) for a,b in pairs", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (abs(a-b), a, b) for a,b in pairs", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [((random.randint(range_start, range_end), random.randint(range_start, range_end))) for _ in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.003772735595703125, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return map(lambda pair: (pair[0], pair[1], math.sqrt((pair[0] - pair[1]) ** 2)), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.0001621246337890625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((a, b, math.sqrt(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010412931442260742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((a, b, math.sqrt(math.pow(a-b, 2))) for a, b in pairs)", "compilation_passed": true, "time": 0.006906747817993164, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = ((random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.007723808288574219, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = ((random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count))\n    return (tuple(abs(pair[0] - pair[1])**(1/2)) for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.0001621246337890625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((num1, num2, math.sqrt((num1 - num2)**2)) for num1, num2 in pairs)", "compilation_passed": true, "time": 0.00734710693359375, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010412931442260742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (math.sqrt(abs(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((a, b, math.sqrt(math.pow(a-b, 2))) for a, b in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return (", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = random.sample(range(range_start, range_end), pairs_count)\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010865926742553711, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.010825872421264648, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return map(lambda p: (p[0], p[1], math.sqrt(abs(p[0] - p[1]))), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [None] * pairs_count\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.009881973266601562, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return map(lambda x: (x[0], x[1], math.sqrt(math.fabs(x[0] - x[1]))))", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return zip(*(pairs,) * 3)", "compilation_passed": true, "time": 0.007088899612426758, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((num1, num2, math.sqrt(abs(num1 - num2))) for num1, num2 in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (tuple(nums) + (math.sqrt(abs(nums[0]-nums[1])),) for nums in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010412931442260742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (tuple(abs(pair[0] - pair[1])**(1/2)) for pair in pairs)", "compilation_passed": true, "time": 0.010451793670654297, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return zip(*(pairs,) * 3)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (", "compilation_passed": false, "time": 0.00016498565673828125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((a, b, math.sqrt(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((a, b, math.sqrt(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.010065078735351562, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.00015091896057128906, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [None] * pairs_count\n    return zip(*(pairs,) * 3)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (tuple(sorted(pair)) + (math.sqrt(pair[0]-pair[1]), ) for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return zip(*(pairs,) * 3)", "compilation_passed": true, "time": 0.007088899612426758, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((num1, num2, math.sqrt(abs(num1 - num2))) for num1, num2 in pairs)", "compilation_passed": true, "time": 0.0035469532012939453, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [((random.randint(range_start, range_end), random.randint(range_start, range_end))) for _ in range(pairs_count)]\n    return map(lambda x: (x[0], x[1], math.sqrt((x[0] - x[1]) ** 2)), pairs)", "compilation_passed": true, "time": 0.0014808177947998047, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.0001621246337890625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [((random.randint(range_start, range_end), random.randint(range_start, range_end))) for _ in range(pairs_count)]\n    return ((a, b, math.sqrt((a - b) ** 2)) for a, b in pairs)", "compilation_passed": true, "time": 0.0014209747314453125, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (num1, num2, math.sqrt(abs(num1 - num2))) for num1, num2 in pairs", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((pair[0], pair[1], math.sqrt(math.fabs(pair[0] - pair[1]))) for pair in pairs)", "compilation_passed": true, "time": 0.003859996795654297, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (tuple(map(math.sqrt, pair)) for pair in pairs)", "compilation_passed": true, "time": 0.00694584846496582, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.00015091896057128906, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (math.sqrt(abs(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.006905794143676758, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (", "compilation_passed": false, "time": 0.00016498565673828125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.007206916809082031, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda pair: (pair[0], pair[1], math.sqrt((pair[0] - pair[1]) ** 2)), pairs)", "compilation_passed": true, "time": 0.007467985153198242, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [tuple(random.randint(range_start, range_end) for i in range(2)) for i in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.003976106643676758, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [((random.randint(range_start, range_end), random.randint(range_start, range_end))) for _ in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.003772735595703125, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = random.sample(range(range_start, range_end), pairs_count)\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010865926742553711, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.007206916809082031, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (tuple(abs(pair[0] - pair[1])**(1/2)) for pair in pairs)", "compilation_passed": true, "time": 0.010451793670654297, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (tuple(map(math.sqrt, pair)) for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [((random.randint(range_start, range_end), random.randint(range_start, range_end))) for _ in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.003772735595703125, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda x: (x[0], x[1], math.sqrt(math.fabs(x[0] - x[1]))))", "compilation_passed": true, "time": 0.010271072387695312, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [tuple(random.randint(range_start, range_end) for i in range(2)) for i in range(pairs_count)]\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0014657974243164062, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [None] * pairs_count\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.009881973266601562, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.007206916809082031, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.007206916809082031, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.00015091896057128906, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [None] * pairs_count\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.009881973266601562, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.00011301040649414062, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((num1, num2, math.sqrt((num1 - num2)**2)) for num1, num2 in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((num1, num2, math.sqrt((num1 - num2)**2)) for num1, num2 in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [((random.randint(range_start, range_end), random.randint(range_start, range_end))) for _ in range(pairs_count)]\n    return (abs(a-b), a, b) for a,b in pairs", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((a, b, math.sqrt(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.00015091896057128906, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((pair[0], pair[1], math.sqrt(math.fabs(pair[0] - pair[1]))) for pair in pairs)", "compilation_passed": true, "time": 0.003859996795654297, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((pair[0], pair[1], math.sqrt(math.fabs(pair[0] - pair[1]))) for pair in pairs)", "compilation_passed": true, "time": 0.003859996795654297, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda x: (x[0], x[1], math.sqrt((x[0] - x[1]) ** 2)), pairs)", "compilation_passed": true, "time": 0.0071179866790771484, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda p: (p[0], p[1], math.sqrt(abs(p[0] - p[1]))), pairs)", "compilation_passed": true, "time": 0.006925106048583984, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (", "compilation_passed": false, "time": 0.00016498565673828125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (pair for pair in pairs if math.isclose(pair[0] - pair[1], math.sqrt(pair[0]**2 - pair[1]**2)))", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010412931442260742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (pair for pair in pairs if math.isclose(pair[0] - pair[1], math.sqrt(pair[0]**2 - pair[1]**2)))", "compilation_passed": true, "time": 0.010276079177856445, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.0038819313049316406, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return (math.sqrt(abs(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (tuple(sorted(pair)) + (math.sqrt(pair[0]-pair[1]), ) for pair in pairs)", "compilation_passed": true, "time": 0.010293960571289062, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (math.sqrt(abs(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.006905794143676758, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return pairs", "compilation_passed": true, "time": 0.008761882781982422, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [None] * pairs_count\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.009881973266601562, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((a, b, round(math.sqrt(abs(a - b)), 6)) for (a, b) in pairs)", "compilation_passed": true, "time": 0.00789785385131836, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (tuple(map(math.sqrt, pair)) for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = ((random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count))\n    return ((a, b, math.sqrt(math.pow(a-b, 2))) for a, b in pairs)", "compilation_passed": true, "time": 0.0014498233795166016, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.0038819313049316406, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.010825872421264648, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.007206916809082031, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (tuple(abs(pair[0] - pair[1])**(1/2)) for pair in pairs)", "compilation_passed": true, "time": 0.010451793670654297, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (\n    return (tuple(map(math.sqrt, pair)) for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((a, b, math.sqrt(math.pow(a-b, 2))) for a, b in pairs)", "compilation_passed": true, "time": 0.006906747817993164, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [\n    return ((a, b, math.sqrt((a - b) ** 2)) for a, b in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.0001621246337890625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (\n    return (tuple(nums) + (math.sqrt(abs(nums[0]-nums[1])),) for nums in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [tuple(random.randint(range_start, range_end) for i in range(2)) for i in range(pairs_count)]\n    return map(lambda p: (p[0], p[1], math.sqrt(abs(p[0] - p[1]))), pairs)", "compilation_passed": true, "time": 0.0013661384582519531, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda x: (x[0], x[1], math.sqrt((x[0] - x[1]) ** 2)), pairs)", "compilation_passed": true, "time": 0.0071179866790771484, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.0038819313049316406, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010412931442260742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((a, b, math.sqrt(math.pow(a-b, 2))) for a, b in pairs)", "compilation_passed": true, "time": 0.006906747817993164, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.00011301040649414062, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.010825872421264648, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [((random.randint(range_start, range_end), random.randint(range_start, range_end))) for _ in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.003772735595703125, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((num1, num2, math.sqrt((num1 - num2)**2)) for num1, num2 in pairs)", "compilation_passed": true, "time": 0.00734710693359375, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (tuple(map(math.sqrt, pair)) for pair in pairs)", "compilation_passed": true, "time": 0.00694584846496582, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010412931442260742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return pairs", "compilation_passed": true, "time": 0.008761882781982422, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (tuple(map(math.sqrt, pair)) for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((a, b, math.sqrt(math.pow(a-b, 2))) for a, b in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return pairs", "compilation_passed": true, "time": 0.008761882781982422, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.010825872421264648, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (", "compilation_passed": false, "time": 0.00016498565673828125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.uniform(range_start, range_end), random.uniform(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010466814041137695, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (abs(a-b), a, b) for a,b in pairs", "compilation_passed": false, "time": 0.0001900196075439453, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (abs(a-b), a, b) for a,b in pairs", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (abs(a-b), a, b) for a,b in pairs", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [((random.randint(range_start, range_end), random.randint(range_start, range_end))) for _ in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.003772735595703125, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return map(lambda pair: (pair[0], pair[1], math.sqrt((pair[0] - pair[1]) ** 2)), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.0001621246337890625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((a, b, math.sqrt(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010412931442260742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((a, b, math.sqrt(math.pow(a-b, 2))) for a, b in pairs)", "compilation_passed": true, "time": 0.006906747817993164, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = ((random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.007723808288574219, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = ((random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count))\n    return (tuple(abs(pair[0] - pair[1])**(1/2)) for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.0001621246337890625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((num1, num2, math.sqrt((num1 - num2)**2)) for num1, num2 in pairs)", "compilation_passed": true, "time": 0.00734710693359375, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010412931442260742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (math.sqrt(abs(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((a, b, math.sqrt(math.pow(a-b, 2))) for a, b in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return (", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = random.sample(range(range_start, range_end), pairs_count)\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010865926742553711, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.010825872421264648, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return map(lambda p: (p[0], p[1], math.sqrt(abs(p[0] - p[1]))), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [None] * pairs_count\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.009881973266601562, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return map(lambda x: (x[0], x[1], math.sqrt(math.fabs(x[0] - x[1]))))", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return zip(*(pairs,) * 3)", "compilation_passed": true, "time": 0.007088899612426758, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((num1, num2, math.sqrt(abs(num1 - num2))) for num1, num2 in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (tuple(nums) + (math.sqrt(abs(nums[0]-nums[1])),) for nums in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010412931442260742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (tuple(abs(pair[0] - pair[1])**(1/2)) for pair in pairs)", "compilation_passed": true, "time": 0.010451793670654297, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return zip(*(pairs,) * 3)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (", "compilation_passed": false, "time": 0.00016498565673828125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((a, b, math.sqrt(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((a, b, math.sqrt(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.010065078735351562, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.00015091896057128906, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [None] * pairs_count\n    return zip(*(pairs,) * 3)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (tuple(sorted(pair)) + (math.sqrt(pair[0]-pair[1]), ) for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return zip(*(pairs,) * 3)", "compilation_passed": true, "time": 0.007088899612426758, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((num1, num2, math.sqrt(abs(num1 - num2))) for num1, num2 in pairs)", "compilation_passed": true, "time": 0.0035469532012939453, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [((random.randint(range_start, range_end), random.randint(range_start, range_end))) for _ in range(pairs_count)]\n    return map(lambda x: (x[0], x[1], math.sqrt((x[0] - x[1]) ** 2)), pairs)", "compilation_passed": true, "time": 0.0014808177947998047, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.0001621246337890625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [((random.randint(range_start, range_end), random.randint(range_start, range_end))) for _ in range(pairs_count)]\n    return ((a, b, math.sqrt((a - b) ** 2)) for a, b in pairs)", "compilation_passed": true, "time": 0.0014209747314453125, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.0001621246337890625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.00011301040649414062, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (num1, num2, math.sqrt(abs(num1 - num2))) for num1, num2 in pairs", "compilation_passed": false, "time": 0.0001647472381591797, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.007206916809082031, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (math.sqrt(abs(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.0001621246337890625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [((random.randint(range_start, range_end), random.randint(range_start, range_end))) for _ in range(pairs_count)]\n    return ((a, b, math.sqrt((a - b) ** 2)) for a, b in pairs)", "compilation_passed": true, "time": 0.0014209747314453125, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return zip(*(pairs,) * 3)", "compilation_passed": true, "time": 0.007088899612426758, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((num1, num2, math.sqrt(abs(num1 - num2))) for num1, num2 in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda p: (p[0], p[1], math.sqrt(abs(p[0] - p[1]))), pairs)", "compilation_passed": true, "time": 0.006925106048583984, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((num1, num2, math.sqrt(abs(num1 - num2))) for num1, num2 in pairs)", "compilation_passed": true, "time": 0.0035469532012939453, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010412931442260742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((pair[0], pair[1], math.sqrt(math.fabs(pair[0] - pair[1]))) for pair in pairs)", "compilation_passed": true, "time": 0.003859996795654297, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (", "compilation_passed": false, "time": 0.00016498565673828125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = ((random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count))\n    return ((num1, num2, math.sqrt(abs(num1 - num2))) for num1, num2 in pairs)", "compilation_passed": true, "time": 0.0016646385192871094, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.010825872421264648, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.010825872421264648, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (abs(a-b), a, b) for a,b in pairs", "compilation_passed": false, "time": 0.0001900196075439453, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return zip(*(pairs,) * 3)", "compilation_passed": true, "time": 0.007088899612426758, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.00011301040649414062, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.00011301040649414062, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.0001621246337890625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [tuple(random.randint(range_start, range_end) for i in range(2)) for i in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.003976106643676758, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = ((random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.007723808288574219, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return zip(*(pairs,) * 3)", "compilation_passed": true, "time": 0.007088899612426758, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (math.sqrt(abs(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.006905794143676758, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (num1, num2, math.sqrt(abs(num1 - num2))) for num1, num2 in pairs", "compilation_passed": false, "time": 0.0001647472381591797, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [tuple(random.randint(range_start, range_end) for i in range(2)) for i in range(pairs_count)]\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (tuple(map(math.sqrt, pair)) for pair in pairs)", "compilation_passed": true, "time": 0.00694584846496582, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.00011301040649414062, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((num1, num2, math.sqrt((num1 - num2)**2)) for num1, num2 in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (pair for pair in pairs if math.isclose(pair[0] - pair[1], math.sqrt(pair[0]**2 - pair[1]**2)))", "compilation_passed": true, "time": 0.010276079177856445, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.uniform(range_start, range_end), random.uniform(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010466814041137695, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((pair[0], pair[1], math.sqrt(math.fabs(pair[0] - pair[1]))) for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (tuple(nums) + (math.sqrt(abs(nums[0]-nums[1])),) for nums in pairs)", "compilation_passed": true, "time": 0.0038170814514160156, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((a, b, math.sqrt(math.pow(a-b, 2))) for a, b in pairs)", "compilation_passed": true, "time": 0.006906747817993164, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((num1, num2, math.sqrt(abs(num1 - num2))) for num1, num2 in pairs)", "compilation_passed": true, "time": 0.0035469532012939453, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (tuple(map(math.sqrt, pair)) for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda p: (p[0], p[1], math.sqrt(abs(p[0] - p[1]))), pairs)", "compilation_passed": true, "time": 0.006925106048583984, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = random.sample(range(range_start, range_end), pairs_count)\n    return (tuple(nums) + (math.sqrt(abs(nums[0]-nums[1])),) for nums in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda x: (x[0], x[1], math.sqrt(math.fabs(x[0] - x[1]))))", "compilation_passed": true, "time": 0.010271072387695312, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((num1, num2, math.sqrt((num1 - num2)**2)) for num1, num2 in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010412931442260742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return pairs", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((a, b, round(math.sqrt(abs(a - b)), 6)) for (a, b) in pairs)", "compilation_passed": true, "time": 0.00789785385131836, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda p: (p[0], p[1], math.sqrt(abs(p[0] - p[1]))), pairs)", "compilation_passed": true, "time": 0.006925106048583984, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (num1, num2, math.sqrt(abs(num1 - num2))) for num1, num2 in pairs", "compilation_passed": false, "time": 0.0001647472381591797, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda pair: (pair[0], pair[1], math.sqrt((pair[0] - pair[1]) ** 2)), pairs)", "compilation_passed": true, "time": 0.007467985153198242, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.uniform(range_start, range_end), random.uniform(range_start, range_end))\n    return ((a, b, math.sqrt((a - b) ** 2)) for a, b in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((a, b, round(math.sqrt(abs(a - b)), 6)) for (a, b) in pairs)", "compilation_passed": true, "time": 0.00789785385131836, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (abs(a-b), a, b) for a,b in pairs", "compilation_passed": false, "time": 0.0001900196075439453, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((a, b, round(math.sqrt(abs(a - b)), 6)) for (a, b) in pairs)", "compilation_passed": true, "time": 0.00789785385131836, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [((random.randint(range_start, range_end), random.randint(range_start, range_end))) for _ in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.003772735595703125, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return map(lambda x: (x[0], x[1], math.sqrt((x[0] - x[1]) ** 2)), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [None] * pairs_count\n    return (abs(a-b), a, b) for a,b in pairs", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = ((random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.007723808288574219, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((a, b, math.sqrt((a - b) ** 2)) for a, b in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return pairs", "compilation_passed": true, "time": 0.008761882781982422, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda x: (x[0], x[1], math.sqrt((x[0] - x[1]) ** 2)), pairs)", "compilation_passed": true, "time": 0.0071179866790771484, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.00011301040649414062, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((a, b, math.sqrt(math.pow(a-b, 2))) for a, b in pairs)", "compilation_passed": true, "time": 0.006906747817993164, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (tuple(abs(pair[0] - pair[1])**(1/2)) for pair in pairs)", "compilation_passed": true, "time": 0.010451793670654297, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010412931442260742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((a, b, math.sqrt(math.pow(a-b, 2))) for a, b in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda x: (x[0], x[1], math.sqrt((x[0] - x[1]) ** 2)), pairs)", "compilation_passed": true, "time": 0.0071179866790771484, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.010825872421264648, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.007206916809082031, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda p: (p[0], p[1], math.sqrt(abs(p[0] - p[1]))), pairs)", "compilation_passed": true, "time": 0.006925106048583984, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.uniform(range_start, range_end), random.uniform(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010466814041137695, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((num1, num2, math.sqrt(abs(num1 - num2))) for num1, num2 in pairs)", "compilation_passed": true, "time": 0.0035469532012939453, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (\n    return (tuple(abs(pair[0] - pair[1])**(1/2)) for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (\n    return (abs(a-b), a, b) for a,b in pairs", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (num1, num2, math.sqrt(abs(num1 - num2))) for num1, num2 in pairs", "compilation_passed": false, "time": 0.0001647472381591797, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.uniform(range_start, range_end), random.uniform(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010466814041137695, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda p: (p[0], p[1], math.sqrt(abs(p[0] - p[1]))), pairs)", "compilation_passed": true, "time": 0.006925106048583984, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((pair[0], pair[1], math.sqrt(math.fabs(pair[0] - pair[1]))) for pair in pairs)", "compilation_passed": true, "time": 0.003859996795654297, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (tuple(map(math.sqrt, pair)) for pair in pairs)", "compilation_passed": true, "time": 0.00694584846496582, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return map(lambda x: (x[0], x[1], math.sqrt((x[0] - x[1]) ** 2)), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return pairs", "compilation_passed": true, "time": 0.008761882781982422, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (math.sqrt(abs(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.006905794143676758, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (tuple(map(math.sqrt, pair)) for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return pairs", "compilation_passed": true, "time": 0.008761882781982422, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return pairs", "compilation_passed": true, "time": 0.008761882781982422, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.uniform(range_start, range_end), random.uniform(range_start, range_end))\n    return (tuple(abs(pair[0] - pair[1])**(1/2)) for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((a, b, math.sqrt(math.pow(a-b, 2))) for a, b in pairs)", "compilation_passed": true, "time": 0.006906747817993164, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010412931442260742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.00011301040649414062, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = random.sample(range(range_start, range_end), pairs_count)\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010865926742553711, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda x: (x[0], x[1], math.sqrt((x[0] - x[1]) ** 2)), pairs)", "compilation_passed": true, "time": 0.0071179866790771484, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((a, b, round(math.sqrt(abs(a - b)), 6)) for (a, b) in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((num1, num2, math.sqrt((num1 - num2)**2)) for num1, num2 in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (num1, num2, math.sqrt(abs(num1 - num2))) for num1, num2 in pairs", "compilation_passed": false, "time": 0.0001647472381591797, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = ((random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count))\n    return pairs", "compilation_passed": true, "time": 0.0013492107391357422, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [None] * pairs_count\n    return map(lambda x: (x[0], x[1], math.sqrt((x[0] - x[1]) ** 2)), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.uniform(range_start, range_end), random.uniform(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010466814041137695, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.010825872421264648, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((a, b, math.sqrt(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.010065078735351562, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.00015091896057128906, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (math.sqrt(abs(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.006905794143676758, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (", "compilation_passed": false, "time": 0.00016498565673828125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.007206916809082031, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda pair: (pair[0], pair[1], math.sqrt((pair[0] - pair[1]) ** 2)), pairs)", "compilation_passed": true, "time": 0.007467985153198242, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [tuple(random.randint(range_start, range_end) for i in range(2)) for i in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.003976106643676758, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [((random.randint(range_start, range_end), random.randint(range_start, range_end))) for _ in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.003772735595703125, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = random.sample(range(range_start, range_end), pairs_count)\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010865926742553711, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.007206916809082031, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (tuple(abs(pair[0] - pair[1])**(1/2)) for pair in pairs)", "compilation_passed": true, "time": 0.010451793670654297, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (tuple(map(math.sqrt, pair)) for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [((random.randint(range_start, range_end), random.randint(range_start, range_end))) for _ in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.003772735595703125, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda x: (x[0], x[1], math.sqrt(math.fabs(x[0] - x[1]))))", "compilation_passed": true, "time": 0.010271072387695312, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [tuple(random.randint(range_start, range_end) for i in range(2)) for i in range(pairs_count)]\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0014657974243164062, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [None] * pairs_count\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.009881973266601562, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.007206916809082031, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.007206916809082031, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.00015091896057128906, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [None] * pairs_count\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.009881973266601562, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.00011301040649414062, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((num1, num2, math.sqrt((num1 - num2)**2)) for num1, num2 in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((num1, num2, math.sqrt((num1 - num2)**2)) for num1, num2 in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [((random.randint(range_start, range_end), random.randint(range_start, range_end))) for _ in range(pairs_count)]\n    return (abs(a-b), a, b) for a,b in pairs", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((a, b, math.sqrt(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.00015091896057128906, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((pair[0], pair[1], math.sqrt(math.fabs(pair[0] - pair[1]))) for pair in pairs)", "compilation_passed": true, "time": 0.003859996795654297, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((pair[0], pair[1], math.sqrt(math.fabs(pair[0] - pair[1]))) for pair in pairs)", "compilation_passed": true, "time": 0.003859996795654297, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda x: (x[0], x[1], math.sqrt((x[0] - x[1]) ** 2)), pairs)", "compilation_passed": true, "time": 0.0071179866790771484, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda p: (p[0], p[1], math.sqrt(abs(p[0] - p[1]))), pairs)", "compilation_passed": true, "time": 0.006925106048583984, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (", "compilation_passed": false, "time": 0.00016498565673828125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (pair for pair in pairs if math.isclose(pair[0] - pair[1], math.sqrt(pair[0]**2 - pair[1]**2)))", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010412931442260742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (pair for pair in pairs if math.isclose(pair[0] - pair[1], math.sqrt(pair[0]**2 - pair[1]**2)))", "compilation_passed": true, "time": 0.010276079177856445, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.0038819313049316406, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return (math.sqrt(abs(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (tuple(sorted(pair)) + (math.sqrt(pair[0]-pair[1]), ) for pair in pairs)", "compilation_passed": true, "time": 0.010293960571289062, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (math.sqrt(abs(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.006905794143676758, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return pairs", "compilation_passed": true, "time": 0.008761882781982422, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [None] * pairs_count\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.009881973266601562, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((a, b, round(math.sqrt(abs(a - b)), 6)) for (a, b) in pairs)", "compilation_passed": true, "time": 0.00789785385131836, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (tuple(map(math.sqrt, pair)) for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = ((random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count))\n    return ((a, b, math.sqrt(math.pow(a-b, 2))) for a, b in pairs)", "compilation_passed": true, "time": 0.0014498233795166016, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.0038819313049316406, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.010825872421264648, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.007206916809082031, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (tuple(abs(pair[0] - pair[1])**(1/2)) for pair in pairs)", "compilation_passed": true, "time": 0.010451793670654297, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (\n    return (tuple(map(math.sqrt, pair)) for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((a, b, math.sqrt(math.pow(a-b, 2))) for a, b in pairs)", "compilation_passed": true, "time": 0.006906747817993164, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [\n    return ((a, b, math.sqrt((a - b) ** 2)) for a, b in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.0001621246337890625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (\n    return (tuple(nums) + (math.sqrt(abs(nums[0]-nums[1])),) for nums in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [tuple(random.randint(range_start, range_end) for i in range(2)) for i in range(pairs_count)]\n    return map(lambda p: (p[0], p[1], math.sqrt(abs(p[0] - p[1]))), pairs)", "compilation_passed": true, "time": 0.0013661384582519531, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda x: (x[0], x[1], math.sqrt((x[0] - x[1]) ** 2)), pairs)", "compilation_passed": true, "time": 0.0071179866790771484, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.0038819313049316406, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010412931442260742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((a, b, math.sqrt(math.pow(a-b, 2))) for a, b in pairs)", "compilation_passed": true, "time": 0.006906747817993164, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.00011301040649414062, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.010825872421264648, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [((random.randint(range_start, range_end), random.randint(range_start, range_end))) for _ in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.003772735595703125, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((num1, num2, math.sqrt((num1 - num2)**2)) for num1, num2 in pairs)", "compilation_passed": true, "time": 0.00734710693359375, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (tuple(map(math.sqrt, pair)) for pair in pairs)", "compilation_passed": true, "time": 0.00694584846496582, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010412931442260742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return pairs", "compilation_passed": true, "time": 0.008761882781982422, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (tuple(map(math.sqrt, pair)) for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((a, b, math.sqrt(math.pow(a-b, 2))) for a, b in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return pairs", "compilation_passed": true, "time": 0.008761882781982422, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.010825872421264648, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (", "compilation_passed": false, "time": 0.00016498565673828125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.uniform(range_start, range_end), random.uniform(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010466814041137695, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (abs(a-b), a, b) for a,b in pairs", "compilation_passed": false, "time": 0.0001900196075439453, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (abs(a-b), a, b) for a,b in pairs", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (abs(a-b), a, b) for a,b in pairs", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [((random.randint(range_start, range_end), random.randint(range_start, range_end))) for _ in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.003772735595703125, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return map(lambda pair: (pair[0], pair[1], math.sqrt((pair[0] - pair[1]) ** 2)), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.0001621246337890625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((a, b, math.sqrt(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010412931442260742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((a, b, math.sqrt(math.pow(a-b, 2))) for a, b in pairs)", "compilation_passed": true, "time": 0.006906747817993164, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = ((random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.007723808288574219, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = ((random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count))\n    return (tuple(abs(pair[0] - pair[1])**(1/2)) for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.0001621246337890625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((num1, num2, math.sqrt((num1 - num2)**2)) for num1, num2 in pairs)", "compilation_passed": true, "time": 0.00734710693359375, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010412931442260742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (math.sqrt(abs(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((a, b, math.sqrt(math.pow(a-b, 2))) for a, b in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return (", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = random.sample(range(range_start, range_end), pairs_count)\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010865926742553711, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.010825872421264648, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return map(lambda p: (p[0], p[1], math.sqrt(abs(p[0] - p[1]))), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [None] * pairs_count\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.009881973266601562, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return map(lambda x: (x[0], x[1], math.sqrt(math.fabs(x[0] - x[1]))))", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return zip(*(pairs,) * 3)", "compilation_passed": true, "time": 0.007088899612426758, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((num1, num2, math.sqrt(abs(num1 - num2))) for num1, num2 in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (tuple(nums) + (math.sqrt(abs(nums[0]-nums[1])),) for nums in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010412931442260742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (tuple(abs(pair[0] - pair[1])**(1/2)) for pair in pairs)", "compilation_passed": true, "time": 0.010451793670654297, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return zip(*(pairs,) * 3)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (", "compilation_passed": false, "time": 0.00016498565673828125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((a, b, math.sqrt(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((a, b, math.sqrt(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.010065078735351562, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.00015091896057128906, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [None] * pairs_count\n    return zip(*(pairs,) * 3)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (tuple(sorted(pair)) + (math.sqrt(pair[0]-pair[1]), ) for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return zip(*(pairs,) * 3)", "compilation_passed": true, "time": 0.007088899612426758, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((num1, num2, math.sqrt(abs(num1 - num2))) for num1, num2 in pairs)", "compilation_passed": true, "time": 0.0035469532012939453, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [((random.randint(range_start, range_end), random.randint(range_start, range_end))) for _ in range(pairs_count)]\n    return map(lambda x: (x[0], x[1], math.sqrt((x[0] - x[1]) ** 2)), pairs)", "compilation_passed": true, "time": 0.0014808177947998047, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.0001621246337890625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [((random.randint(range_start, range_end), random.randint(range_start, range_end))) for _ in range(pairs_count)]\n    return ((a, b, math.sqrt((a - b) ** 2)) for a, b in pairs)", "compilation_passed": true, "time": 0.0014209747314453125, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.0001621246337890625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.00011301040649414062, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (num1, num2, math.sqrt(abs(num1 - num2))) for num1, num2 in pairs", "compilation_passed": false, "time": 0.0001647472381591797, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.007206916809082031, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (math.sqrt(abs(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.0001621246337890625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [((random.randint(range_start, range_end), random.randint(range_start, range_end))) for _ in range(pairs_count)]\n    return ((a, b, math.sqrt((a - b) ** 2)) for a, b in pairs)", "compilation_passed": true, "time": 0.0014209747314453125, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return zip(*(pairs,) * 3)", "compilation_passed": true, "time": 0.007088899612426758, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((num1, num2, math.sqrt(abs(num1 - num2))) for num1, num2 in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda p: (p[0], p[1], math.sqrt(abs(p[0] - p[1]))), pairs)", "compilation_passed": true, "time": 0.006925106048583984, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((num1, num2, math.sqrt(abs(num1 - num2))) for num1, num2 in pairs)", "compilation_passed": true, "time": 0.0035469532012939453, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010412931442260742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((pair[0], pair[1], math.sqrt(math.fabs(pair[0] - pair[1]))) for pair in pairs)", "compilation_passed": true, "time": 0.003859996795654297, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (", "compilation_passed": false, "time": 0.00016498565673828125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = ((random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count))\n    return ((num1, num2, math.sqrt(abs(num1 - num2))) for num1, num2 in pairs)", "compilation_passed": true, "time": 0.0016646385192871094, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (abs(a-b), a, b) for a,b in pairs", "compilation_passed": false, "time": 0.0001900196075439453, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010412931442260742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.00011301040649414062, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.010825872421264648, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.uniform(range_start, range_end), random.uniform(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010466814041137695, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (tuple(sorted(pair)) + (math.sqrt(pair[0]-pair[1]), ) for pair in pairs)", "compilation_passed": true, "time": 0.010293960571289062, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (num1, num2, math.sqrt(abs(num1 - num2))) for num1, num2 in pairs", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.uniform(range_start, range_end), random.uniform(range_start, range_end))\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda x: (x[0], x[1], math.sqrt(math.fabs(x[0] - x[1]))))", "compilation_passed": true, "time": 0.010271072387695312, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = ((random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.007723808288574219, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (", "compilation_passed": false, "time": 0.00016498565673828125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda p: (p[0], p[1], math.sqrt(abs(p[0] - p[1]))), pairs)", "compilation_passed": true, "time": 0.006925106048583984, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((num1, num2, math.sqrt(abs(num1 - num2))) for num1, num2 in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return zip(*(pairs,) * 3)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return map(lambda x: (x[0], x[1], math.sqrt((x[0] - x[1]) ** 2)), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return zip(*(pairs,) * 3)", "compilation_passed": true, "time": 0.007088899612426758, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = ((random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.007723808288574219, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (tuple(abs(pair[0] - pair[1])**(1/2)) for pair in pairs)", "compilation_passed": true, "time": 0.010451793670654297, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (tuple(nums) + (math.sqrt(abs(nums[0]-nums[1])),) for nums in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda p: (p[0], p[1], math.sqrt(abs(p[0] - p[1]))), pairs)", "compilation_passed": true, "time": 0.006925106048583984, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (pair for pair in pairs if math.isclose(pair[0] - pair[1], math.sqrt(pair[0]**2 - pair[1]**2)))", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [None] * pairs_count\n    return (tuple(nums) + (math.sqrt(abs(nums[0]-nums[1])),) for nums in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [((random.randint(range_start, range_end), random.randint(range_start, range_end))) for _ in range(pairs_count)]\n    return ((a, b, math.sqrt(math.pow(a-b, 2))) for a, b in pairs)", "compilation_passed": true, "time": 0.001425027847290039, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (num1, num2, math.sqrt(abs(num1 - num2))) for num1, num2 in pairs", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((pair[0], pair[1], math.sqrt(math.fabs(pair[0] - pair[1]))) for pair in pairs)", "compilation_passed": true, "time": 0.003859996795654297, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (tuple(map(math.sqrt, pair)) for pair in pairs)", "compilation_passed": true, "time": 0.00694584846496582, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.00015091896057128906, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (math.sqrt(abs(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.006905794143676758, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (", "compilation_passed": false, "time": 0.00016498565673828125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.007206916809082031, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda pair: (pair[0], pair[1], math.sqrt((pair[0] - pair[1]) ** 2)), pairs)", "compilation_passed": true, "time": 0.007467985153198242, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [tuple(random.randint(range_start, range_end) for i in range(2)) for i in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.003976106643676758, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [((random.randint(range_start, range_end), random.randint(range_start, range_end))) for _ in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.003772735595703125, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = random.sample(range(range_start, range_end), pairs_count)\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010865926742553711, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.007206916809082031, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (tuple(abs(pair[0] - pair[1])**(1/2)) for pair in pairs)", "compilation_passed": true, "time": 0.010451793670654297, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (tuple(map(math.sqrt, pair)) for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [((random.randint(range_start, range_end), random.randint(range_start, range_end))) for _ in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.003772735595703125, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda x: (x[0], x[1], math.sqrt(math.fabs(x[0] - x[1]))))", "compilation_passed": true, "time": 0.010271072387695312, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [tuple(random.randint(range_start, range_end) for i in range(2)) for i in range(pairs_count)]\n    return map(lambda pair: (pair[0], pair[1], math.sqrt(abs(pair[0] - pair[1]))), pairs)", "compilation_passed": true, "time": 0.0014657974243164062, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [None] * pairs_count\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.009881973266601562, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.007206916809082031, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.007206916809082031, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.00015091896057128906, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [None] * pairs_count\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.009881973266601562, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [\n    return (pair for pair in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.00011301040649414062, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((num1, num2, math.sqrt((num1 - num2)**2)) for num1, num2 in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((num1, num2, math.sqrt((num1 - num2)**2)) for num1, num2 in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [((random.randint(range_start, range_end), random.randint(range_start, range_end))) for _ in range(pairs_count)]\n    return (abs(a-b), a, b) for a,b in pairs", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((a, b, math.sqrt(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": false, "time": 0.00015091896057128906, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((pair[0], pair[1], math.sqrt(math.fabs(pair[0] - pair[1]))) for pair in pairs)", "compilation_passed": true, "time": 0.003859996795654297, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((pair[0], pair[1], math.sqrt(math.fabs(pair[0] - pair[1]))) for pair in pairs)", "compilation_passed": true, "time": 0.003859996795654297, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda x: (x[0], x[1], math.sqrt((x[0] - x[1]) ** 2)), pairs)", "compilation_passed": true, "time": 0.0071179866790771484, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return map(lambda p: (p[0], p[1], math.sqrt(abs(p[0] - p[1]))), pairs)", "compilation_passed": true, "time": 0.006925106048583984, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (", "compilation_passed": false, "time": 0.00016498565673828125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36, 37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (pair for pair in pairs if math.isclose(pair[0] - pair[1], math.sqrt(pair[0]**2 - pair[1]**2)))", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.010412931442260742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (pair for pair in pairs if math.isclose(pair[0] - pair[1], math.sqrt(pair[0]**2 - pair[1]**2)))", "compilation_passed": true, "time": 0.010276079177856445, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.0038819313049316406, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = (random.randint(range_start, range_end), random.randint(range_start, range_end))\n    return (math.sqrt(abs(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (tuple(sorted(pair)) + (math.sqrt(pair[0]-pair[1]), ) for pair in pairs)", "compilation_passed": true, "time": 0.010293960571289062, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return (math.sqrt(abs(a - b)) for a, b in pairs)", "compilation_passed": true, "time": 0.006905794143676758, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37, 36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return (", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return pairs", "compilation_passed": true, "time": 0.008761882781982422, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [None] * pairs_count\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.009881973266601562, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = []\n    return ((x, y, math.sqrt(abs(x - y))) for x, y in pairs)", "compilation_passed": true, "time": 0.008940935134887695, "tests_passed": false, "error": "StopIteration"}}
{"selected_lines": [37], "result": {"code": "import random\nimport math\n\n\ndef task_func(range_start=1, range_end=100, pairs_count=10, random_seed=None):\n    \"\"\"\n    Create a generator object that generates a sequence of tuples.\n    Each tuple contains two random numbers and the square root of their\n    absolute difference.\n\n    A random seed is used to have reproducability in the outputs.\n\n    Parameters:\n    - range_start (int): The start of the range for random numbers. Default is 1.\n    - range_end (int): The end of the range for random numbers. Default is 100.\n    - pairs_count (int): The number of pairs to generate. Default is 10.\n    - random_seed (int): Seed used for rng. Default is None.\n    \n    Returns:\n    generator: A generator object that produces tuples in the format\n               (num1, num2, square root of absolute difference).\n\n    Requirements:\n    - random\n    - math\n\n    Example:\n    >>> pairs = task_func(random_seed=1)\n    >>> print(next(pairs))\n    (18, 73, 7.416198487095663)\n    \n    >>> pairs = task_func(1, 3, pairs_count=25, random_seed=14)\n    >>> print(next(pairs))\n    (1, 3, 1.4142135623730951)\n    \"\"\"\n    random.seed(random_seed)\n    pairs = [(random.randint(range_start, range_end), random.randint(range_start, range_end)) for _ in range(pairs_count)]\n    return ((a, b, round(math.sqrt(abs(a - b)), 6)) for (a, b) in pairs)", "compilation_passed": true, "time": 0.00789785385131836, "tests_passed": true, "error": null}}
