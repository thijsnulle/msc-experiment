{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(8, 8))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.5051119327545166, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, random_state=0)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return (pca_result, ax)", "compilation_passed": true, "time": 0.11224508285522461, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 30, 32, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1)\n    ax.scatter(*zip(*data), marker='o')\n    return pca_result, ax", "compilation_passed": true, "time": 0.11119794845581055, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*pca_result.T)\n    return pca_result, ax", "compilation_passed": true, "time": 0.1433558464050293, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, random_state=0)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12015509605407715, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS).fit(data)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12385201454162598, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [29, 28, 32, 30, 31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(15, 10))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.10622000694274902, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [28, 32, 30, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L).reshape(len(L),-1)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return (pca_result, ax)", "compilation_passed": true, "time": 0.11613202095031738, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, axes = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.024521827697753906, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1344740390777588, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.05081295967102051, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [29, 28, 32, 30, 31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(15, 10))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.10622000694274902, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [29, 28, 32, 30, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return (pca_result, ax)", "compilation_passed": true, "time": 0.11330103874206543, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 33, 30, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, figsize=(6, 6))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.10642790794372559, "tests_passed": true, "error": null}}
{"selected_lines": [28, 29, 31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS).fit(data)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(15, 10))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.10816407203674316, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12069892883300781, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1)\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11793994903564453, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T).T\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.028615951538085938, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 31, 28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, figsize=(6, 6))\n    ax.scatter(*zip(*data), marker='o')\n    return pca_result, ax", "compilation_passed": true, "time": 0.11637020111083984, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 28, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, fig", "compilation_passed": true, "time": 0.021875381469726562, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 30, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, axes = plt.subplots()\n    ax.scatter(*zip(*data))\n    return pca_result, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 32, 31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11191773414611816, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*data), alpha=0.5)\n    return pca_result, ax", "compilation_passed": true, "time": 0.14325189590454102, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [28, 29, 32, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L).reshape(len(L),-1)\n    pca = PCA(n_components=N_COMPONENTS).fit(data)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*pca_result.T)\n    return pca_result, ax", "compilation_passed": true, "time": 0.10798788070678711, "tests_passed": true, "error": null}}
{"selected_lines": [29, 28, 33, 32, 31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, fig", "compilation_passed": true, "time": 0.02874922752380371, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(7, 7))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.13709092140197754, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12069892883300781, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*pca_result.T)\n    return pca_result, ax", "compilation_passed": true, "time": 0.1433558464050293, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, random_state=0)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12015509605407715, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 31, 28, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, svd_solver='full')\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.10784792900085449, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*data), alpha=0.5)\n    return pca_result, ax", "compilation_passed": true, "time": 0.14325189590454102, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 32, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1], c=\"k\")\n    return (pca_result, ax)", "compilation_passed": true, "time": 0.11712288856506348, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, svd_solver='full')\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12331199645996094, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, random_state=0)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12015509605407715, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 31, 28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(8, 8))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.10702800750732422, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 28, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1], color=\"black\")\n    return (pca_result, ax)", "compilation_passed": true, "time": 0.10790801048278809, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 28, 29, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T).T\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.02204298973083496, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, svd_solver='full')\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12331199645996094, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS).fit(data)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12385201454162598, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(8, 8))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.5051119327545166, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 30, 33, 28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS).fit(data)\n    pca_result = pca.fit_transform(data.T).T\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, fig", "compilation_passed": true, "time": 0.02270364761352539, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 31, 28, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, svd_solver='full')\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.10784792900085449, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS).fit(data)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12385201454162598, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 31, 28, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, svd_solver='full')\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.10784792900085449, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1344740390777588, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, axes = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1], color=\"black\")\n    return pca_result, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*pca_result.T)\n    return pca_result, ax", "compilation_passed": true, "time": 0.10757088661193848, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, fig", "compilation_passed": true, "time": 0.0263369083404541, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1], c=\"k\")\n    return pca_result, ax", "compilation_passed": true, "time": 0.14231610298156738, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T).T\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.028615951538085938, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 29, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS).fit(data)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.13015198707580566, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(5, 5))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1233217716217041, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*data), marker='o')\n    return pca_result, ax", "compilation_passed": true, "time": 0.12227201461791992, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1], c=np.arange(pca_result.shape[0]), s=200, alpha=0.5, cmap='rainbow', linewidth=1)\n    return pca_result, ax", "compilation_passed": true, "time": 0.12235903739929199, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 30, 28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1, figsize=(10, 10))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.10763096809387207, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, svd_solver='full')\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12331199645996094, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1], c=\"k\")\n    return pca_result, ax", "compilation_passed": true, "time": 0.14231610298156738, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L).reshape(-1, len(L[0]))\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11869502067565918, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 28, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, fig", "compilation_passed": true, "time": 0.021875381469726562, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 28, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1082770824432373, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 28, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1082770824432373, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12069892883300781, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32, 28, 30, 31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(*pca_result.T)\n    return pca_result, ax", "compilation_passed": true, "time": 0.10834097862243652, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 33, 29, 28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1, figsize=(10, 10))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11704778671264648, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 28, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L).reshape(-1, len(L[0]))\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.10880088806152344, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 33, 28, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11581897735595703, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*pca_result.T)\n    return pca_result, ax", "compilation_passed": true, "time": 0.1433558464050293, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L).reshape(len(L),-1)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11304283142089844, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(8, 8))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11370396614074707, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 33, 29, 28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1, figsize=(10, 10))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11704778671264648, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1344740390777588, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 32, 31, 30], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1], c=\"k\")\n    return pca_result, ax", "compilation_passed": true, "time": 0.1088261604309082, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1], color=\"black\")\n    return pca_result, ax", "compilation_passed": true, "time": 0.1146860122680664, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 32, 28, 30], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L).reshape(-1, len(L[0]))\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11942887306213379, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(15, 10))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1255638599395752, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L).reshape(-1, len(L[0]))\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11869502067565918, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 31, 28, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, svd_solver='full')\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.10784792900085449, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.05081295967102051, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 28, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1082770824432373, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 28, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, fig", "compilation_passed": true, "time": 0.021875381469726562, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 33, 31, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, axes = plt.subplots()\n    ax.scatter(*zip(*data))\n    return pca_result, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [29, 28, 32, 30, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return (pca_result, ax)", "compilation_passed": true, "time": 0.11330103874206543, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 32, 31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11191773414611816, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 33, 32, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, random_state=0)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.10877394676208496, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*data), alpha=0.5)\n    return pca_result, ax", "compilation_passed": true, "time": 0.14325189590454102, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 32, 31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11191773414611816, "tests_passed": true, "error": null}}
{"selected_lines": [33, 28, 30], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, fig", "compilation_passed": true, "time": 0.022182226181030273, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*data), alpha=0.5)\n    return pca_result, ax", "compilation_passed": true, "time": 0.14325189590454102, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*data))\n    return pca_result, ax", "compilation_passed": true, "time": 0.12662386894226074, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 28, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L).reshape(-1, len(L[0]))\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.10880088806152344, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 33, 32, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, random_state=0)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.10877394676208496, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 33, 32, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, random_state=0)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.10877394676208496, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, figsize=(6, 6))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12227416038513184, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1)\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11668086051940918, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L).reshape(-1, len(L[0]))\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11869502067565918, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 33, 32, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, random_state=0)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.10877394676208496, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, svd_solver='full')\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12331199645996094, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.05081295967102051, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12069892883300781, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, svd_solver='full')\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12331199645996094, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1, figsize=(10, 10))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.13689327239990234, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*pca_result.T)\n    return pca_result, fig", "compilation_passed": true, "time": 0.02279806137084961, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 33, 32, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, random_state=0)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.10877394676208496, "tests_passed": true, "error": null}}
{"selected_lines": [33, 28, 30], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, fig", "compilation_passed": true, "time": 0.022182226181030273, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 28, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1082770824432373, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return (pca_result, ax)", "compilation_passed": true, "time": 0.1172189712524414, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 30, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T)\n    fig, ax = plt.subplots(figsize=(15, 10))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.04489898681640625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, random_state=0)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12015509605407715, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12069892883300781, "tests_passed": true, "error": null}}
{"selected_lines": [29, 28, 32, 30, 31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(15, 10))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.10622000694274902, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.14093589782714844, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1], color=\"black\")\n    return pca_result, ax", "compilation_passed": true, "time": 0.1146860122680664, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12069892883300781, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(7, 7))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.13709092140197754, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 28, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1082770824432373, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(15, 10))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1255638599395752, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return (pca_result, ax)", "compilation_passed": true, "time": 0.1172189712524414, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 32, 31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11191773414611816, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*pca_result.T)\n    return pca_result, ax", "compilation_passed": true, "time": 0.1433558464050293, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1)\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11668086051940918, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1344740390777588, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1], c=\"k\")\n    return pca_result, ax", "compilation_passed": true, "time": 0.14231610298156738, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 28, 31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, axes = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1], color=\"black\")\n    return pca_result, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 31, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, figsize=(6, 6))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1187129020690918, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 31, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(5, 5))\n    ax.scatter(*zip(*data), marker='o')\n    return pca_result, ax", "compilation_passed": true, "time": 0.10953783988952637, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*pca_result.T)\n    return pca_result, ax", "compilation_passed": true, "time": 0.1433558464050293, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*pca_result.T)\n    return pca_result, ax", "compilation_passed": true, "time": 0.1433558464050293, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12069892883300781, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 28, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1082770824432373, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 31, 28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1)\n    ax.scatter(*pca_result.T)\n    return pca_result, ax", "compilation_passed": true, "time": 0.1154167652130127, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 28, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1082770824432373, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12069892883300781, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 31, 30, 28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T)\n    fig, ax = plt.subplots(figsize=(7, 7))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.0441441535949707, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(5, 5))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1233217716217041, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, random_state=0)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12015509605407715, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 31, 28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1)\n    ax.scatter(*pca_result.T)\n    return pca_result, ax", "compilation_passed": true, "time": 0.1154167652130127, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(7, 7))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.13709092140197754, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 33, 31, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, svd_solver='full')\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, figsize=(6, 6))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1094369888305664, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(8, 8))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.5051119327545166, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1)\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11668086051940918, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [28, 32, 29, 30, 31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, svd_solver='full')\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*data), marker='o')\n    return pca_result, ax", "compilation_passed": true, "time": 0.1269819736480713, "tests_passed": true, "error": null}}
{"selected_lines": [32, 28, 31, 29, 30], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, random_state=0)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1, figsize=(10, 10))\n    ax.scatter(*zip(*data), alpha=0.5)\n    return pca_result, ax", "compilation_passed": true, "time": 0.1102149486541748, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 33, 29, 28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1, figsize=(10, 10))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11704778671264648, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, svd_solver='full')\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12331199645996094, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 33, 28, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11581897735595703, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(*zip(*data), marker='o')\n    return pca_result, ax", "compilation_passed": true, "time": 0.11282587051391602, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 29, 32, 28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, random_state=0)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*pca_result.T)\n    return pca_result, ax", "compilation_passed": true, "time": 0.11133790016174316, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1)\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11668086051940918, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T).T\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.028615951538085938, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, random_state=0)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12015509605407715, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 28, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1082770824432373, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 30, 28, 31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L).reshape(-1, len(L[0]))\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(5, 5))\n    ax.scatter(*zip(*data), alpha=0.5)\n    return pca_result, fig", "compilation_passed": true, "time": 0.02298593521118164, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [29, 28, 32, 30, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return (pca_result, ax)", "compilation_passed": true, "time": 0.11330103874206543, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 31, 28, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, svd_solver='full')\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.10784792900085449, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1344740390777588, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12069892883300781, "tests_passed": true, "error": null}}
{"selected_lines": [28, 31, 29, 33, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L).reshape(len(L),-1)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1)\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12111783027648926, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12069892883300781, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(8, 8))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11370396614074707, "tests_passed": true, "error": null}}
{"selected_lines": [29, 28, 32, 30, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return (pca_result, ax)", "compilation_passed": true, "time": 0.11330103874206543, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [28, 29, 33, 30, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*data), marker='o')\n    return (pca_result, ax)", "compilation_passed": true, "time": 0.11627984046936035, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 28, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L).reshape(-1, len(L[0]))\n    pca = PCA(n_components=N_COMPONENTS, svd_solver='full')\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(5, 5))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11930012702941895, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L).reshape(len(L),-1)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11304283142089844, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*data), alpha=0.5)\n    return pca_result, ax", "compilation_passed": true, "time": 0.14325189590454102, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*data), alpha=0.5)\n    return pca_result, ax", "compilation_passed": true, "time": 0.14325189590454102, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31, 29, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS).fit(data)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(7, 7))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11160826683044434, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 31, 32, 28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, svd_solver='full')\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(pca_result[:,0], pca_result[:,1], c=np.arange(pca_result.shape[0]), s=200, alpha=0.5, cmap='rainbow', linewidth=1)\n    return pca_result, ax", "compilation_passed": true, "time": 0.11169791221618652, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 28, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1082770824432373, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*data), marker='o')\n    return pca_result, ax", "compilation_passed": true, "time": 0.12227201461791992, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 33, 30, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, figsize=(6, 6))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.10642790794372559, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12069892883300781, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 28, 32, 30], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS).fit(data)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*pca_result.T)\n    return pca_result, ax", "compilation_passed": true, "time": 0.12333393096923828, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L).reshape(len(L),-1)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11304283142089844, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L).reshape(len(L),-1)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11304283142089844, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 33, 29, 28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1, figsize=(10, 10))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11704778671264648, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1], color=\"black\")\n    return pca_result, ax", "compilation_passed": true, "time": 0.1146860122680664, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 32, 31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11191773414611816, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 31, 30, 28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T)\n    fig, ax = plt.subplots(figsize=(7, 7))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.0441441535949707, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1)\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11668086051940918, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, svd_solver='full')\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12331199645996094, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1, figsize=(10, 10))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.13689327239990234, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12069892883300781, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1], c=\"k\")\n    return pca_result, ax", "compilation_passed": true, "time": 0.14231610298156738, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return (pca_result, ax)", "compilation_passed": true, "time": 0.1172189712524414, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [28, 30, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L).reshape(len(L),-1)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11252188682556152, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 28, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1082770824432373, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 28, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(*zip(*data))\n    return pca_result, ax", "compilation_passed": true, "time": 0.11247897148132324, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 30, 32, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1)\n    ax.scatter(*zip(*data), alpha=0.5)\n    return pca_result, ax", "compilation_passed": true, "time": 0.12452578544616699, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 33, 30, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(7, 7))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12272095680236816, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 31, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(5, 5))\n    ax.scatter(*pca_result.T)\n    return pca_result, ax", "compilation_passed": true, "time": 0.11260581016540527, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*data), alpha=0.5)\n    return pca_result, ax", "compilation_passed": true, "time": 0.14325189590454102, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(7, 7))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.13709092140197754, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 28, 30, 31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L).reshape(len(L),-1)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, axes = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30, 33, 31, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1], color=\"black\")\n    return pca_result, ax", "compilation_passed": true, "time": 0.11181378364562988, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1344740390777588, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, fig", "compilation_passed": true, "time": 0.0263369083404541, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12069892883300781, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [28, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS, svd_solver='full')\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11289715766906738, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*pca_result.T)\n    return pca_result, ax", "compilation_passed": true, "time": 0.1433558464050293, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 28, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, fig", "compilation_passed": true, "time": 0.021875381469726562, "tests_passed": true, "error": null}}
{"selected_lines": [32, 28, 31, 33, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L).reshape(-1, len(L[0]))\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, figsize=(6, 6))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231689453125, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*pca_result.T)\n    return pca_result, ax", "compilation_passed": true, "time": 0.1433558464050293, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 32, 30, 31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, fig", "compilation_passed": true, "time": 0.03040933609008789, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS).fit(data)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, figsize=(6, 6))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1129000186920166, "tests_passed": true, "error": null}}
{"selected_lines": [28, 30, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L).reshape(len(L),-1)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11252188682556152, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 28, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, fig", "compilation_passed": true, "time": 0.021875381469726562, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, axes = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.024521827697753906, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30, 31, 33, 32, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, random_state=0)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.10877394676208496, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 31, 28, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, svd_solver='full')\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(8, 8))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11881518363952637, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 28, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1082770824432373, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1], c=\"k\")\n    return pca_result, ax", "compilation_passed": true, "time": 0.14231610298156738, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L).reshape(len(L),-1)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11304283142089844, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1344740390777588, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 30, 33, 28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return (pca_result, ax)", "compilation_passed": true, "time": 0.04542803764343262, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 28, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L).reshape(-1, len(L[0]))\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.10880088806152344, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [33, 28, 31, 32, 30], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(8, 8))\n    ax.scatter(*pca_result.T)\n    return pca_result, ax", "compilation_passed": true, "time": 0.11227893829345703, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 33, 29, 28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1, figsize=(10, 10))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11704778671264648, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, svd_solver='full')\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, figsize=(6, 6))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 1.3950819969177246, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 33, 29, 28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1, figsize=(10, 10))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11704778671264648, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12069892883300781, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 28, 31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS).fit(data)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11697888374328613, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.05081295967102051, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 31, 28, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, random_state=0)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, fig", "compilation_passed": true, "time": 0.02333807945251465, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*pca_result.T)\n    return pca_result, ax", "compilation_passed": true, "time": 0.1433558464050293, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1], c=np.arange(pca_result.shape[0]), s=200, alpha=0.5, cmap='rainbow', linewidth=1)\n    return pca_result, ax", "compilation_passed": true, "time": 0.12235903739929199, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 33, 31, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1], color=\"black\")\n    return pca_result, ax", "compilation_passed": true, "time": 0.11181378364562988, "tests_passed": true, "error": null}}
{"selected_lines": [32, 28, 30, 31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(*pca_result.T)\n    return pca_result, ax", "compilation_passed": true, "time": 0.10834097862243652, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [33, 28, 31, 32, 30], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(8, 8))\n    ax.scatter(*pca_result.T)\n    return pca_result, ax", "compilation_passed": true, "time": 0.11227893829345703, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 30, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T)\n    fig, ax = plt.subplots(figsize=(15, 10))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.04489898681640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1], c=\"k\")\n    return pca_result, ax", "compilation_passed": true, "time": 0.14231610298156738, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*pca_result.T)\n    return pca_result, ax", "compilation_passed": true, "time": 0.1433558464050293, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, svd_solver='full')\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12331199645996094, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*pca_result.T)\n    return pca_result, fig", "compilation_passed": true, "time": 0.02279806137084961, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 28, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1082770824432373, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 31, 28, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, svd_solver='full')\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.10784792900085449, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, random_state=0)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1], color=\"black\")\n    return pca_result, ax", "compilation_passed": true, "time": 0.12342119216918945, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 28, 32, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(8, 8))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1], c=\"k\")\n    return pca_result, ax", "compilation_passed": true, "time": 0.11383295059204102, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 29, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS).fit(data)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.13015198707580566, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*data), marker='o')\n    return pca_result, ax", "compilation_passed": true, "time": 0.12227201461791992, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 32, 31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11191773414611816, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*pca_result.T)\n    return pca_result, ax", "compilation_passed": true, "time": 0.1433558464050293, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1344740390777588, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS).fit(data)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12543606758117676, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*data))\n    return pca_result, ax", "compilation_passed": true, "time": 0.12662386894226074, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 29, 33, 28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, random_state=0)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12589693069458008, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [30, 28, 31, 33, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L).reshape(-1, len(L[0]))\n    pca = PCA(n_components=N_COMPONENTS, random_state=0)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11346316337585449, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L).reshape(len(L),-1)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11304283142089844, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*data), alpha=0.5)\n    return pca_result, ax", "compilation_passed": true, "time": 0.14325189590454102, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 29, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS).fit(data)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.13015198707580566, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.14093589782714844, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 28, 31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS).fit(data)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11697888374328613, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1)\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return (pca_result, ax)", "compilation_passed": true, "time": 0.12107110023498535, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L).reshape(-1, len(L[0]))\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11869502067565918, "tests_passed": true, "error": null}}
{"selected_lines": [32, 28, 31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1, figsize=(10, 10))\n    ax.scatter(*pca_result.T)\n    return pca_result, ax", "compilation_passed": true, "time": 0.11504793167114258, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1, figsize=(10, 10))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.13689327239990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(5, 5))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1233217716217041, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 30, 33, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, axes = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 28, 32, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.05768704414367676, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS).fit(data)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12385201454162598, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*data), alpha=0.5)\n    return pca_result, ax", "compilation_passed": true, "time": 0.14325189590454102, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 28, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, fig", "compilation_passed": true, "time": 0.021875381469726562, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 33, 28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(15, 10))\n    ax.scatter(*zip(*data))\n    return pca_result, ax", "compilation_passed": true, "time": 0.11383605003356934, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 28, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1082770824432373, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1], color=\"black\")\n    return pca_result, ax", "compilation_passed": true, "time": 0.1146860122680664, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*data), alpha=0.5)\n    return pca_result, ax", "compilation_passed": true, "time": 0.14325189590454102, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 33, 31, 30], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, svd_solver='full')\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1, figsize=(10, 10))\n    ax.scatter(*zip(*data), marker='o')\n    return pca_result, ax", "compilation_passed": true, "time": 0.11456012725830078, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, random_state=0)\n    pca_result = pca.fit_transform(data.T)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.046465158462524414, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 31, 28, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L).reshape(len(L),-1)\n    pca = PCA(n_components=N_COMPONENTS).fit(data)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return (pca_result, ax)", "compilation_passed": true, "time": 0.12148284912109375, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [33, 28, 32, 30], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T).T\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1], c=\"k\")\n    return pca_result, ax", "compilation_passed": true, "time": 0.023730993270874023, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, random_state=0)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*pca_result.T)\n    return pca_result, fig", "compilation_passed": true, "time": 0.023185014724731445, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(8, 8))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11370396614074707, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [28, 31, 33, 29, 30], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, random_state=0)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1)\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.13364696502685547, "tests_passed": true, "error": null}}
{"selected_lines": [28, 33, 30, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*data), alpha=0.5)\n    return pca_result, fig", "compilation_passed": true, "time": 0.023293018341064453, "tests_passed": true, "error": null}}
{"selected_lines": [28, 31, 32, 30, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(5, 5))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11431503295898438, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1], color=\"black\")\n    return pca_result, ax", "compilation_passed": true, "time": 0.1146860122680664, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 32, 28, 31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, axes = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*data))\n    return pca_result, ax", "compilation_passed": true, "time": 0.12662386894226074, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [28, 31, 30, 29, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return (pca_result, ax)", "compilation_passed": true, "time": 0.11423897743225098, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 28, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, fig", "compilation_passed": true, "time": 0.021875381469726562, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 31, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(*zip(*data), alpha=0.5)\n    return (pca_result, ax)", "compilation_passed": true, "time": 0.11490488052368164, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 30, 32, 31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(*zip(*data), marker='o')\n    return pca_result, ax", "compilation_passed": true, "time": 0.12683391571044922, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 28, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L).reshape(-1, len(L[0]))\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.10880088806152344, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12069892883300781, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [28, 33, 32, 30], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1], c=np.arange(pca_result.shape[0]), s=200, alpha=0.5, cmap='rainbow', linewidth=1)\n    return pca_result, ax", "compilation_passed": true, "time": 0.11556625366210938, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 30, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T)\n    fig, ax = plt.subplots(figsize=(15, 10))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.04489898681640625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T).T\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.028615951538085938, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 28, 29, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(*zip(*data), alpha=0.5)\n    return pca_result, ax", "compilation_passed": true, "time": 0.12908411026000977, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1)\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11793994903564453, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1)\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11668086051940918, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS).fit(data)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12385201454162598, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*pca_result.T)\n    return pca_result, ax", "compilation_passed": true, "time": 0.1433558464050293, "tests_passed": true, "error": null}}
{"selected_lines": [28, 31, 32, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(5, 5))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11510419845581055, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 33, 30, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(7, 7))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12272095680236816, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1], c=np.arange(pca_result.shape[0]), s=200, alpha=0.5, cmap='rainbow', linewidth=1)\n    return pca_result, ax", "compilation_passed": true, "time": 0.12235903739929199, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12069892883300781, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*pca_result.T)\n    return pca_result, ax", "compilation_passed": true, "time": 0.1433558464050293, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [28, 31, 32, 33, 30], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, figsize=(6, 6))\n    ax.scatter(*pca_result.T)\n    return (pca_result, ax)", "compilation_passed": true, "time": 0.12729811668395996, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*data), marker='o')\n    return pca_result, ax", "compilation_passed": true, "time": 0.12227201461791992, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(8, 8))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11370396614074707, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1], c=\"k\")\n    return pca_result, ax", "compilation_passed": true, "time": 0.14231610298156738, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1], c=np.arange(pca_result.shape[0]), s=200, alpha=0.5, cmap='rainbow', linewidth=1)\n    return pca_result, ax", "compilation_passed": true, "time": 0.12235903739929199, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*data))\n    return pca_result, ax", "compilation_passed": true, "time": 0.12662386894226074, "tests_passed": true, "error": null}}
{"selected_lines": [32, 28, 31, 30, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, axes = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12069892883300781, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.04720568656921387, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1)\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11793994903564453, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 28, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, fig", "compilation_passed": true, "time": 0.021875381469726562, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 32, 31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11191773414611816, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1344740390777588, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*data), alpha=0.5)\n    return pca_result, ax", "compilation_passed": true, "time": 0.14325189590454102, "tests_passed": true, "error": null}}
{"selected_lines": [28, 33, 29, 32, 31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, svd_solver='full')\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1)\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11471891403198242, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(8, 8))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.5051119327545166, "tests_passed": true, "error": null}}
{"selected_lines": [28, 31, 32, 30, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(5, 5))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11431503295898438, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 28, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1082770824432373, "tests_passed": true, "error": null}}
{"selected_lines": [28, 30, 32, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T)\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*data))\n    return pca_result, ax", "compilation_passed": true, "time": 0.04756784439086914, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.14093589782714844, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1)\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11668086051940918, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(7, 7))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.13709092140197754, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 28, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1082770824432373, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1)\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11668086051940918, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*data), marker='o')\n    return pca_result, ax", "compilation_passed": true, "time": 0.12227201461791992, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 33, 30, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, svd_solver='full')\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, fig", "compilation_passed": true, "time": 0.023812294006347656, "tests_passed": true, "error": null}}
{"selected_lines": [28, 30, 33, 31, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, random_state=0)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11626076698303223, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*data), marker='o')\n    return pca_result, ax", "compilation_passed": true, "time": 0.12227201461791992, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*pca_result.T)\n    return pca_result, ax", "compilation_passed": true, "time": 0.1433558464050293, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12069892883300781, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1)\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11793994903564453, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1344740390777588, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(7, 7))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.13709092140197754, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 31, 28, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, svd_solver='full')\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.10784792900085449, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*data))\n    return pca_result, ax", "compilation_passed": true, "time": 0.12662386894226074, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 28, 32, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.05768704414367676, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 28, 32, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.05768704414367676, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(5, 5))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1233217716217041, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*data))\n    return pca_result, ax", "compilation_passed": true, "time": 0.12662386894226074, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [29, 28, 32, 30, 31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(15, 10))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.10622000694274902, "tests_passed": true, "error": null}}
{"selected_lines": [28, 31, 30], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(5, 5))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1256999969482422, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*data), marker='o')\n    return pca_result, ax", "compilation_passed": true, "time": 0.12227201461791992, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(8, 8))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.5051119327545166, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, random_state=0)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12015509605407715, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L).reshape(len(L),-1)\n    pca = PCA(n_components=N_COMPONENTS, svd_solver='full')\n    pca_result = pca.fit_transform(data.T)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.05856013298034668, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 33, 30, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(7, 7))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12272095680236816, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1], c=np.arange(pca_result.shape[0]), s=200, alpha=0.5, cmap='rainbow', linewidth=1)\n    return pca_result, ax", "compilation_passed": true, "time": 0.12235903739929199, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1], color=\"black\")\n    return pca_result, ax", "compilation_passed": true, "time": 0.1146860122680664, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 31, 32, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, svd_solver='full')\n    pca_result = pca.fit_transform(data)\n    fig, axes = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 31, 32, 33, 30], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T)\n    fig, ax = plt.subplots(figsize=(8, 8))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.04761004447937012, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.05081295967102051, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 28, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L).reshape(-1, len(L[0]))\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.10880088806152344, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 31, 28, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, svd_solver='full')\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.10784792900085449, "tests_passed": true, "error": null}}
{"selected_lines": [33, 28, 31, 30], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L).reshape(len(L),-1)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1)\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12195992469787598, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 29, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS).fit(data)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.13015198707580566, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [29, 28, 32, 30, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return (pca_result, ax)", "compilation_passed": true, "time": 0.11330103874206543, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1)\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11668086051940918, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 32, 29, 30], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11652112007141113, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, axes = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 29, 33, 28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, random_state=0)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12589693069458008, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [28, 31, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1)\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11623024940490723, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [29, 28, 32, 30, 31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(15, 10))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.10622000694274902, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12069892883300781, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 28, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1082770824432373, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(8, 8))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11370396614074707, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 31, 28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, figsize=(6, 6))\n    ax.scatter(*zip(*data), marker='o')\n    return pca_result, ax", "compilation_passed": true, "time": 0.11637020111083984, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 28, 32, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.05768704414367676, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12069892883300781, "tests_passed": true, "error": null}}
{"selected_lines": [28, 29, 31, 32, 30], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, random_state=0)\n    pca_result = pca.fit_transform(data)\n    fig, axes = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 29, 31, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T)\n    fig, ax = plt.subplots(1)\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.047547101974487305, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return (pca_result, ax)", "compilation_passed": true, "time": 0.1172189712524414, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1)\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11793994903564453, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, axes = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.024521827697753906, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(7, 7))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.13709092140197754, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 30, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T).T\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.03596091270446777, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1)\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11793994903564453, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, svd_solver='full')\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, figsize=(6, 6))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 1.3950819969177246, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.05081295967102051, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, axes = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.024521827697753906, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [31, 32, 28, 29, 30], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, figsize=(6, 6))\n    ax.scatter(*pca_result.T)\n    return pca_result, ax", "compilation_passed": true, "time": 0.12525606155395508, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 30, 32, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(7, 7))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, fig", "compilation_passed": true, "time": 0.024093151092529297, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, axes = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return (pca_result, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, random_state=0)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, figsize=(6, 6))\n    ax.scatter(*zip(*data), alpha=0.5)\n    return pca_result, ax", "compilation_passed": true, "time": 0.11780476570129395, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 33, 30, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, svd_solver='full')\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, fig", "compilation_passed": true, "time": 0.023812294006347656, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 30], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T).T\n    fig, ax = plt.subplots()\n    ax.scatter(*pca_result.T)\n    return pca_result, ax", "compilation_passed": true, "time": 0.024488210678100586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 29, 32, 28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, random_state=0)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*pca_result.T)\n    return pca_result, ax", "compilation_passed": true, "time": 0.11133790016174316, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(8, 8))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.5051119327545166, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS).fit(data)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12543606758117676, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1344740390777588, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return (pca_result, ax)", "compilation_passed": true, "time": 0.1172189712524414, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*data))\n    return pca_result, ax", "compilation_passed": true, "time": 0.12662386894226074, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*data), marker='o')\n    return pca_result, ax", "compilation_passed": true, "time": 0.12227201461791992, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1)\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11793994903564453, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, figsize=(6, 6))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12227416038513184, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 29, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, random_state=0)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1], c=np.arange(pca_result.shape[0]), s=200, alpha=0.5, cmap='rainbow', linewidth=1)\n    return pca_result, ax", "compilation_passed": true, "time": 0.12095308303833008, "tests_passed": true, "error": null}}
{"selected_lines": [28, 33, 31, 30], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, figsize=(6, 6))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.13599920272827148, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 31, 32, 28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*data), marker='o')\n    return pca_result, ax", "compilation_passed": true, "time": 0.11689615249633789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [29, 28, 32, 30, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return (pca_result, ax)", "compilation_passed": true, "time": 0.11330103874206543, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 29, 32, 28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, random_state=0)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*pca_result.T)\n    return pca_result, ax", "compilation_passed": true, "time": 0.11133790016174316, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, random_state=0)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12015509605407715, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, axes = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.024521827697753906, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [31, 29, 32, 28, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, random_state=0)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(15, 10))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12450885772705078, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 33, 28, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11581897735595703, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1], c=np.arange(pca_result.shape[0]), s=200, alpha=0.5, cmap='rainbow', linewidth=1)\n    return pca_result, ax", "compilation_passed": true, "time": 0.12235903739929199, "tests_passed": true, "error": null}}
{"selected_lines": [28, 30, 32, 33, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T).T\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.025495052337646484, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [28, 31, 32, 30, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(5, 5))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11431503295898438, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 31, 28, 30], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS, svd_solver='full')\n    pca_result = pca.fit_transform(data.T)\n    fig, ax = plt.subplots(1, figsize=(6, 6))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.04760599136352539, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1)\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11793994903564453, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.05081295967102051, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 32, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, svd_solver='full')\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(15, 10))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11728167533874512, "tests_passed": true, "error": null}}
{"selected_lines": [28, 33, 30, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*data), alpha=0.5)\n    return pca_result, fig", "compilation_passed": true, "time": 0.023293018341064453, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1)\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11668086051940918, "tests_passed": true, "error": null}}
{"selected_lines": [30, 28, 29, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, random_state=0)\n    pca_result = pca.fit_transform(data.T)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.047904014587402344, "tests_passed": true, "error": null}}
{"selected_lines": [28, 32, 31, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L).reshape(len(L),-1)\n    pca = PCA(n_components=N_COMPONENTS, random_state=0)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(7, 7))\n    ax.scatter(*pca_result.T)\n    return pca_result, ax", "compilation_passed": true, "time": 0.13029813766479492, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 31, 28, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, svd_solver='full')\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.10784792900085449, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 33, 30, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, figsize=(6, 6))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.10642790794372559, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 28, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, fig", "compilation_passed": true, "time": 0.021875381469726562, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T).T\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.028615951538085938, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1], c=\"k\")\n    return pca_result, ax", "compilation_passed": true, "time": 0.14231610298156738, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*data))\n    return pca_result, ax", "compilation_passed": true, "time": 0.12662386894226074, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1)\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11668086051940918, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(8, 8))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.5051119327545166, "tests_passed": true, "error": null}}
{"selected_lines": [28, 31, 29, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L).reshape(-1, len(L[0]))\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1, figsize=(10, 10))\n    ax.scatter(*pca_result.T)\n    return pca_result, ax", "compilation_passed": true, "time": 0.11886787414550781, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [33, 28, 30, 31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.047628164291381836, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.14093589782714844, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, random_state=0)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12015509605407715, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12069892883300781, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 32, 31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11191773414611816, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, svd_solver='full')\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12331199645996094, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 30, 28, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L).reshape(-1, len(L[0]))\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, fig", "compilation_passed": true, "time": 0.024658918380737305, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 29, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, random_state=0)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1], c=np.arange(pca_result.shape[0]), s=200, alpha=0.5, cmap='rainbow', linewidth=1)\n    return pca_result, ax", "compilation_passed": true, "time": 0.12095308303833008, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1], color=\"black\")\n    return pca_result, ax", "compilation_passed": true, "time": 0.1146860122680664, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(*pca_result.T)\n    return pca_result, ax", "compilation_passed": true, "time": 0.12466263771057129, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(5, 5))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1233217716217041, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, fig", "compilation_passed": true, "time": 0.0263369083404541, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12069892883300781, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 32, 31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11191773414611816, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 33, 32, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, random_state=0)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.10877394676208496, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 31, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, random_state=0)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(8, 8))\n    ax.scatter(*zip(*data), marker='o')\n    return pca_result, ax", "compilation_passed": true, "time": 0.1387341022491455, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1)\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11668086051940918, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1], color=\"black\")\n    return pca_result, ax", "compilation_passed": true, "time": 0.1146860122680664, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1344740390777588, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 33, 30, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, figsize=(6, 6))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.10642790794372559, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 33, 30, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(7, 7))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12272095680236816, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(15, 10))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return (pca_result, ax)", "compilation_passed": true, "time": 0.11912918090820312, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 28, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1082770824432373, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 33, 30, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, figsize=(6, 6))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.10642790794372559, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 28, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1082770824432373, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 32, 31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11191773414611816, "tests_passed": true, "error": null}}
{"selected_lines": [28, 30, 32, 33, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T).T\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.025495052337646484, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(15, 10))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1255638599395752, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1)\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11793994903564453, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, axes = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.024521827697753906, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.14093589782714844, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [28, 31, 32, 30, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(5, 5))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11431503295898438, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1)\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11668086051940918, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, svd_solver='full')\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12331199645996094, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L).reshape(len(L),-1)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11304283142089844, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(8, 8))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11370396614074707, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1)\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11668086051940918, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(8, 8))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11370396614074707, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*data), alpha=0.5)\n    return pca_result, ax", "compilation_passed": true, "time": 0.14325189590454102, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 29, 32, 28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, random_state=0)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*pca_result.T)\n    return pca_result, ax", "compilation_passed": true, "time": 0.11133790016174316, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T).T\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.028615951538085938, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 33, 32, 28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L).reshape(-1, len(L[0]))\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1], color=\"black\")\n    return pca_result, ax", "compilation_passed": true, "time": 0.11920285224914551, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1, figsize=(10, 10))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.13689327239990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*data), alpha=0.5)\n    return pca_result, ax", "compilation_passed": true, "time": 0.14325189590454102, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T).T\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.028615951538085938, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [30, 28, 29, 31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS, svd_solver='full')\n    pca_result = pca.fit_transform(data.T)\n    fig, axes = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 32, 31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11191773414611816, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 28, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L).reshape(-1, len(L[0]))\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.10880088806152344, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 31, 30, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1)\n    ax.scatter(*zip(*data), marker='o')\n    return (pca_result, ax)", "compilation_passed": true, "time": 0.11796188354492188, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12069892883300781, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [28, 30, 32, 33, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T).T\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.025495052337646484, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 28, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, fig", "compilation_passed": true, "time": 0.021875381469726562, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [28, 33, 30, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*data))\n    return pca_result, fig", "compilation_passed": true, "time": 0.024563074111938477, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 28, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, fig", "compilation_passed": true, "time": 0.021875381469726562, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 33, 30, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, figsize=(6, 6))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.10642790794372559, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 28, 32, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.05768704414367676, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, svd_solver='full')\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12331199645996094, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12069892883300781, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*pca_result.T)\n    return pca_result, ax", "compilation_passed": true, "time": 0.1433558464050293, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*pca_result.T)\n    return pca_result, ax", "compilation_passed": true, "time": 0.1433558464050293, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(15, 10))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1255638599395752, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12069892883300781, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(5, 5))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1233217716217041, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 29, 32, 28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, random_state=0)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*pca_result.T)\n    return pca_result, ax", "compilation_passed": true, "time": 0.11133790016174316, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 28, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L).reshape(-1, len(L[0]))\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.10880088806152344, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1], color=\"black\")\n    return pca_result, ax", "compilation_passed": true, "time": 0.1146860122680664, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1], c=np.arange(pca_result.shape[0]), s=200, alpha=0.5, cmap='rainbow', linewidth=1)\n    return pca_result, ax", "compilation_passed": true, "time": 0.12235903739929199, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 32, 31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11191773414611816, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*pca_result.T)\n    return pca_result, ax", "compilation_passed": true, "time": 0.1433558464050293, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 28, 30], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, svd_solver='full')\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*data))\n    return pca_result, ax", "compilation_passed": true, "time": 0.1190798282623291, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.05081295967102051, "tests_passed": true, "error": null}}
{"selected_lines": [28, 31, 32, 30, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(5, 5))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11431503295898438, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 28, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, fig", "compilation_passed": true, "time": 0.021875381469726562, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 29, 30, 28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.13832402229309082, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*data))\n    return pca_result, ax", "compilation_passed": true, "time": 0.12662386894226074, "tests_passed": true, "error": null}}
{"selected_lines": [28, 31, 32, 30, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(5, 5))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11431503295898438, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L).reshape(len(L),-1)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(5, 5))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12498688697814941, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*pca_result.T)\n    return pca_result, fig", "compilation_passed": true, "time": 0.02279806137084961, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1)\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11668086051940918, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, random_state=0)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12015509605407715, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 31, 28, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, svd_solver='full')\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.10784792900085449, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 28, 32, 31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(7, 7))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12018108367919922, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, fig", "compilation_passed": true, "time": 0.0263369083404541, "tests_passed": true, "error": null}}
{"selected_lines": [29, 28, 32, 30, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return (pca_result, ax)", "compilation_passed": true, "time": 0.11330103874206543, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 31, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(5, 5))\n    ax.scatter(*zip(*data), marker='o')\n    return pca_result, ax", "compilation_passed": true, "time": 0.10953783988952637, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*pca_result.T)\n    return pca_result, ax", "compilation_passed": true, "time": 0.1433558464050293, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 32, 31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11191773414611816, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 32, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(7, 7))\n    ax.scatter(*zip(*data), marker='o')\n    return pca_result, ax", "compilation_passed": true, "time": 0.11928606033325195, "tests_passed": true, "error": null}}
{"selected_lines": [32, 28, 30, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return (pca_result, ax)", "compilation_passed": true, "time": 0.13207077980041504, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*data), marker='o')\n    return pca_result, ax", "compilation_passed": true, "time": 0.12227201461791992, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 33, 30, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, figsize=(6, 6))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.10642790794372559, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 33, 28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T).T\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*data), marker='o')\n    return pca_result, ax", "compilation_passed": true, "time": 0.024753808975219727, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*data), marker='o')\n    return pca_result, ax", "compilation_passed": true, "time": 0.12227201461791992, "tests_passed": true, "error": null}}
{"selected_lines": [28, 33, 30, 29, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1], color=\"black\")\n    return pca_result, ax", "compilation_passed": true, "time": 0.04794812202453613, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 28, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1082770824432373, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS).fit(data)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12385201454162598, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1], color=\"black\")\n    return pca_result, ax", "compilation_passed": true, "time": 0.1146860122680664, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 32, 28, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L).reshape(-1, len(L[0]))\n    pca = PCA(n_components=N_COMPONENTS, svd_solver='full')\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1], c=\"k\")\n    return pca_result, ax", "compilation_passed": true, "time": 0.11954879760742188, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(15, 10))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1255638599395752, "tests_passed": true, "error": null}}
{"selected_lines": [29, 28, 32, 30, 31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(15, 10))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.10622000694274902, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(7, 7))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.13709092140197754, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 28, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1082770824432373, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, svd_solver='full')\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return (pca_result, ax)", "compilation_passed": true, "time": 0.12782597541809082, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1344740390777588, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 33, 28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, fig", "compilation_passed": true, "time": 0.024634122848510742, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1344740390777588, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, axes = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*data), alpha=0.5)\n    return pca_result, ax", "compilation_passed": true, "time": 0.14325189590454102, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*pca_result.T)\n    return pca_result, ax", "compilation_passed": true, "time": 0.1433558464050293, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 28, 30, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(7, 7))\n    ax.scatter(*pca_result.T)\n    return pca_result, ax", "compilation_passed": true, "time": 0.13653206825256348, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1], c=np.arange(pca_result.shape[0]), s=200, alpha=0.5, cmap='rainbow', linewidth=1)\n    return pca_result, ax", "compilation_passed": true, "time": 0.12235903739929199, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 32, 31, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T).T\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*data), alpha=0.5)\n    return pca_result, ax", "compilation_passed": true, "time": 0.025883197784423828, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.05081295967102051, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 33, 29, 28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1, figsize=(10, 10))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11704778671264648, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return (pca_result, ax)", "compilation_passed": true, "time": 0.1172189712524414, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1], c=np.arange(pca_result.shape[0]), s=200, alpha=0.5, cmap='rainbow', linewidth=1)\n    return pca_result, ax", "compilation_passed": true, "time": 0.12235903739929199, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L).reshape(-1, len(L[0]))\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11869502067565918, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [28, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS, svd_solver='full')\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11289715766906738, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 33, 29, 28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1, figsize=(10, 10))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11704778671264648, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 28, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*data))\n    return pca_result, ax", "compilation_passed": true, "time": 0.12037014961242676, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.05081295967102051, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.05081295967102051, "tests_passed": true, "error": null}}
{"selected_lines": [28, 31, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1)\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11623024940490723, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 28, 31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS).fit(data)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11697888374328613, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 29, 30, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, random_state=0)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(*pca_result.T)\n    return pca_result, ax", "compilation_passed": true, "time": 0.11976814270019531, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 30, 31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T).T\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.025146961212158203, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1344740390777588, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*data), marker='o')\n    return pca_result, ax", "compilation_passed": true, "time": 0.12227201461791992, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1], color=\"black\")\n    return pca_result, ax", "compilation_passed": true, "time": 0.1146860122680664, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 32, 31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1)\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11191773414611816, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [29, 28, 32, 30, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return (pca_result, ax)", "compilation_passed": true, "time": 0.11330103874206543, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1)\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11668086051940918, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(5, 5))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1233217716217041, "tests_passed": true, "error": null}}
{"selected_lines": [28, 33, 31, 30], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, figsize=(6, 6))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.13599920272827148, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 30], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data.T).T\n    fig, ax = plt.subplots()\n    ax.scatter(*pca_result.T)\n    return pca_result, ax", "compilation_passed": true, "time": 0.024488210678100586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, fig", "compilation_passed": true, "time": 0.0263369083404541, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12069892883300781, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*zip(*data), alpha=0.5)\n    return pca_result, ax", "compilation_passed": true, "time": 0.14325189590454102, "tests_passed": true, "error": null}}
{"selected_lines": [28, 30, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L).reshape(len(L),-1)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11252188682556152, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L).reshape(-1, len(L[0]))\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11869502067565918, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1)\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11668086051940918, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(*pca_result.T)\n    return pca_result, ax", "compilation_passed": true, "time": 0.10757088661193848, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 30, 28, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS).fit(data)\n    pca_result = pca.fit_transform(data)\n    fig, axes = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 28, 29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, axes = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1], c=\"k\")\n    return pca_result, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return (pca_result, ax)", "compilation_passed": true, "time": 0.1172189712524414, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.asarray(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12069892883300781, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.14093589782714844, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS, random_state=0)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12015509605407715, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [29, 28, 32, 30, 33], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return (pca_result, ax)", "compilation_passed": true, "time": 0.11330103874206543, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, axes = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.024521827697753906, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32, 31, 33, 29, 28], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots(1, 1, figsize=(10, 10))\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.11704778671264648, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 29, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS).fit(data)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.13015198707580566, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1], c=np.arange(pca_result.shape[0]), s=200, alpha=0.5, cmap='rainbow', linewidth=1)\n    return pca_result, ax", "compilation_passed": true, "time": 0.12235903739929199, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:,0], pca_result[:,1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.1231071949005127, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 33, 28, 32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, axes = plt.subplots()\n    ax.scatter(*zip(*data))\n    return pca_result, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "from sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Constants\nN_COMPONENTS = 2\n\n\ndef task_func(L):\n    \"\"\"\n    Convert a list of lists 'L' into a 2D numeric array, apply PCA to it and return the PCA result and scatter plot.\n    \n    Requirements:\n    - numpy\n    - sklearn.decomposition\n    - matplotlib.pyplot\n\n    Parameters:\n    L (list of lists): A list of lists where each sublist contains integers.\n    \n    Returns:\n    tuple: A tuple containing the PCA result (numpy array) and the scatter plot (matplotlib Axes object).\n\n    Example:\n    >>> pca_result, plot = task_func([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    >>> type(pca_result)\n    <class 'numpy.ndarray'>\n    \"\"\"\n    data = np.array(L)\n    pca = PCA(n_components=N_COMPONENTS)\n    pca_result = pca.fit_transform(data)\n    fig, ax = plt.subplots()\n    ax.scatter(pca_result[:, 0], pca_result[:, 1])\n    return pca_result, ax", "compilation_passed": true, "time": 0.12285113334655762, "tests_passed": true, "error": null}}
